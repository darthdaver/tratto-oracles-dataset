[
    {
        "id": 4205,
        "oracle": "this.isStrict() && this.getEdgeSet().stream().anyMatch(jdVar -> (jdVar.getNode0().equals(this.getNode(fromIndex)) || jdVar.getNode0().equals(this.getNode(toIndex))) && (jdVar.getNode1().equals(this.getNode(fromIndex)) || jdVar.getNode1().equals(this.getNode(toIndex)))) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@throws ElementNotFoundException if strict checking is enabled and there is no edge between\n            the two nodes.",
        "methodJavadoc": "    /**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */",
        "methodSourceCode": "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "fromIndex",
                "",
                "int"
            ],
            [
                "toIndex",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4209,
        "oracle": "this.isStrict() && this.getEdgeSet().stream().anyMatch(jdVar -> (jdVar.getNode0().equals(node1) && jdVar.getNode1().equals(node2)) || (jdVar.getNode1().equals(node1) && jdVar.getNode0().equals(node2))) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@throws ElementNotFoundException if strict checking is enabled and there is no edge between\n            the two nodes.",
        "methodJavadoc": "    /**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */",
        "methodSourceCode": "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "node1",
                "org.graphstream.graph",
                "Node"
            ],
            [
                "node2",
                "org.graphstream.graph",
                "Node"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(String arg0)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEnteringEdge(int arg0)"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator(boolean arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEnteringEdgeIterator()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(String arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdge(int arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(Node arg0)"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getInDegree()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "public abstract String toString()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachLeavingEdge()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(Node arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(Node arg0)"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getDegree()"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getNeighborNodeIterator()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEdge()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(String arg0)"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEnteringEdgeSet()"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getLeavingEdge(int arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(Node arg0)"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEnteringEdge()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(Node arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getLeavingEdgeSet()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(String arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator(boolean arg0)"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getOutDegree()"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getLeavingEdgeIterator()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(String arg0)"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "public abstract Graph getGraph()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(Node arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4187,
        "oracle": "this.getNodeSet().stream().anyMatch(jdVar -> jdVar.equals(node2));",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@param node2 The second node",
        "methodJavadoc": "    /**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */",
        "methodSourceCode": "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "id",
                "java.lang",
                "String"
            ],
            [
                "node1",
                "org.graphstream.graph",
                "Node"
            ],
            [
                "node2",
                "org.graphstream.graph",
                "Node"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator(boolean arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getDegree()"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getLeavingEdgeSet()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getLeavingEdge(int arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "public abstract Graph getGraph()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(String arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(Node arg0)"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getNeighborNodeIterator()"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEnteringEdgeSet()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEnteringEdge(int arg0)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getLeavingEdgeIterator()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(Node arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEnteringEdgeIterator()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator(boolean arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(Node arg0)"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEnteringEdge()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdge(int arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "public abstract String toString()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(Node arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachLeavingEdge()"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getOutDegree()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(Node arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(Node arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(String arg0)"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEdge()"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getInDegree()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEdgeSet()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4206,
        "oracle": "this.getNodeSet().stream().anyMatch(jdVar -> jdVar.equals(node1));",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@param node1 the first node",
        "methodJavadoc": "    /**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */",
        "methodSourceCode": "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "node1",
                "org.graphstream.graph",
                "Node"
            ],
            [
                "node2",
                "org.graphstream.graph",
                "Node"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(Node arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(String arg0)"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator(boolean arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(String arg0)"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEnteringEdgeSet()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(Node arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(String arg0)"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachLeavingEdge()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getEnteringEdgeIterator()"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getNeighborNodeIterator()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeBetween(Node arg0)"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "public abstract Graph getGraph()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "public abstract String toString()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getBreadthFirstIterator()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(String arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeBetween(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getInDegree()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getOutDegree()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator(boolean arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getLeavingEdge(int arg0)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEnteringEdge(int arg0)"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEnteringEdge()"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getLeavingEdgeIterator()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeFrom(Node arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdgeToward(Node arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> T getEdge(int arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterator<T> getDepthFirstIterator()"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Collection<T> getLeavingEdgeSet()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "public abstract <T> Iterable<T> getEachEdge()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "public abstract boolean hasEdgeToward(Node arg0)"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "public abstract int getDegree()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4175,
        "oracle": "this.getEdgeSet().stream().anyMatch(jdVar -> jdVar.getId() == id) && this.isStrict();",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@throws IdAlreadyInUseException If an edge with the same id already exists and strict\n            checking is enabled.",
        "methodJavadoc": "    /**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */",
        "methodSourceCode": "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "id",
                "java.lang",
                "String"
            ],
            [
                "index1",
                "",
                "int"
            ],
            [
                "index2",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3021,
        "oracle": "identifier.indexOf('.') >= 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.spriteManager",
        "className": "SpriteManager",
        "javadocTag": "@throws InvalidSpriteIDException If the given identifier contains a dot.",
        "methodJavadoc": "    /**\n\t * Add a sprite with the given identifier and position. If the sprite\n\t * already exists, nothing is done, excepted if the position is not null in\n\t * which case it is repositioned. If the sprite does not exists, it is added\n\t * and if position is not null, it is used as the initial position of the\n\t * sprite. The sprite identifier cannot actually contain dots. This\n\t * character use is reserved by the sprite mechanism.\n\t * \n\t * @param identifier\n\t *            The sprite identifier.\n\t * @param position\n\t *            The sprite position (or null for (0,0,0)).\n\t * @return The created sprite.\n\t * @throws InvalidSpriteIDException\n\t *             If the given identifier contains a dot.\n\t */",
        "methodSourceCode": "protected Sprite addSprite(String identifier, Values position) throws InvalidSpriteIDException{\n    if (identifier.indexOf('.') >= 0)\n        throw new InvalidSpriteIDException(\"Sprite identifiers cannot contain dots.\");\n    Sprite sprite = sprites.get(identifier);\n    if (sprite == null) {\n        attributeLock = true;\n        sprite = factory.newSprite(identifier, this, position);\n        sprites.put(identifier, sprite);\n        attributeLock = false;\n    } else {\n        if (position != null)\n            sprite.setPosition(position);\n    }\n    return sprite;\n}",
        "classJavadoc": "/**\n * Set of sprites associated with a graph.\n * \n * <p>\n * The sprite manager acts as a set of sprite elements that are associated with\n * a graph. There can be only one sprite manager per graph. The sprite manager\n * only role is to allow to create, destroy and enumerate sprites of a graph.\n * </p>\n * \n * <p>\n * See the {@link Sprite} class for an explanation of what are sprites and how\n * to use them.\n * </p>\n * \n * <p>\n * In case you need to refine the Sprite class, you can change the\n * {@link SpriteFactory} of this manager so that it creates specific instances\n * of sprites instead of the default ones. This is mostly useful when all\n * sprites will pertain to the same subclass. If you need to create several\n * sprites of distinct subclasses, you can use the\n * {@link #addSprite(String, Class)} and\n * {@link #addSprite(String, Class, Values)} methods.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.spriteManager;\n\nimport org.graphstream.graph.Graph;\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.ui.graphicGraph.stylesheet.Style;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.Units;\nimport org.graphstream.ui.graphicGraph.stylesheet.Value;\nimport org.graphstream.ui.graphicGraph.stylesheet.Values;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Set of sprites associated with a graph.\n * \n * <p>\n * The sprite manager acts as a set of sprite elements that are associated with\n * a graph. There can be only one sprite manager per graph. The sprite manager\n * only role is to allow to create, destroy and enumerate sprites of a graph.\n * </p>\n * \n * <p>\n * See the {@link Sprite} class for an explanation of what are sprites and how\n * to use them.\n * </p>\n * \n * <p>\n * In case you need to refine the Sprite class, you can change the\n * {@link SpriteFactory} of this manager so that it creates specific instances\n * of sprites instead of the default ones. This is mostly useful when all\n * sprites will pertain to the same subclass. If you need to create several\n * sprites of distinct subclasses, you can use the\n * {@link #addSprite(String, Class)} and\n * {@link #addSprite(String, Class, Values)} methods.\n * </p>\n */\npublic class SpriteManager implements Iterable<Sprite>, AttributeSink {\n\n    /**\n     * class level logger\n     */\n    private static final Logger logger = Logger.getLogger(SpriteManager.class.getName());\n\n\t// Attribute\n\n\t/**\n\t * The graph to add sprites to.\n\t */\n\tprotected Graph graph;\n\n\t/**\n\t * The set of sprites.\n\t */\n\tprotected HashMap<String, Sprite> sprites = new HashMap<String, Sprite>();\n\n\t/**\n\t * Factory to create new sprites.\n\t */\n\tprotected SpriteFactory factory = new SpriteFactory();\n\n\t// Attributes\n\n\t/**\n\t * this acts as a lock when we are adding a sprite since we are also\n\t * listener of the graph, and when we receive an \"add\" event, we\n\t * automatically create a sprite. We can want to avoid listening at ourself.\n\t */\n\tboolean attributeLock = false;\n\n\t// Construction\n\n\t/**\n\t * Create a new manager for sprite and bind it to the given graph. If the\n\t * graph already contains attributes describing sprites, the manager is\n\t * automatically filled with the existing sprites.\n\t * \n\t * @param graph\n\t *            The graph to associate with this manager;\n\t */\n\tpublic SpriteManager(Graph graph) throws InvalidSpriteIDException {\n\t\tthis.graph = graph;\n\n\t\tlookForExistingSprites();\n\t\tgraph.addAttributeSink(this);\n\t}\n\n\tprotected void lookForExistingSprites() throws InvalidSpriteIDException {\n\t\tif (graph.getAttributeCount() > 0) {\n\t\t\tfor (String attr : graph.getAttributeKeySet()) {\n\t\t\t\tif (attr.startsWith(\"ui.sprite.\")) {\n\t\t\t\t\tString id = attr.substring(10);\n\n\t\t\t\t\tif (id.indexOf('.') < 0) {\n\t\t\t\t\t\taddSprite(id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tString sattr = id.substring(id.indexOf('.') + 1);\n\t\t\t\t\t\tid = id.substring(0, id.indexOf('.'));\n\n\t\t\t\t\t\tSprite s = getSprite(id);\n\n\t\t\t\t\t\tif (s == null)\n\t\t\t\t\t\t\ts = addSprite(id);\n\n\t\t\t\t\t\ts.addAttribute(sattr, graph.getAttribute(attr));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of sprites in the manager.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn sprites.size();\n\t}\n\n\t/**\n\t * True if the manager contains a sprite corresponding to the given\n\t * identifier.\n\t * \n\t * @param identifier\n\t *            The sprite identifier to search for.\n\t */\n\tpublic boolean hasSprite(String identifier) {\n\t\treturn (sprites.get(identifier) != null);\n\t}\n\n\t/**\n\t * Sprite corresponding to the given identifier or null if no sprite is\n\t * associated with the given identifier.\n\t * \n\t * @param identifier\n\t *            The sprite identifier.\n\t */\n\tpublic Sprite getSprite(String identifier) {\n\t\treturn sprites.get(identifier);\n\t}\n\n\t/**\n\t * Iterable set of sprites in no particular order.\n\t * \n\t * @return The set of sprites.\n\t */\n\tpublic Iterable<? extends Sprite> sprites() {\n\t\treturn sprites.values();\n\t}\n\n\t/**\n\t * Iterator on the set of sprites.\n\t * \n\t * @return An iterator on sprites.\n\t */\n\tpublic Iterator<? extends Sprite> spriteIterator() {\n\t\treturn sprites.values().iterator();\n\t}\n\n\t/**\n\t * Iterator on the set of sprites.\n\t * \n\t * @return An iterator on sprites.\n\t */\n\tpublic Iterator<Sprite> iterator() {\n\t\treturn sprites.values().iterator();\n\t}\n\n\t/**\n\t * The current sprite factory.\n\t * \n\t * @return A Sprite factory.\n\t */\n\tpublic SpriteFactory getSpriteFactory() {\n\t\treturn factory;\n\t}\n\n\t// Command\n\n\t/**\n\t * Detach this manager from its graph. This manager will no more be usable\n\t * to create or remove sprites. However sprites not yet removed are still\n\t * present as attributes in the graph and binding another sprite manager to\n\t * this graph will retrieve all sprites.\n\t */\n\tpublic void detach() {\n\t\tgraph.removeAttributeSink(this);\n\t\tsprites.clear();\n\n\t\tgraph = null;\n\t}\n\n\t/**\n\t * Specify the sprite factory to use. This allows to use specific sprite\n\t * classes (descendants of Sprite).\n\t * \n\t * @param factory\n\t *            The new factory to use.\n\t */\n\tpublic void setSpriteFactory(SpriteFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Reset the sprite factory to defaults.\n\t */\n\tpublic void resetSpriteFactory() {\n\t\tfactory = new SpriteFactory();\n\t}\n\n\t/**\n\t * Add a sprite with the given identifier. If the sprite already exists,\n\t * nothing is done. The sprite identifier cannot actually contain dots. This\n\t * character use is reserved by the sprite mechanism.\n\t * \n\t * @param identifier\n\t *            The identifier of the new sprite to add.\n\t * @return The created sprite.\n\t * @throws InvalidSpriteIDException\n\t *             If the given identifier contains a dot.\n\t */\n\tpublic Sprite addSprite(String identifier) throws InvalidSpriteIDException {\n\t\treturn addSprite(identifier, (Values) null);\n\t}\n\n\t/**\n\t * Add a sprite with the given identifier and position. If the sprite\n\t * already exists, nothing is done, excepted if the position is not null in\n\t * which case it is repositioned. If the sprite does not exists, it is added\n\t * and if position is not null, it is used as the initial position of the\n\t * sprite. The sprite identifier cannot actually contain dots. This\n\t * character use is reserved by the sprite mechanism.\n\t * \n\t * @param identifier\n\t *            The sprite identifier.\n\t * @param position\n\t *            The sprite position (or null for (0,0,0)).\n\t * @return The created sprite.\n\t * @throws InvalidSpriteIDException\n\t *             If the given identifier contains a dot.\n\t */\n\tprotected Sprite addSprite(String identifier, Values position)\n\t\t\tthrows InvalidSpriteIDException {\n\t\tif (identifier.indexOf('.') >= 0)\n\t\t\tthrow new InvalidSpriteIDException(\n\t\t\t\t\t\"Sprite identifiers cannot contain dots.\");\n\n\t\tSprite sprite = sprites.get(identifier);\n\n\t\tif (sprite == null) {\n\t\t\tattributeLock = true;\n\t\t\tsprite = factory.newSprite(identifier, this, position);\n\t\t\tsprites.put(identifier, sprite);\n\t\t\tattributeLock = false;\n\t\t} else {\n\t\t\tif (position != null)\n\t\t\t\tsprite.setPosition(position);\n\t\t}\n\n\t\treturn sprite;\n\t}\n\n\t/**\n\t * Add a sprite of a given subclass of Sprite with the given identifier. If\n\t * the sprite already exists, nothing is done. This method allows to add a\n\t * sprite of a chosen subclass of Sprite, without using a\n\t * {@link SpriteFactory}. Most often you use a sprite factory when all\n\t * sprites will pertain to the same subclass. If some sprites pertain to\n\t * distinct subclasses, you can use this method.\n\t * \n\t * @param identifier\n\t *            The identifier of the new sprite to add.\n\t * @param spriteClass\n\t *            The class of the new sprite to add.\n\t * @return The created sprite.\n\t */\n\tpublic <T extends Sprite> T addSprite(String identifier,\n\t\t\tClass<T> spriteClass) {\n\t\treturn addSprite(identifier, spriteClass, null);\n\t}\n\n\t/**\n\t * Same as {@link #addSprite(String, Class)} but also allows to specify an\n\t * initial position.\n\t * \n\t * @param identifier\n\t *            The identifier of the new sprite to add.\n\t * @param spriteClass\n\t *            The class of the new sprite to add.\n\t * @param position\n\t *            The sprite position, or null for position (0, 0, 0).\n\t * @return The created sprite.\n\t */\n\tpublic <T extends Sprite> T addSprite(String identifier,\n\t\t\tClass<T> spriteClass, Values position) {\n\t\ttry {\n\t\t\tT sprite = spriteClass.newInstance();\n\t\t\tsprite.init(identifier, this, position);\n\t\t\treturn sprite;\n\t\t} catch (Exception e) {\n            logger.log(Level.WARNING, String.format(\"Error while trying to instantiate class %s.\", spriteClass.getName()), e);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Remove a sprite knowing its identifier. If no such sprite exists, this\n\t * fails silently.\n\t * \n\t * @param identifier\n\t *            The identifier of the sprite to remove.\n\t */\n\tpublic void removeSprite(String identifier) {\n\t\tSprite sprite = sprites.get(identifier);\n\n\t\tif (sprite != null) {\n\t\t\tattributeLock = true;\n\t\t\tsprites.remove(identifier);\n\t\t\tsprite.removed();\n\t\t\tattributeLock = false;\n\t\t}\n\t}\n\n\t// Utility\n\n\tprotected static Values getPositionValue(Object value) {\n\t\tif (value instanceof Object[]) {\n\t\t\tObject[] values = (Object[]) value;\n\n\t\t\tif (values.length == 4) {\n\t\t\t\tif (values[0] instanceof Number && values[1] instanceof Number\n\t\t\t\t\t\t&& values[2] instanceof Number\n\t\t\t\t\t\t&& values[3] instanceof Style.Units) {\n\t\t\t\t\treturn new Values((Style.Units) values[3],\n\t\t\t\t\t\t\t((Number) values[0]).floatValue(),\n\t\t\t\t\t\t\t((Number) values[1]).floatValue(),\n\t\t\t\t\t\t\t((Number) values[2]).floatValue());\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warning(\"Cannot parse values[4] for sprite position.\");\n\t\t\t\t}\n\t\t\t} else if (values.length == 3) {\n\t\t\t\tif (values[0] instanceof Number && values[1] instanceof Number\n\t\t\t\t\t\t&& values[2] instanceof Number) {\n\t\t\t\t\treturn new Values(Units.GU,\n\t\t\t\t\t\t\t((Number) values[0]).floatValue(),\n\t\t\t\t\t\t\t((Number) values[1]).floatValue(),\n\t\t\t\t\t\t\t((Number) values[2]).floatValue());\n\t\t\t\t} else {\n                    logger.warning(\"Cannot parse values[3] for sprite position.\");\n\t\t\t\t}\n\t\t\t} else if (values.length == 1) {\n\t\t\t\tif (values[0] instanceof Number) {\n\t\t\t\t\treturn new Values(Units.GU,\n\t\t\t\t\t\t\t((Number) values[0]).floatValue());\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warning(String.format(\"Sprite position percent is not a number.\"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n\t\t\t}\n\t\t} else if (value instanceof Number) {\n\t\t\treturn new Values(Units.GU, ((Number) value).floatValue());\n\t\t} else if (value instanceof Value) {\n\t\t\treturn new Values((Value) value);\n\t\t} else if (value instanceof Values) {\n\t\t\treturn new Values((Values) value);\n\t\t} else {\n\t\t\tSystem.err\n\t\t\t\t\t.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\",\n\t\t\t\t\t\t\tvalue, value.getClass().getName());\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// GraphAttributesListener\n\n\tpublic void graphAttributeAdded(String graphId, long time,\n\t\t\tString attribute, Object value) {\n\t\tif (attributeLock)\n\t\t\treturn; // We want to avoid listening at ourselves.\n\n\t\tif (attribute.startsWith(\"ui.sprite.\")) {\n\t\t\tString spriteId = attribute.substring(10);\n\n\t\t\tif (spriteId.indexOf('.') < 0) {\n\t\t\t\tif (getSprite(spriteId) == null) {\n\t\t\t\t\t// A sprite has been created by another entity.\n\t\t\t\t\t// Synchronise this manager.\n\n\t\t\t\t\tValues position = null;\n\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t\tposition = getPositionValue(value);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\taddSprite(spriteId, position);\n\t\t\t\t\t} catch (InvalidSpriteIDException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t// Ho !! Dirty !!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void graphAttributeChanged(String graphId, long time,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tif (attributeLock)\n\t\t\treturn; // We want to avoid listening at ourselves.\n\n\t\tif (attribute.startsWith(\"ui.sprite.\")) {\n\t\t\tString spriteId = attribute.substring(10);\n\n\t\t\tif (spriteId.indexOf('.') < 0) {\n\t\t\t\tSprite s = getSprite(spriteId);\n\n\t\t\t\tif (s != null) {\n\t\t\t\t\t// The sprite has been moved by another entity.\n\t\t\t\t\t// Update its position.\n\n\t\t\t\t\tif (newValue != null) {\n\t\t\t\t\t\tValues position = getPositionValue(newValue);\n\t\t\t\t\t\ts.setPosition(position);\n\t\t\t\t\t} else {\n                        logger.warning(String.format(\"%s changed but newValue == null ! (old=%s).\", spriteId, oldValue));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IllegalStateException(\"Sprite changed, but not added.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void graphAttributeRemoved(String graphId, long time,\n\t\t\tString attribute) {\n\t\tif (attributeLock)\n\t\t\treturn; // We want to avoid listening at ourselves.\n\n\t\tif (attribute.startsWith(\"ui.sprite.\")) {\n\t\t\tString spriteId = attribute.substring(10);\n\n\t\t\tif (spriteId.indexOf('.') < 0) {\n\t\t\t\tif (getSprite(spriteId) != null) {\n\t\t\t\t\t// A sprite has been removed by another entity.\n\t\t\t\t\t// Synchronise this manager.\n\n\t\t\t\t\tremoveSprite(spriteId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Unused.\n\n\tpublic void edgeAttributeAdded(String graphId, long time, String edgeId,\n\t\t\tString attribute, Object value) {\n\t}\n\n\tpublic void edgeAttributeChanged(String graphId, long time, String edgeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t}\n\n\tpublic void edgeAttributeRemoved(String graphId, long time, String edgeId,\n\t\t\tString attribute) {\n\t}\n\n\tpublic void nodeAttributeAdded(String graphId, long time, String nodeId,\n\t\t\tString attribute, Object value) {\n\t}\n\n\tpublic void nodeAttributeChanged(String graphId, long time, String nodeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t}\n\n\tpublic void nodeAttributeRemoved(String graphId, long time, String nodeId,\n\t\t\tString attribute) {\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "0",
                "int"
            ],
            [
                "0",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "identifier",
                "java.lang",
                "String"
            ],
            [
                "position",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hasSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public boolean hasSprite(String identifier)"
            ],
            [
                "addSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public <T extends Sprite> T addSprite(String identifier, Class<T> spriteClass, Values position)"
            ],
            [
                "getSpriteFactory",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public SpriteFactory getSpriteFactory()"
            ],
            [
                "addSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public Sprite addSprite(String identifier) throws InvalidSpriteIDException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "addSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public <T extends Sprite> T addSprite(String identifier, Class<T> spriteClass)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "sprites",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public Iterable<? extends Sprite> sprites()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "addSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected Sprite addSprite(String identifier, Values position) throws InvalidSpriteIDException"
            ],
            [
                "iterator",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public Iterator<Sprite> iterator()"
            ],
            [
                "getSpriteCount",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public int getSpriteCount()"
            ],
            [
                "getSprite",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public Sprite getSprite(String identifier)"
            ],
            [
                "spriteIterator",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "public Iterator<? extends Sprite> spriteIterator()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getUnits",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public StyleConstants.Units getUnits()"
            ],
            [
                "size",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public int size()"
            ],
            [
                "iterator",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public Iterator<Double> iterator()"
            ],
            [
                "getValueCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public int getValueCount()"
            ],
            [
                "get",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public double get(int arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public String toString()"
            ],
            [
                "equals",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public boolean equals(Object arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasArray(String arg0)"
            ],
            [
                "attached",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean attached()"
            ],
            [
                "getZ",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public double getZ()"
            ],
            [
                "hasAttribute",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "getUnits",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public StyleConstants.Units getUnits()"
            ],
            [
                "getAttachment",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Element getAttachment()"
            ],
            [
                "hasAttribute",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasLabel",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "getNumber",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public double getNumber(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "getAttributeMap",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Map<String, Object> getAttributeMap()"
            ],
            [
                "getAttribute",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getX",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public double getX()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public CharSequence getLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public int getAttributeCount()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getHash",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getY",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public double getY()"
            ],
            [
                "getAttribute",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasHash(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public String getId()"
            ],
            [
                "getIndex",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public int getIndex()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "graph",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected Graph graph;"
            ],
            [
                "sprites",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected HashMap<String,Sprite> sprites = new HashMap<String, Sprite>();"
            ],
            [
                "factory",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected SpriteFactory factory = new SpriteFactory();"
            ],
            [
                "attributeLock",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "boolean attributeLock = false;"
            ],
            [
                "values",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public ArrayList<Double> values;"
            ],
            [
                "units",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Values",
                "public StyleConstants.Units units;"
            ],
            [
                "id",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "protected String id;"
            ],
            [
                "completeId",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "protected String completeId;"
            ],
            [
                "manager",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "protected SpriteManager manager;"
            ],
            [
                "position",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "protected Values position;"
            ],
            [
                "attachment",
                "org.graphstream.ui.spriteManager",
                "Sprite",
                "protected Element attachment;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4140,
        "oracle": "(this.getNode(from) == null || this.getNode(to) == null || this.getEdgeSet().stream().anyMatch(jdVar -> (jdVar.getNode0().equals(this.getNode(from)) && jdVar.getNode1().equals(this.getNode(to))) || (jdVar.getNode1().equals(this.getNode(from)) && jdVar.getNode0().equals(this.getNode(to)))) == false) && this.isStrict();",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Graph",
        "javadocTag": "@throws ElementNotFoundException If the 'from' or 'to' node is not registered in the graph or\n            not connected and strict checking is enabled.",
        "methodJavadoc": "    /**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */",
        "methodSourceCode": "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.io.IOException;\n\nimport org.graphstream.stream.AttributeSink;\nimport org.graphstream.stream.ElementSink;\nimport org.graphstream.stream.GraphParseException;\nimport org.graphstream.stream.Pipe;\nimport org.graphstream.stream.file.FileSink;\nimport org.graphstream.stream.file.FileSource;\nimport org.graphstream.ui.view.Viewer;\n\n\n/**\n * An Interface that advises general purpose methods for handling graphs.\n * \n * <p>\n * This interface is one of the main interfaces of GraphStream. It defines the\n * services provided by a graph structure. Graphs implementations must at least\n * implement this interface (but are free to provide more services).\n * </p>\n * \n * <p>\n * With {@link org.graphstream.stream.Source},\n * {@link org.graphstream.stream.Sink} and {@link org.graphstream.stream.Pipe},\n * this interface is one of the most important. A graph is a\n * {@link org.graphstream.stream.Pipe} that buffers the graph events and present\n * the graph structure as it is actually.\n * </p>\n * \n * <p>\n * In other words, it allows to browse the graph structure, to explore it, to\n * modify it, and to implement algorithms on it. This class can be seen as a\n * snapshot of a stream of event at current time.\n * </p>\n * \n * <p>\n * With factories ({@link org.graphstream.graph.NodeFactory},\n * {@link org.graphstream.graph.EdgeFactory}), users can define their own models\n * of nodes or edges. Problem is that when you define such model, you want to\n * access to elements with the valid type, without cast if possible. To improve\n * the access to elements in such cases, Graph offers implicit genericity to\n * access nodes or edges. The following is an example of an access without\n * genericity :\n * \n * <pre>\n * \tGraph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = (MyNode) g.getNode(\"root\");\n *  \n *  for( Node o : g.getEachNode() )\n *  {\n *  \tMyNode node = (MyNode) o;\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * With implicit genericity offers by Graph, this can be done easier:\n * \n * <pre>\n *  Graph g = ... ;\n * \tg.setNodeFactory( new MyNodeFactory() );\n *  g.addNode(\"root\");\n *  \n *  MyNode n = g.getNode(\"root\");\n *  \n *  for( MyNode node : g.getEachNode() )\n *  {\n *  \t// Do something with node\n *  }\n * </pre>\n * \n * </p>\n * \n * <p>\n * Graph elements (nodes and edges) can be accessed using their identifier or\n * their index. Each node / edge has a unique string identifier assigned when\n * the element is created. Each element has an automatically maintained unique\n * index between 0 and {@link #getNodeCount()} - 1 or {@link #getEdgeCount()} -\n * 1. When a new element is added, its index is <code>getNodeCount() - 1</code>\n * or <code>getEdgeCount() - 1</code>. When an element is removed, the element\n * with the biggest index takes its place. Unlike identifiers, indices can\n * change when the graph is modified, but they are always successive. A loop of\n * the form\n * \n * <pre>\n * for (int i = 0; i &lt; g.getNodeCount(); i++) {\n * \tNode node = g.getNode(i);\n * \t// Do something with node\n * }\n * </pre>\n * \n * will always iterate on all the nodes of <code>g</code>.\n * </p>\n */\npublic interface Graph extends Element, Pipe, Iterable<Node>, Structure {\n\t// Access\n\n\t/**\n\t * Get a node by its identifier. This method is implicitly generic and\n\t * returns something which extends Node. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param id\n\t *            Identifier of the node to find.\n\t * @return The searched node or null if not found.\n\t */\n\t<T extends Node> T getNode(String id);\n\n\t/**\n\t * Get an edge by its identifier. This method is implicitly generic and\n\t * returns something which extends Edge. The return type is the one of the\n\t * left part of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param id\n\t *            Identifier of the edge to find.\n\t * @return The searched edge or null if not found.\n\t */\n\t<T extends Edge> T getEdge(String id);\n\n\t/**\n\t * The factory used to create node instances. The factory can be changed to\n\t * refine the node class generated for this graph.\n\t * \n\t * @see #setNodeFactory(NodeFactory)\n\t * @see #edgeFactory()\n\t */\n\tNodeFactory<? extends Node> nodeFactory();\n\n\t/**\n\t * The factory used to create edge instances. The factory can be changed to\n\t * refine the edge class generated for this graph.\n\t * \n\t * @see #setEdgeFactory(EdgeFactory)\n\t * @see #nodeFactory()\n\t */\n\tEdgeFactory<? extends Edge> edgeFactory();\n\n\t/**\n\t * Is strict checking enabled? If strict checking is enabled the graph\n\t * checks for name space conflicts (e.g. insertion of two nodes with the\n\t * same name), removal of non-existing elements, use of non existing\n\t * elements (create an edge between two non existing nodes). Graph\n\t * implementations are free to respect strict checking or not.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isStrict();\n\n\t/**\n\t * Is the automatic creation of missing elements enabled?. If strict\n\t * checking is disabled and auto-creation is enabled, when an edge is\n\t * created and one or two of its nodes are not already present in the graph,\n\t * the nodes are automatically created.\n\t * \n\t * @return True if enabled.\n\t */\n\tboolean isAutoCreationEnabled();\n\n\t/**\n\t * If true, when accessing an attribute that does not exist (or is not of\n\t * the expected type), a {@link NullAttributeException} is thrown. Else null\n\t * is returned.\n\t * \n\t * @return True if exceptions must be thrown when accessing a null\n\t *         attribute.\n\t */\n\tboolean nullAttributesAreErrors();\n\n\t/**\n\t * The current step.\n\t * \n\t * @return The step.\n\t */\n\tdouble getStep();\n\n\t// Command\n\n\t/**\n\t * Should a {@link NullAttributeException} be thrown when one tries to\n\t * access a non existing attribute, or an attribute whose type is not the\n\t * expected one?.\n\t * \n\t * @param on\n\t *            if true, exceptions will be thrown when accessing a non\n\t *            existing attribute.\n\t */\n\tvoid setNullAttributesAreErrors(boolean on);\n\n\t/**\n\t * Set the node factory used to create nodes.\n\t * \n\t * @param nf\n\t *            the new NodeFactory\n\t */\n\tvoid setNodeFactory(NodeFactory<? extends Node> nf);\n\n\t/**\n\t * Set the edge factory used to create edges.\n\t * \n\t * @param ef\n\t *            the new EdgeFactory\n\t */\n\tvoid setEdgeFactory(EdgeFactory<? extends Edge> ef);\n\n\t/**\n\t * Enable or disable strict checking.\n\t * \n\t * @see #isStrict()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setStrict(boolean on);\n\n\t/**\n\t * Enable or disable the automatic creation of missing elements.\n\t * \n\t * @see #isAutoCreationEnabled()\n\t * @param on\n\t *            True or false.\n\t */\n\tvoid setAutoCreate(boolean on);\n\n\t// Graph construction\n\n\t/**\n\t * Empty the graph completely by removing any references to nodes or edges.\n\t * Every attribute is also removed. However, listeners are kept.\n\t * \n\t * @see #clearSinks()\n\t */\n\tvoid clear();\n\n\t/**\n\t * Add a node in the graph.\n\t * <p>\n\t * This acts as a factory, creating the node instance automatically (and\n\t * eventually using the node factory provided). An event is generated toward\n\t * the listeners. If strict checking is enabled, and a node already exists\n\t * with this identifier, an\n\t * {@link org.graphstream.graph.IdAlreadyInUseException} is raised. Else the\n\t * error is silently ignored and the already existing node is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.addNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            Arbitrary and unique string identifying the node.\n\t * @return The created node (or the already existing node).\n\t * @throws IdAlreadyInUseException\n\t *             If strict checking is enabled the identifier is already used.\n\t */\n\t<T extends Node> T addNode(String id) throws IdAlreadyInUseException;\n\n\t/**\n\t * Remove a node using its identifier.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param id\n\t *            The unique identifier of the node to remove.\n\t * @return The removed node. If strict checking is disabled, it can return\n\t *         null if the node to remove does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no node matches the given identifier and strict checking\n\t *             is enabled.\n\t */\n\t<T extends Node> T removeNode(String id) throws ElementNotFoundException;\n\n\t/**\n\t * Adds an undirected edge between nodes.\n\t * \n\t * <p>\n\t * The behavior of this method depends on many conditions. It can be\n\t * summarized as follows.\n\t * </p>\n\t * \n\t * <p>\n\t * First of all, the method checks if the graph already contains an edge\n\t * with the same id. If this is the case and strict checking is enabled,\n\t * {@code IdAlreadyInUseException} is thrown. If the strict checking is\n\t * disabled the method returns a reference to the existing edge if it has\n\t * endpoints {@code node1} and {@code node2} (in the same order if the edge\n\t * is directed) or {@code null} otherwise.\n\t * </p>\n\t * \n\t * <p>\n\t * In the case when the graph does not contain an edge with the same id, the\n\t * method checks if {@code node1} and {@code node2} exist. If one or both of\n\t * them do not exist, and strict checking is enabled, {@code\n\t * ElementNotFoundException} is thrown. Otherwise if auto-creation is\n\t * disabled, the method returns {@code null}. If auto-creation is enabled,\n\t * the method creates the missing endpoints.\n\t * \n\t * <p>\n\t * When the edge id is not already in use and the both endpoints exist (or\n\t * created), the edge can still be rejected. It may happen for example when\n\t * it connects two already connected nodes in a single graph. If the edge is\n\t * rejected, the method throws {@code EdgeRejectedException} if strict\n\t * checking is enabled or returns {@code null} otherwise. Finally, if the\n\t * edge is accepted, it is created using the corresponding edge factory and\n\t * a reference to it is returned.\n\t * \n\t * <p>\n\t * An edge creation event is sent toward the listeners. If new nodes are\n\t * created, the corresponding events are also sent to the listeners.\n\t * </p>\n\t * \n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.addEdge(&quot;...&quot;, &quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * \n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t */\n\t<T extends Edge> T addEdge(String id, String node1, String node2)\n\t\t\tthrows IdAlreadyInUseException, ElementNotFoundException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)}, but this edge can be\n\t * directed between the two given nodes. If directed, the edge goes in the\n\t * 'from' -&gt; 'to' direction. An event is sent toward the listeners.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node identifier.\n\t * @param node2\n\t *            The second node identifier.\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null} (see the\n\t *         detailed description above)\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws ElementNotFoundException\n\t *             If strict checking is enabled, and 'node1' or 'node2' are not\n\t *             registered in the graph.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, String from, String to,\n\t\t\tboolean directed) throws IdAlreadyInUseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Remove an edge given the identifiers of its two endpoints.\n\t * <p>\n\t * If the edge is directed it is removed only if its source and destination\n\t * nodes are identified by 'from' and 'to' respectively. If the graph is a\n\t * multi-graph and there are several edges between the two nodes, one of the\n\t * edges at random is removed. An event is sent toward the listeners. If\n\t * strict checking is enabled and at least one of the two given nodes does\n\t * not exist or if they are not connected, a not found exception is raised.\n\t * Else the error is silently ignored, and null is returned.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;, &quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param from\n\t *            The origin node identifier to select the edge.\n\t * @param to\n\t *            The destination node identifier to select the edge.\n\t * @return The removed edge, or null if strict checking is disabled and at\n\t *         least one of the two given nodes does not exist or there is no\n\t *         edge between them\n\t * @throws ElementNotFoundException\n\t *             If the 'from' or 'to' node is not registered in the graph or\n\t *             not connected and strict checking is enabled.\n\t */\n\t<T extends Edge> T removeEdge(String from, String to)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge knowing its identifier. An event is sent toward the\n\t * listeners. If strict checking is enabled and the edge does not exist,\n\t * {@code ElementNotFoundException} is raised. Otherwise the error is\n\t * silently ignored and null is returned.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the edge to remove.\n\t * @return The removed edge, or null if strict checking is disabled and the\n\t *         edge does not exist.\n\t * @throws ElementNotFoundException\n\t *             If no edge matches the identifier and strict checking is\n\t *             enabled.\n\t */\n\t<T extends Edge> T removeEdge(String id) throws ElementNotFoundException;\n\n\t/**\n\t * <p>\n\t * Since dynamic graphs are based on discrete event modifications, the\n\t * notion of step is defined to simulate elapsed time between events. So a\n\t * step is a event that occurs in the graph, it does not modify it but it\n\t * gives a kind of timestamp that allows the tracking of the progress of the\n\t * graph over the time.\n\t * </p>\n\t * <p>\n\t * This kind of event is useful for dynamic algorithms that listen to the\n\t * dynamic graph and need to measure the time in the graph's evolution.\n\t * </p>\n\t * \n\t * @param time\n\t *            A numerical value that may give a timestamp to track the\n\t *            evolution of the graph over the time.\n\t */\n\tvoid stepBegins(double time);\n\n\t// Source\n\t// XXX do we put the iterable attributeSinks and elementSinks in Source ?\n\n\t/**\n\t * Returns an \"iterable\" of {@link AttributeSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the set of {@link AttributeSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<AttributeSink> attributeSinks();\n\n\t/**\n\t * Returns an \"iterable\" of {@link ElementSink} objects registered to this\n\t * graph.\n\t * \n\t * @return the list of {@link ElementSink} under the form of an iterable\n\t *         object.\n\t */\n\tIterable<ElementSink> elementSinks();\n\n\t// Utility shortcuts (should be mixins or traits, what are you doing Mr Java\n\t// ?)\n\t// XXX use a Readable/Writable/Displayable interface for this ?\n\n\t/**\n\t * Utility method to read a graph. This method tries to identify the graph\n\t * format by itself and instantiates the corresponding reader automatically.\n\t * If this process fails, a NotFoundException is raised.\n\t * \n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognized.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input output error occurs during the graph reading.\n\t */\n\tvoid read(String filename) throws IOException, GraphParseException,\n\t\t\tElementNotFoundException;\n\n\t/**\n\t * Utility method to read a graph using the given reader.\n\t * \n\t * @param input\n\t *            An appropriate reader for the filename.\n\t * @param filename\n\t *            The graph filename (or URL).\n\t * @throws ElementNotFoundException\n\t *             If the file cannot be found or if the format is not\n\t *             recognised.\n\t * @throws GraphParseException\n\t *             If there is a parsing error while reading the file.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph reading.\n\t */\n\tvoid read(FileSource input, String filename) throws IOException,\n\t\t\tGraphParseException;\n\n\t/**\n\t * Utility method to write a graph in DGS format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(String filename) throws IOException;\n\n\t/**\n\t * Utility method to write a graph in the chosen format to a file.\n\t * \n\t * @param filename\n\t *            The file that will contain the saved graph (or URL).\n\t * @param output\n\t *            The output format to use.\n\t * @throws IOException\n\t *             If an input/output error occurs during the graph writing.\n\t */\n\tvoid write(FileSink output, String filename) throws IOException;\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but may be limited. This method\n\t * automatically launch a graph layout algorithm in its own thread to\n\t * compute best node positions.\n\t * \n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display(boolean )\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display();\n\n\t/**\n\t * Utility method that creates a new graph viewer, and register the graph in\n\t * it. Notice that this method is a quick way to see a graph, and only this.\n\t * It can be used to prototype a program, but is very limited.\n\t * \n\t * @param autoLayout\n\t *            If true a layout algorithm is launched in its own thread to\n\t *            compute best node positions.\n\t * @see org.graphstream.ui.view.Viewer\n\t * @see #display()\n\t * @return a graph viewer that allows to command the viewer (it often run in\n\t *         another thread).\n\t */\n\tViewer display(boolean autoLayout);\n\n\t// New methods\n\n\t/**\n\t * Get a node by its index. This method is implicitly generic and returns\n\t * something which extends Node. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode node = graph.getNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode node. If no left part exists,\n\t * method will just return a Node.\n\t * \n\t * @param index\n\t *            Index of the node to find.\n\t * @return The node with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             If the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T getNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Get an edge by its index. This method is implicitly generic and returns\n\t * something which extends Edge. The return type is the one of the left part\n\t * of the assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.getEdge(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * \n\t * @param index\n\t *            The index of the edge to find.\n\t * @return The edge with the given index\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is less than 0 or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param index1\n\t *            The first node index\n\t * @param index2\n\t *            The second node index\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int index1, int index2)\n\t\t\tthrows IndexOutOfBoundsException, IdAlreadyInUseException,\n\t\t\tEdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the nodes are\n\t * identified by their indices.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param toIndex\n\t *            The first node index\n\t * @param fromIndex\n\t *            The second node index\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IndexOutOfBoundsException\n\t *             If node indices are negative or greater than {@code\n\t *             getNodeCount() - 1}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, int fromIndex, int toIndex,\n\t\t\tboolean directed) throws IndexOutOfBoundsException,\n\t\t\tIdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String)} but the node references are\n\t * given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param node1\n\t *            The first node\n\t * @param node2\n\t *            The second node\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node node1, Node node2)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Like {@link #addEdge(String, String, String, boolean)} but the node\n\t * references are given instead of node identifiers.\n\t * \n\t * @param id\n\t *            Unique and arbitrary string identifying the edge.\n\t * @param from\n\t *            The first node\n\t * @param to\n\t *            The second node\n\t * @param directed\n\t *            Is the edge directed?\n\t * @return The newly created edge, an existing edge or {@code null}\n\t * @throws IdAlreadyInUseException\n\t *             If an edge with the same id already exists and strict\n\t *             checking is enabled.\n\t * @throws EdgeRejectedException\n\t *             If strict checking is enabled and the edge is not accepted.\n\t * @see #addEdge(String, String, String)\n\t */\n\t<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed)\n\t\t\tthrows IdAlreadyInUseException, EdgeRejectedException;\n\n\t/**\n\t * Removes an edge with a given index. An event is sent toward the\n\t * listeners.\n\t * \n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge edge = graph.removeEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge edge. If no left part exists,\n\t * method will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the edge to be removed.\n\t * @return The removed edge\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getEdgeCount() - 1}\n\t */\n\t<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but the nodes are identified by their\n\t * indices.\n\t * \n\t * @param fromIndex\n\t *            the index of the source node\n\t * @param toIndex\n\t *            the index of the target node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws IndexOutOfBoundsException\n\t *             If one of the node indices is negative or greater than\n\t *             {@code getNodeCount() - 1}.\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(int fromIndex, int toIndex)\n\t\t\tthrows IndexOutOfBoundsException, ElementNotFoundException;\n\n\t/**\n\t * Removes an edge between two nodes. Like\n\t * {@link #removeEdge(String, String)} but node references are given instead\n\t * of node identifiers.\n\t * \n\t * @param node1\n\t *            the first node\n\t * @param node2\n\t *            the second node\n\t * @return the removed edge or {@code null} if no edge is removed\n\t * @throws ElementNotFoundException\n\t *             if strict checking is enabled and there is no edge between\n\t *             the two nodes.\n\t * @see #removeEdge(String, String)\n\t */\n\t<T extends Edge> T removeEdge(Node node1, Node node2)\n\t\t\tthrows ElementNotFoundException;\n\n\t/**\n\t * Removes an edge. An event is sent toward the listeners.\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = graph.removeEdge(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * \n\t * \n\t * @param edge\n\t *            The edge to be removed\n\t * @return The removed edge\n\t */\n\t<T extends Edge> T removeEdge(Edge edge);\n\n\t/**\n\t * Removes a node with a given index.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(index);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the node to be removed\n\t * @return The removed node\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Removes a node.\n\t * <p>\n\t * An event is generated toward the listeners. Note that removing a node may\n\t * remove all edges it is connected to. In this case corresponding events\n\t * will also be generated toward the listeners.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Node. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedNode n = graph.removeNode(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedNode. If no left part exists, method\n\t * will just return a Node.\n\t * </p>\n\t * \n\t * @param node\n\t *            The node to be removed\n\t * @return The removed node\n\t */\n\t<T extends Node> T removeNode(Node node);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "\"from\"",
                "String"
            ],
            [
                "\"to\"",
                "String"
            ],
            [
                "\"from\"",
                "String"
            ],
            [
                "\"to\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "from",
                "java.lang",
                "String"
            ],
            [
                "to",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "boolean nullAttributesAreErrors()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "boolean isStrict()"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int fromIndex, int toIndex, boolean directed) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String id) throws ElementNotFoundException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Node node1, Node node2) throws ElementNotFoundException"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "double getStep()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(String id)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(String from, String to) throws ElementNotFoundException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(String id) throws ElementNotFoundException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T getNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String from, String to, boolean directed) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node node1, Node node2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T addNode(String id) throws IdAlreadyInUseException"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display(boolean autoLayout)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(int fromIndex, int toIndex) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, String node1, String node2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "Viewer display()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, int index1, int index2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(int index) throws IndexOutOfBoundsException"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "boolean isAutoCreationEnabled()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T removeEdge(Edge edge)"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "Iterable<ElementSink> elementSinks()"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "<T extends Node> T removeNode(Node node)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T addEdge(String id, Node from, Node to, boolean directed) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(int index) throws IndexOutOfBoundsException"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "<T extends Edge> T getEdge(String id)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]