[
    {
        "id": 6199,
        "oracle": "(o instanceof Comparable) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if o is not Comparable",
        "methodJavadoc": "    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */",
        "methodSourceCode": "private static void checkNonNullComparable(final Object o, final DataElement dataElement){\n    if (o == null) {\n        throw new NullPointerException(dataElement + \" cannot be null\");\n    }\n    if (!(o instanceof Comparable)) {\n        throw new ClassCastException(dataElement + \" must be Comparable\");\n    }\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "o",
                "java.lang",
                "Object"
            ],
            [
                "dataElement",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap.DataElement"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap.DataElement",
                "public String toString()"
            ],
            [
                "ordinal",
                "java.lang",
                "Enum",
                "public final int ordinal()"
            ],
            [
                "clone",
                "java.lang",
                "Enum",
                "protected final Object clone() throws CloneNotSupportedException"
            ],
            [
                "name",
                "java.lang",
                "Enum",
                "public final String name()"
            ],
            [
                "equals",
                "java.lang",
                "Enum",
                "public final boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Enum",
                "public final int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Enum",
                "public String toString()"
            ],
            [
                "describeConstable",
                "java.lang",
                "Enum",
                "public final Optional<Enum.EnumDesc<E>> describeConstable()"
            ],
            [
                "getDeclaringClass",
                "java.lang",
                "Enum",
                "public final Class<E> getDeclaringClass()"
            ],
            [
                "compareTo",
                "java.lang",
                "Enum",
                "public final int compareTo(E arg0)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6209,
        "oracle": "((key instanceof Comparable) == false) || ((value instanceof Comparable) == false);",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if key or value is not Comparable",
        "methodJavadoc": "    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */",
        "methodSourceCode": "private static void checkKeyAndValue(final Object key, final Object value){\n    checkKey(key);\n    checkValue(value);\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "Object"
            ],
            [
                "value",
                "java.lang",
                "Object"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6112,
        "oracle": "(key instanceof Comparable) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if the key is of an inappropriate type",
        "methodJavadoc": "    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */",
        "methodSourceCode": "public boolean containsKey(final Object key){\n    checkKey(key);\n    return lookupKey(key) != null;\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "Object"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6115,
        "oracle": "(value instanceof Comparable) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if the value is of an inappropriate type",
        "methodJavadoc": "    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */",
        "methodSourceCode": "public boolean containsValue(final Object value){\n    checkValue(value);\n    return lookupValue(value) != null;\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "value",
                "java.lang",
                "Object"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6117,
        "oracle": "(key instanceof Comparable) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if the key is of an inappropriate type",
        "methodJavadoc": "    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */",
        "methodSourceCode": "public V get(final Object key){\n    checkKey(key);\n    final Node<K, V> node = lookupKey(key);\n    return node == null ? null : node.getValue();\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "Object"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6121,
        "oracle": "((key instanceof Comparable) && (value instanceof Comparable)) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if the key is of an inappropriate type",
        "methodJavadoc": "    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */",
        "methodSourceCode": "public V put(final K key, final V value){\n    final V result = get(key);\n    doPut(key, value);\n    return result;\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "\"A\"",
                "String"
            ],
            [
                "\"B\"",
                "String"
            ],
            [
                "\"A\"",
                "String"
            ],
            [
                "\"C\"",
                "String"
            ],
            [
                "\"A\"",
                "String"
            ],
            [
                "\"B\"",
                "String"
            ],
            [
                "\"C\"",
                "String"
            ],
            [
                "\"B\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "key",
                "",
                "Comparable"
            ],
            [
                "value",
                "",
                "Comparable"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 6127,
        "oracle": "(value instanceof Comparable) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-collections4-4.1",
        "packageName": "org.apache.commons.collections4.bidimap",
        "className": "TreeBidiMap",
        "javadocTag": "@throws ClassCastException if the value is of an inappropriate type",
        "methodJavadoc": "    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */",
        "methodSourceCode": "public K getKey(final Object value){\n    checkValue(value);\n    final Node<K, V> node = lookupValue(value);\n    return node == null ? null : node.getKey();\n}",
        "classJavadoc": "/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY;\nimport static org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.AbstractSet;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.KeyValue;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.OrderedBidiMap;\nimport org.apache.commons.collections4.OrderedIterator;\nimport org.apache.commons.collections4.OrderedMapIterator;\nimport org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\nimport org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;\n\n/**\n * Red-Black tree-based implementation of BidiMap where all objects added\n * implement the <code>Comparable</code> interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (e.g.,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n *\n * @since 3.0 (previously DoubleOrderedMap v2.0)\n * @version $Id: TreeBidiMap.java 1683951 2015-06-06 20:19:03Z tn $\n */\npublic class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n    implements OrderedBidiMap<K, V>, Serializable {\n\n    static enum DataElement {\n        KEY(\"key\"), VALUE(\"value\");\n\n        private final String description;\n\n        /**\n         * Create a new TreeBidiMap.DataElement.\n         *\n         * @param description  the description for the element\n         */\n        private DataElement(final String description) {\n            this.description = description;\n        }\n\n        @Override\n        public String toString() {\n            return description;\n        }\n    }\n\n    private static final long serialVersionUID = 721969328361807L;\n\n    private transient Node<K, V>[] rootNode;\n    private transient int nodeCount = 0;\n    private transient int modifications = 0;\n    private transient Set<K> keySet;\n    private transient Set<V> valuesSet;\n    private transient Set<Map.Entry<K, V>> entrySet;\n    private transient Inverse inverse = null;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new empty TreeBidiMap.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TreeBidiMap() {\n        super();\n        rootNode = new Node[2];\n    }\n\n    /**\n     * Constructs a new TreeBidiMap by copying an existing Map.\n     *\n     * @param map  the map to copy\n     * @throws ClassCastException if the keys/values in the map are\n     *  not Comparable or are not mutually comparable\n     * @throws NullPointerException if any key or value in the map is null\n     */\n    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n        this();\n        putAll(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the number of key-value mappings in this map.\n     *\n     * @return the number of key-value mappings in this map\n     */\n    @Override\n    public int size() {\n        return nodeCount;\n    }\n\n    /**\n     * Checks whether the map is empty or not.\n     *\n     * @return true if the map is empty\n     */\n    @Override\n    public boolean isEmpty() {\n        return nodeCount == 0;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        checkKey(key);\n        return lookupKey(key) != null;\n    }\n\n    /**\n     * Checks whether this map contains the a mapping for the specified value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose presence in this map is to be tested\n     * @return true if this map contains a mapping for the specified value\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        checkValue(value);\n        return lookupValue(value) != null;\n    }\n\n    /**\n     * Gets the value to which this map maps the specified key.\n     * Returns null if the map contains no mapping for this key.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose associated value is to be returned\n     * @return the value to which this map maps the specified key,\n     *  or null if the map contains no mapping for this key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V get(final Object key) {\n        checkKey(key);\n        final Node<K, V> node = lookupKey(key);\n        return node == null ? null : node.getValue();\n    }\n\n    /**\n     * Puts the key-value pair into the map, replacing any previous pair.\n     * <p>\n     * When adding a key-value pair, the value may already exist in the map\n     * against a different key. That mapping is removed, to ensure that the\n     * value only occurs once in the inverse map.\n     * <pre>\n     *  BidiMap map1 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n     *\n     *  BidiMap map2 = new TreeBidiMap();\n     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n     * </pre>\n     * <p>\n     * Both key and value must implement <code>Comparable</code>.\n     *\n     * @param key  key with which the specified value is to be  associated\n     * @param value  value to be associated with the specified key\n     * @return the previous value for the key\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V put(final K key, final V value) {\n        final V result = get(key);\n        doPut(key, value);\n        return result;\n    }\n\n    /**\n     * Puts all the mappings from the specified map into this map.\n     * <p>\n     * All keys and values must implement <code>Comparable</code>.\n     *\n     * @param map  the map to copy from\n     */\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> map) {\n        for (final Map.Entry<? extends K, ? extends V> e : map.entrySet()) {\n            put(e.getKey(), e.getValue());\n        }\n    }\n\n    /**\n     * Removes the mapping for this key from this map if present.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key  key whose mapping is to be removed from the map.\n     * @return previous value associated with specified key,\n     *  or null if there was no mapping for key.\n     * @throws ClassCastException if the key is of an inappropriate type\n     * @throws NullPointerException if the key is null\n     */\n    @Override\n    public V remove(final Object key) {\n        return doRemoveKey(key);\n    }\n\n    /**\n     * Removes all mappings from this map.\n     */\n    @Override\n    public void clear() {\n        modify();\n\n        nodeCount = 0;\n        rootNode[KEY.ordinal()] = null;\n        rootNode[VALUE.ordinal()] = null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the key to which this map maps the specified value.\n     * Returns null if the map contains no mapping for this value.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose associated key is to be returned.\n     * @return the key to which this map maps the specified value,\n     *  or null if the map contains no mapping for this value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K getKey(final Object value) {\n        checkValue(value);\n        final Node<K, V> node = lookupValue(value);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Removes the mapping for this value from this map if present.\n     * <p>\n     * The value must implement <code>Comparable</code>.\n     *\n     * @param value  value whose mapping is to be removed from the map\n     * @return previous key associated with specified value,\n     *  or null if there was no mapping for value.\n     * @throws ClassCastException if the value is of an inappropriate type\n     * @throws NullPointerException if the value is null\n     */\n    @Override\n    public K removeValue(final Object value) {\n        return doRemoveValue(value);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first (lowest) key currently in this map.\n     *\n     * @return the first (lowest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K firstKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the last (highest) key currently in this map.\n     *\n     * @return the last (highest) key currently in this sorted map\n     * @throws NoSuchElementException if this map is empty\n     */\n    @Override\n    public K lastKey() {\n        if (nodeCount == 0) {\n            throw new NoSuchElementException(\"Map is empty\");\n        }\n        return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\n    }\n\n    /**\n     * Gets the next key after the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for next from\n     * @return the next key, null if no match or at end\n     */\n    @Override\n    public K nextKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextGreater(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    /**\n     * Gets the previous key before the one specified.\n     * <p>\n     * The key must implement <code>Comparable</code>.\n     *\n     * @param key the key to search for previous from\n     * @return the previous key, null if no match or at start\n     */\n    @Override\n    public K previousKey(final K key) {\n        checkKey(key);\n        final Node<K, V> node = nextSmaller(lookupKey(key), KEY);\n        return node == null ? null : node.getKey();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the keys contained in this map in key order.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the keys contained in this map.\n     */\n    @Override\n    public Set<K> keySet() {\n        if (keySet == null) {\n            keySet = new KeyView(KEY);\n        }\n        return keySet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the values contained in this map in key order.\n     * The returned object can be cast to a Set.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<V> values() {\n        if (valuesSet == null) {\n            valuesSet = new ValueView(KEY);\n        }\n        return valuesSet;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a set view of the entries contained in this map in key order.\n     * For simple iteration through the map, the MapIterator is quicker.\n     * <p>\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa. If the map is modified while an iteration over\n     * the set is in progress, the results of the iteration are undefined.\n     * <p>\n     * The set supports element removal, which removes the corresponding mapping\n     * from the map. It does not support the add or addAll operations.\n     * The returned MapEntry objects do not support setValue.\n     *\n     * @return a set view of the values contained in this map.\n     */\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        if (entrySet == null) {\n            entrySet = new EntryView();\n        }\n        return entrySet;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public OrderedMapIterator<K, V> mapIterator() {\n        if (isEmpty()) {\n            return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n        }\n        return new ViewMapIterator(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the inverse map for comparison.\n     *\n     * @return the inverse map\n     */\n    @Override\n    public OrderedBidiMap<V, K> inverseBidiMap() {\n        if (inverse == null) {\n            inverse = new Inverse();\n        }\n        return inverse;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        return this.doEquals(obj, KEY);\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @return the hash code value for this map\n     */\n    @Override\n    public int hashCode() {\n        return this.doHashCode(KEY);\n    }\n\n    /**\n     * Returns a string version of this Map in standard format.\n     *\n     * @return a standard format string version of the map\n     */\n    @Override\n    public String toString() {\n        return this.doToString(KEY);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Put logic.\n     *\n     * @param key  the key, always the main map key\n     * @param value  the value, always the main map value\n     */\n    private void doPut(final K key, final V value) {\n        checkKeyAndValue(key, value);\n\n        // store previous and remove previous mappings\n        doRemoveKey(key);\n        doRemoveValue(value);\n\n        Node<K, V> node = rootNode[KEY.ordinal()];\n        if (node == null) {\n            // map is empty\n            final Node<K, V> root = new Node<K, V>(key, value);\n            rootNode[KEY.ordinal()] = root;\n            rootNode[VALUE.ordinal()] = root;\n            grow();\n\n        } else {\n            // add new mapping\n            while (true) {\n                final int cmp = compare(key, node.getKey());\n\n                if (cmp == 0) {\n                    // shouldn't happen\n                    throw new IllegalArgumentException(\"Cannot store a duplicate key (\\\"\" + key + \"\\\") in this Map\");\n                } else if (cmp < 0) {\n                    if (node.getLeft(KEY) != null) {\n                        node = node.getLeft(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setLeft(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                } else { // cmp > 0\n                    if (node.getRight(KEY) != null) {\n                        node = node.getRight(KEY);\n                    } else {\n                        final Node<K, V> newNode = new Node<K, V>(key, value);\n\n                        insertValue(newNode);\n                        node.setRight(newNode, KEY);\n                        newNode.setParent(node, KEY);\n                        doRedBlackInsert(newNode, KEY);\n                        grow();\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private V doRemoveKey(final Object key) {\n        final Node<K, V> node = lookupKey(key);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getValue();\n    }\n\n    private K doRemoveValue(final Object value) {\n        final Node<K, V> node = lookupValue(value);\n        if (node == null) {\n            return null;\n        }\n        doRedBlackDelete(node);\n        return node.getKey();\n    }\n\n    /**\n     * do the actual lookup of a piece of data\n     *\n     * @param data the key or value to be looked up\n     * @param index  the KEY or VALUE int\n     * @return the desired Node, or null if there is no mapping of the\n     *         specified data\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement) {\n        Node<K, V> rval = null;\n        Node<K, V> node = rootNode[dataElement.ordinal()];\n\n        while (node != null) {\n            final int cmp = compare((T) data, (T) node.getData(dataElement));\n            if (cmp == 0) {\n                rval = node;\n                break;\n            } else {\n                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n            }\n        }\n\n        return rval;\n    }\n\n    private Node<K, V> lookupKey(final Object key) {\n        return this.<K>lookup(key, KEY);\n    }\n\n    private Node<K, V> lookupValue(final Object value) {\n        return this.<V>lookup(value, VALUE);\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getRight(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    /**\n     * get the next larger node from the specified node\n     *\n     * @param node the node to be searched from\n     * @param index  the KEY or VALUE int\n     * @return the specified node\n     */\n    private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getLeft(dataElement) != null) {\n            // everything to the node's left is smaller. The greatest of\n            // the left node's descendants is the next smaller node\n            rval = greatestNode(node.getLeft(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose right child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's right\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\n            while (parent != null && child == parent.getLeft(dataElement)) {\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Compare two objects\n     *\n     * @param o1  the first object\n     * @param o2  the second object\n     *\n     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n     *         value if o1 &gt; o2\n     */\n    private static <T extends Comparable<T>> int compare(final T o1, final T o2) {\n        return o1.compareTo(o2);\n    }\n\n    /**\n     * Find the least node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the smallest node, from the specified node, in the\n     *         specified mapping\n     */\n    private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getLeft(dataElement) != null) {\n                rval = rval.getLeft(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Find the greatest node from a given node.\n     *\n     * @param node  the node from which we will start searching\n     * @param index  the KEY or VALUE int\n     * @return the greatest node, from the specified node\n     */\n    private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval = node;\n        if (rval != null) {\n            while (rval.getRight(dataElement) != null) {\n                rval = rval.getRight(dataElement);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * copy the color from one node to another, dealing with the fact\n     * that one or both nodes may, in fact, be null\n     *\n     * @param from the node whose color we're copying; may be null\n     * @param to the node whose color we're changing; may be null\n     * @param index  the KEY or VALUE int\n     */\n    private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement) {\n        if (to != null) {\n            if (from == null) {\n                // by default, make it black\n                to.setBlack(dataElement);\n            } else {\n                to.copyColor(from, dataElement);\n            }\n        }\n    }\n\n    /**\n     * is the specified node red? if the node does not exist, no, it's\n     * black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isRed(final Node<?, ?> node, final DataElement dataElement) {\n        return node != null && node.isRed(dataElement);\n    }\n\n    /**\n     * is the specified black red? if the node does not exist, sure,\n     * it's black, thank you\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement) {\n        return node == null || node.isBlack(dataElement);\n    }\n\n    /**\n     * force a node (if it exists) red\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeRed(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setRed(dataElement);\n        }\n    }\n\n    /**\n     * force a node (if it exists) black\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private static void makeBlack(final Node<?, ?> node, final DataElement dataElement) {\n        if (node != null) {\n            node.setBlack(dataElement);\n        }\n    }\n\n    /**\n     * get a node's grandparent. mind you, the node, its parent, or\n     * its grandparent may not exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement) {\n        return getParent(getParent(node, dataElement), dataElement);\n    }\n\n    /**\n     * get a node's parent. mind you, the node, or its parent, may not\n     * exist. no problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getParent(dataElement);\n    }\n\n    /**\n     * get a node's right child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getRight(dataElement);\n    }\n\n    /**\n     * get a node's left child. mind you, the node may not exist. no\n     * problem\n     *\n     * @param node the node (may be null) in question\n     * @param index  the KEY or VALUE int\n     */\n    private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement) {\n        return node == null ? null : node.getLeft(dataElement);\n    }\n\n    /**\n     * do a rotate left. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateLeft(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> rightChild = node.getRight(dataElement);\n        node.setRight(rightChild.getLeft(dataElement), dataElement);\n\n        if (rightChild.getLeft(dataElement) != null) {\n            rightChild.getLeft(dataElement).setParent(node, dataElement);\n        }\n        rightChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its right child is the root\n            rootNode[dataElement.ordinal()] = rightChild;\n        } else if (node.getParent(dataElement).getLeft(dataElement) == node) {\n            node.getParent(dataElement).setLeft(rightChild, dataElement);\n        } else {\n            node.getParent(dataElement).setRight(rightChild, dataElement);\n        }\n\n        rightChild.setLeft(node, dataElement);\n        node.setParent(rightChild, dataElement);\n    }\n\n    /**\n     * do a rotate right. standard fare in the world of balanced trees\n     *\n     * @param node the node to be rotated\n     * @param index  the KEY or VALUE int\n     */\n    private void rotateRight(final Node<K, V> node, final DataElement dataElement) {\n        final Node<K, V> leftChild = node.getLeft(dataElement);\n        node.setLeft(leftChild.getRight(dataElement), dataElement);\n        if (leftChild.getRight(dataElement) != null) {\n            leftChild.getRight(dataElement).setParent(node, dataElement);\n        }\n        leftChild.setParent(node.getParent(dataElement), dataElement);\n\n        if (node.getParent(dataElement) == null) {\n            // node was the root ... now its left child is the root\n            rootNode[dataElement.ordinal()] = leftChild;\n        } else if (node.getParent(dataElement).getRight(dataElement) == node) {\n            node.getParent(dataElement).setRight(leftChild, dataElement);\n        } else {\n            node.getParent(dataElement).setLeft(leftChild, dataElement);\n        }\n\n        leftChild.setRight(node, dataElement);\n        node.setParent(leftChild, dataElement);\n    }\n\n    /**\n     * complicated red-black insert stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param insertedNode the node to be inserted\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement) {\n        Node<K, V> currentNode = insertedNode;\n        makeRed(currentNode, dataElement);\n\n        while (currentNode != null\n            && currentNode != rootNode[dataElement.ordinal()]\n            && isRed(currentNode.getParent(dataElement), dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                final Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isRightChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateLeft(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            } else {\n\n                // just like clause above, except swap left for right\n                final Node<K, V> y = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n\n                if (isRed(y, dataElement)) {\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(y, dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    currentNode = getGrandParent(currentNode, dataElement);\n                } else {\n                    //dead code?\n                    if (currentNode.isLeftChild(dataElement)) {\n                        currentNode = getParent(currentNode, dataElement);\n\n                        rotateRight(currentNode, dataElement);\n                    }\n\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeRed(getGrandParent(currentNode, dataElement), dataElement);\n\n                    if (getGrandParent(currentNode, dataElement) != null) {\n                        rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                    }\n                }\n            }\n        }\n\n        makeBlack(rootNode[dataElement.ordinal()], dataElement);\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more\n     *\n     * @param deletedNode the node to be deleted\n     */\n    private void doRedBlackDelete(final Node<K, V> deletedNode) {\n        for (final DataElement dataElement : DataElement.values()) {\n            // if deleted node has both left and children, swap with\n            // the next greater node\n            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n            }\n\n            final Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n\n            if (replacement != null) {\n                replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n\n                if (deletedNode.getParent(dataElement) == null) {\n                    rootNode[dataElement.ordinal()] = replacement;\n                } else if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                    deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\n                } else {\n                    deletedNode.getParent(dataElement).setRight(replacement, dataElement);\n                }\n\n                deletedNode.setLeft(null, dataElement);\n                deletedNode.setRight(null, dataElement);\n                deletedNode.setParent(null, dataElement);\n\n                if (isBlack(deletedNode, dataElement)) {\n                    doRedBlackDeleteFixup(replacement, dataElement);\n                }\n            } else {\n\n                // replacement is null\n                if (deletedNode.getParent(dataElement) == null) {\n\n                    // empty tree\n                    rootNode[dataElement.ordinal()] = null;\n                } else {\n\n                    // deleted node had no children\n                    if (isBlack(deletedNode, dataElement)) {\n                        doRedBlackDeleteFixup(deletedNode, dataElement);\n                    }\n\n                    if (deletedNode.getParent(dataElement) != null) {\n                        if (deletedNode == deletedNode.getParent(dataElement).getLeft(dataElement)) {\n                            deletedNode.getParent(dataElement).setLeft(null, dataElement);\n                        } else {\n                            deletedNode.getParent(dataElement).setRight(null, dataElement);\n                        }\n\n                        deletedNode.setParent(null, dataElement);\n                    }\n                }\n            }\n        }\n        shrink();\n    }\n\n    /**\n     * complicated red-black delete stuff. Based on Sun's TreeMap\n     * implementation, though it's barely recognizable any more. This\n     * rebalances the tree (somewhat, as red-black trees are not\n     * perfectly balanced -- perfect balancing takes longer)\n     *\n     * @param replacementNode the node being replaced\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }\n\n    /**\n     * swap two nodes (except for their content), taking care of\n     * special cases where one is the other's parent ... hey, it\n     * happens.\n     *\n     * @param x one node\n     * @param y another node\n     * @param dataElement  the KEY or VALUE int\n     */\n    private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement) {\n        // Save initial values.\n        final Node<K, V> xFormerParent = x.getParent(dataElement);\n        final Node<K, V> xFormerLeftChild = x.getLeft(dataElement);\n        final Node<K, V> xFormerRightChild = x.getRight(dataElement);\n        final Node<K, V> yFormerParent = y.getParent(dataElement);\n        final Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n        final Node<K, V> yFormerRightChild = y.getRight(dataElement);\n        final boolean xWasLeftChild =\n                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n        final boolean yWasLeftChild =\n                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n\n        // Swap, handling special cases of one being the other's parent.\n        if (x == yFormerParent) { // x was y's parent\n            x.setParent(y, dataElement);\n\n            if (yWasLeftChild) {\n                y.setLeft(x, dataElement);\n                y.setRight(xFormerRightChild, dataElement);\n            } else {\n                y.setRight(x, dataElement);\n                y.setLeft(xFormerLeftChild, dataElement);\n            }\n        } else {\n            x.setParent(yFormerParent, dataElement);\n\n            if (yFormerParent != null) {\n                if (yWasLeftChild) {\n                    yFormerParent.setLeft(x, dataElement);\n                } else {\n                    yFormerParent.setRight(x, dataElement);\n                }\n            }\n\n            y.setLeft(xFormerLeftChild, dataElement);\n            y.setRight(xFormerRightChild, dataElement);\n        }\n\n        if (y == xFormerParent) { // y was x's parent\n            y.setParent(x, dataElement);\n\n            if (xWasLeftChild) {\n                x.setLeft(y, dataElement);\n                x.setRight(yFormerRightChild, dataElement);\n            } else {\n                x.setRight(y, dataElement);\n                x.setLeft(yFormerLeftChild, dataElement);\n            }\n        } else {\n            y.setParent(xFormerParent, dataElement);\n\n            if (xFormerParent != null) {\n                if (xWasLeftChild) {\n                    xFormerParent.setLeft(y, dataElement);\n                } else {\n                    xFormerParent.setRight(y, dataElement);\n                }\n            }\n\n            x.setLeft(yFormerLeftChild, dataElement);\n            x.setRight(yFormerRightChild, dataElement);\n        }\n\n        // Fix children's parent pointers\n        if (x.getLeft(dataElement) != null) {\n            x.getLeft(dataElement).setParent(x, dataElement);\n        }\n\n        if (x.getRight(dataElement) != null) {\n            x.getRight(dataElement).setParent(x, dataElement);\n        }\n\n        if (y.getLeft(dataElement) != null) {\n            y.getLeft(dataElement).setParent(y, dataElement);\n        }\n\n        if (y.getRight(dataElement) != null) {\n            y.getRight(dataElement).setParent(y, dataElement);\n        }\n\n        x.swapColors(y, dataElement);\n\n        // Check if root changed\n        if (rootNode[dataElement.ordinal()] == x) {\n            rootNode[dataElement.ordinal()] = y;\n        } else if (rootNode[dataElement.ordinal()] == y) {\n            rootNode[dataElement.ordinal()] = x;\n        }\n    }\n\n    /**\n     * check if an object is fit to be proper input ... has to be\n     * Comparable and non-null\n     *\n     * @param o the object being checked\n     * @param index  the KEY or VALUE int (used to put the right word in the\n     *              exception message)\n     *\n     * @throws NullPointerException if o is null\n     * @throws ClassCastException if o is not Comparable\n     */\n    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n        if (o == null) {\n            throw new NullPointerException(dataElement + \" cannot be null\");\n        }\n        if (!(o instanceof Comparable)) {\n            throw new ClassCastException(dataElement + \" must be Comparable\");\n        }\n    }\n\n    /**\n     * check a key for validity (non-null and implements Comparable)\n     *\n     * @param key the key to be checked\n     *\n     * @throws NullPointerException if key is null\n     * @throws ClassCastException if key is not Comparable\n     */\n    private static void checkKey(final Object key) {\n        checkNonNullComparable(key, KEY);\n    }\n\n    /**\n     * check a value for validity (non-null and implements Comparable)\n     *\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if value is null\n     * @throws ClassCastException if value is not Comparable\n     */\n    private static void checkValue(final Object value) {\n        checkNonNullComparable(value, VALUE);\n    }\n\n    /**\n     * check a key and a value for validity (non-null and implements\n     * Comparable)\n     *\n     * @param key the key to be checked\n     * @param value the value to be checked\n     *\n     * @throws NullPointerException if key or value is null\n     * @throws ClassCastException if key or value is not Comparable\n     */\n    private static void checkKeyAndValue(final Object key, final Object value) {\n        checkKey(key);\n        checkValue(value);\n    }\n\n    /**\n     * increment the modification count -- used to check for\n     * concurrent modification of the map through the map and through\n     * an Iterator from one of its Set or Collection views\n     */\n    private void modify() {\n        modifications++;\n    }\n\n    /**\n     * bump up the size and note that the map has changed\n     */\n    private void grow() {\n        modify();\n        nodeCount++;\n    }\n\n    /**\n     * decrement the size and note that the map has changed\n     */\n    private void shrink() {\n        modify();\n        nodeCount--;\n    }\n\n    /**\n     * insert a node by its value\n     *\n     * @param newNode the node to be inserted\n     *\n     * @throws IllegalArgumentException if the node already exists\n     *                                     in the value mapping\n     */\n    private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException {\n        Node<K, V> node = rootNode[VALUE.ordinal()];\n\n        while (true) {\n            final int cmp = compare(newNode.getValue(), node.getValue());\n\n            if (cmp == 0) {\n                throw new IllegalArgumentException(\n                    \"Cannot store a duplicate value (\\\"\" + newNode.getData(VALUE) + \"\\\") in this Map\");\n            } else if (cmp < 0) {\n                if (node.getLeft(VALUE) != null) {\n                    node = node.getLeft(VALUE);\n                } else {\n                    node.setLeft(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            } else { // cmp > 0\n                if (node.getRight(VALUE) != null) {\n                    node = node.getRight(VALUE);\n                } else {\n                    node.setRight(newNode, VALUE);\n                    newNode.setParent(node, VALUE);\n                    doRedBlackInsert(newNode, VALUE);\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares for equals as per the API.\n     *\n     * @param obj  the object to compare to\n     * @param type  the KEY or VALUE int\n     * @return true if equal\n     */\n    private boolean doEquals(final Object obj, final DataElement dataElement) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof Map == false) {\n            return false;\n        }\n        final Map<?, ?> other = (Map<?, ?>) obj;\n        if (other.size() != size()) {\n            return false;\n        }\n\n        if (nodeCount > 0) {\n            try {\n                for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                    final Object key = it.next();\n                    final Object value = it.getValue();\n                    if (value.equals(other.get(key)) == false) {\n                        return false;\n                    }\n                }\n            } catch (final ClassCastException ex) {\n                return false;\n            } catch (final NullPointerException ex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Gets the hash code value for this map as per the API.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the hash code value for this map\n     */\n    private int doHashCode(final DataElement dataElement) {\n        int total = 0;\n        if (nodeCount > 0) {\n            for (final MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                final Object key = it.next();\n                final Object value = it.getValue();\n                total += key.hashCode() ^ value.hashCode();\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Gets the string form of this map as per AbstractMap.\n     *\n     * @param type  the KEY or VALUE int\n     * @return the string form of this map\n     */\n    private String doToString(final DataElement dataElement) {\n        if (nodeCount == 0) {\n            return \"{}\";\n        }\n        final StringBuilder buf = new StringBuilder(nodeCount * 32);\n        buf.append('{');\n        final MapIterator<?, ?> it = getMapIterator(dataElement);\n        boolean hasNext = it.hasNext();\n        while (hasNext) {\n            final Object key = it.next();\n            final Object value = it.getValue();\n            buf.append(key == this ? \"(this Map)\" : key)\n               .append('=')\n               .append(value == this ? \"(this Map)\" : value);\n\n            hasNext = it.hasNext();\n            if (hasNext) {\n                buf.append(\", \");\n            }\n        }\n\n        buf.append('}');\n        return buf.toString();\n    }\n\n    private MapIterator<?, ?> getMapIterator(final DataElement dataElement) {\n        switch (dataElement) {\n        case KEY:\n            return new ViewMapIterator(KEY);\n        case VALUE:\n            return new InverseViewMapIterator(VALUE);\n        default:\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     * Reads the content of the stream.\n     */\n    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n        stream.defaultReadObject();\n        rootNode = new Node[2];\n        int size = stream.readInt();\n        for(int i = 0; i < size; i++){\n            K k =(K) stream.readObject();\n            V v =(V) stream.readObject();\n            put(k, v);\n        }\n    }\n\n    /**\n     * Writes the content to the stream for serialization.\n     */\n    private void writeObject(final ObjectOutputStream stream) throws IOException{\n        stream.defaultWriteObject();\n        stream.writeInt(this.size());\n        for (final Entry<K, V> entry : entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A view of this map.\n     */\n    abstract class View<E> extends AbstractSet<E> {\n\n        /** Whether to return KEY or VALUE order. */\n        final DataElement orderType;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        View(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n        }\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n    }\n\n    class KeyView extends View<K> {\n\n        /**\n         * Create a new TreeBidiMap.KeyView.\n         */\n        public KeyView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<K> iterator() {\n            return new ViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, KEY);\n            return lookupKey(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveKey(o) != null;\n        }\n\n    }\n\n    class ValueView extends View<V> {\n\n        /**\n         * Create a new TreeBidiMap.ValueView.\n         */\n        public ValueView(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public Iterator<V> iterator() {\n            return new InverseViewMapIterator(orderType);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            checkNonNullComparable(obj, VALUE);\n            return lookupValue(obj) != null;\n        }\n\n        @Override\n        public boolean remove(final Object o) {\n            return doRemoveValue(o) != null;\n        }\n\n    }\n\n    /**\n     * A view of this map.\n     */\n    class EntryView extends View<Map.Entry<K, V>> {\n\n        EntryView() {\n            super(KEY);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            return node != null && node.getValue().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupKey(entry.getKey());\n            if (node != null && node.getValue().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new ViewMapEntryIterator();\n        }\n    }\n\n    /**\n     * A view of this map.\n     */\n    class InverseEntryView extends View<Map.Entry<V, K>> {\n\n        InverseEntryView() {\n            super(VALUE);\n        }\n\n        @Override\n        public boolean contains(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            return node != null && node.getKey().equals(value);\n        }\n\n        @Override\n        public boolean remove(final Object obj) {\n            if (obj instanceof Map.Entry == false) {\n                return false;\n            }\n            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;\n            final Object value = entry.getValue();\n            final Node<K, V> node = lookupValue(entry.getKey());\n            if (node != null && node.getKey().equals(value)) {\n                doRedBlackDelete(node);\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Iterator<Map.Entry<V, K>> iterator() {\n            return new InverseViewMapEntryIterator();\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    abstract class ViewIterator {\n\n        /** Whether to return KEY or VALUE order. */\n        private final DataElement orderType;\n        /** The last node returned by the iterator. */\n        Node<K, V> lastReturnedNode;\n        /** The next node to be returned by the iterator. */\n        private Node<K, V> nextNode;\n        /** The previous node in the sequence returned by the iterator. */\n        private Node<K, V> previousNode;\n        /** The modification count. */\n        private int expectedModifications;\n\n        /**\n         * Constructor.\n         * @param orderType  the KEY or VALUE int for the order\n         * @param main  the main map\n         */\n        ViewIterator(final DataElement orderType) {\n            super();\n            this.orderType = orderType;\n            expectedModifications = modifications;\n            nextNode = leastNode(rootNode[orderType.ordinal()], orderType);\n            lastReturnedNode = null;\n            previousNode = null;\n        }\n\n        public final boolean hasNext() {\n            return nextNode != null;\n        }\n\n        protected Node<K, V> navigateNext() {\n            if (nextNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            lastReturnedNode = nextNode;\n            previousNode = nextNode;\n            nextNode = nextGreater(nextNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public boolean hasPrevious() {\n            return previousNode != null;\n        }\n\n        protected Node<K, V> navigatePrevious() {\n            if (previousNode == null) {\n                throw new NoSuchElementException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            nextNode = lastReturnedNode;\n            if (nextNode == null) {\n                nextNode = nextGreater(previousNode, orderType);\n            }\n            lastReturnedNode = previousNode;\n            previousNode = nextSmaller(previousNode, orderType);\n            return lastReturnedNode;\n        }\n\n        public final void remove() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException();\n            }\n            if (modifications != expectedModifications) {\n                throw new ConcurrentModificationException();\n            }\n            doRedBlackDelete(lastReturnedNode);\n            expectedModifications++;\n            lastReturnedNode = null;\n            if (nextNode == null) {\n                previousNode = greatestNode(rootNode[orderType.ordinal()], orderType);\n            } else {\n                previousNode = nextSmaller(nextNode, orderType);\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * An iterator over the map.\n     */\n    class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public K getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public V setValue(final V obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K next() {\n            return navigateNext().getKey();\n        }\n\n        @Override\n        public K previous() {\n            return navigatePrevious().getKey();\n        }\n    }\n\n    /**\n     * An iterator over the map.\n     */\n    class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K> {\n\n        /**\n         * Create a new TreeBidiMap.InverseViewMapIterator.\n         */\n        public InverseViewMapIterator(final DataElement orderType) {\n            super(orderType);\n        }\n\n        @Override\n        public V getKey() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getKey() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getValue();\n        }\n\n        @Override\n        public K getValue() {\n            if (lastReturnedNode == null) {\n                throw new IllegalStateException(\n                        \"Iterator getValue() can only be called after next() and before remove()\");\n            }\n            return lastReturnedNode.getKey();\n        }\n\n        @Override\n        public K setValue(final K obj) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V next() {\n            return navigateNext().getValue();\n        }\n\n        @Override\n        public V previous() {\n            return navigatePrevious().getValue();\n        }\n    }\n\n    /**\n     * An iterator over the map entries.\n     */\n    class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>> {\n\n        /**\n         * Constructor.\n         */\n        ViewMapEntryIterator() {\n            super(KEY);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            return navigateNext();\n        }\n\n        @Override\n        public Map.Entry<K, V> previous() {\n            return navigatePrevious();\n        }\n    }\n\n    /**\n     * An iterator over the inverse map entries.\n     */\n    class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>> {\n\n        /**\n         * Constructor.\n         */\n        InverseViewMapEntryIterator() {\n            super(VALUE);\n        }\n\n        @Override\n        public Map.Entry<V, K> next() {\n            return createEntry(navigateNext());\n        }\n\n        @Override\n        public Map.Entry<V, K> previous() {\n            return createEntry(navigatePrevious());\n        }\n\n        private Map.Entry<V, K> createEntry(final Node<K, V> node) {\n            return new UnmodifiableMapEntry<V, K>(node.getValue(), node.getKey());\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    /**\n     * A node used to store the data.\n     */\n    static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V> {\n\n        private final K key;\n        private final V value;\n        private final Node<K, V>[] leftNode;\n        private final Node<K, V>[] rightNode;\n        private final Node<K, V>[] parentNode;\n        private final boolean[] blackColor;\n        private int hashcodeValue;\n        private boolean calculatedHashCode;\n\n        /**\n         * Make a new cell with given key and value, and with null\n         * links, and black (true) colors.\n         *\n         * @param key\n         * @param value\n         */\n        @SuppressWarnings(\"unchecked\")\n        Node(final K key, final V value) {\n            super();\n            this.key = key;\n            this.value = value;\n            leftNode = new Node[2];\n            rightNode = new Node[2];\n            parentNode = new Node[2];\n            blackColor = new boolean[] { true, true };\n            calculatedHashCode = false;\n        }\n\n        private Object getData(final DataElement dataElement) {\n            switch (dataElement) {\n            case KEY:\n                return getKey();\n            case VALUE:\n                return getValue();\n            default:\n                throw new IllegalArgumentException();\n            }\n        }\n\n        private void setLeft(final Node<K, V> node, final DataElement dataElement) {\n            leftNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getLeft(final DataElement dataElement) {\n            return leftNode[dataElement.ordinal()];\n        }\n\n        private void setRight(final Node<K, V> node, final DataElement dataElement) {\n            rightNode[dataElement.ordinal()] = node;\n        }\n\n        private Node<K, V> getRight(final DataElement dataElement) {\n            return rightNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Set this node's parent node.\n         *\n         * @param node  the new parent node\n         * @param index  the KEY or VALUE int\n         */\n        private void setParent(final Node<K, V> node, final DataElement dataElement) {\n            parentNode[dataElement.ordinal()] = node;\n        }\n\n        /**\n         * Get the parent node.\n         *\n         * @param index  the KEY or VALUE int\n         * @return the parent node, may be null\n         */\n        private Node<K, V> getParent(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()];\n        }\n\n        /**\n         * Exchange colors with another node.\n         *\n         * @param node  the node to swap with\n         * @param index  the KEY or VALUE int\n         */\n        private void swapColors(final Node<K, V> node, final DataElement dataElement) {\n            // Swap colors -- old hacker's trick\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n            node.blackColor[dataElement.ordinal()] ^= blackColor[dataElement.ordinal()];\n            blackColor[dataElement.ordinal()]      ^= node.blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node black?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if black (which is represented as a true boolean)\n         */\n        private boolean isBlack(final DataElement dataElement) {\n            return blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Is this node red?\n         *\n         * @param index  the KEY or VALUE int\n         * @return true if non-black\n         */\n        private boolean isRed(final DataElement dataElement) {\n            return !blackColor[dataElement.ordinal()];\n        }\n\n        /**\n         * Make this node black.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setBlack(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = true;\n        }\n\n        /**\n         * Make this node red.\n         *\n         * @param index  the KEY or VALUE int\n         */\n        private void setRed(final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = false;\n        }\n\n        /**\n         * Make this node the same color as another\n         *\n         * @param node  the node whose color we're adopting\n         * @param index  the KEY or VALUE int\n         */\n        private void copyColor(final Node<K, V> node, final DataElement dataElement) {\n            blackColor[dataElement.ordinal()] = node.blackColor[dataElement.ordinal()];\n        }\n\n        private boolean isLeftChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].leftNode[dataElement.ordinal()] == this;\n        }\n\n        private boolean isRightChild(final DataElement dataElement) {\n            return parentNode[dataElement.ordinal()] != null\n                    && parentNode[dataElement.ordinal()].rightNode[dataElement.ordinal()] == this;\n        }\n\n        //-------------------------------------------------------------------\n        /**\n         * Gets the key.\n         *\n         * @return the key corresponding to this entry.\n         */\n        @Override\n        public K getKey() {\n            return key;\n        }\n\n        /**\n         * Gets the value.\n         *\n         * @return the value corresponding to this entry.\n         */\n        @Override\n        public V getValue() {\n            return value;\n        }\n\n        /**\n         * Optional operation that is not permitted in this implementation\n         *\n         * @param ignored\n         * @return does not return\n         * @throws UnsupportedOperationException always\n         */\n        @Override\n        public V setValue(final V ignored) throws UnsupportedOperationException {\n            throw new UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n        }\n\n        /**\n         * Compares the specified object with this entry for equality.\n         * Returns true if the given object is also a map entry and\n         * the two entries represent the same mapping.\n         *\n         * @param obj  the object to be compared for equality with this entry.\n         * @return true if the specified object is equal to this entry.\n         */\n        @Override\n        public boolean equals(final Object obj) {\n            if (obj == this) {\n                return true;\n            }\n            if (!(obj instanceof Map.Entry)) {\n                return false;\n            }\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) obj;\n            return getKey().equals(e.getKey()) && getValue().equals(e.getValue());\n        }\n\n        /**\n         * @return the hash code value for this map entry.\n         */\n        @Override\n        public int hashCode() {\n            if (!calculatedHashCode) {\n                hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n                calculatedHashCode = true;\n            }\n            return hashcodeValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The inverse map implementation.\n     */\n    class Inverse implements OrderedBidiMap<V, K> {\n\n        /** Store the keySet once created. */\n        private Set<V> inverseKeySet;\n        /** Store the valuesSet once created. */\n        private Set<K> inverseValuesSet;\n        /** Store the entrySet once created. */\n        private Set<Map.Entry<V, K>> inverseEntrySet;\n\n        @Override\n        public int size() {\n            return TreeBidiMap.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return TreeBidiMap.this.isEmpty();\n        }\n\n        @Override\n        public K get(final Object key) {\n            return TreeBidiMap.this.getKey(key);\n        }\n\n        @Override\n        public V getKey(final Object value) {\n            return TreeBidiMap.this.get(value);\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return TreeBidiMap.this.containsValue(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return TreeBidiMap.this.containsKey(value);\n        }\n\n        @Override\n        public V firstKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return leastNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V lastKey() {\n            if (TreeBidiMap.this.nodeCount == 0) {\n                throw new NoSuchElementException(\"Map is empty\");\n            }\n            return greatestNode(TreeBidiMap.this.rootNode[VALUE.ordinal()], VALUE).getValue();\n        }\n\n        @Override\n        public V nextKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = nextGreater(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public V previousKey(final V key) {\n            checkKey(key);\n            final Node<K, V> node = TreeBidiMap.this.nextSmaller(TreeBidiMap.this.<V>lookup(key, VALUE), VALUE);\n            return node == null ? null : node.getValue();\n        }\n\n        @Override\n        public K put(final V key, final K value) {\n            final K result = get(key);\n            TreeBidiMap.this.doPut(value, key);\n            return result;\n        }\n\n        @Override\n        public void putAll(final Map<? extends V, ? extends K> map) {\n            for (final Map.Entry<? extends V, ? extends K> e : map.entrySet()) {\n                put(e.getKey(), e.getValue());\n            }\n        }\n\n        @Override\n        public K remove(final Object key) {\n            return TreeBidiMap.this.removeValue(key);\n        }\n\n        @Override\n        public V removeValue(final Object value) {\n            return TreeBidiMap.this.remove(value);\n        }\n\n        @Override\n        public void clear() {\n            TreeBidiMap.this.clear();\n        }\n\n        @Override\n        public Set<V> keySet() {\n            if (inverseKeySet == null) {\n                inverseKeySet = new ValueView(VALUE);\n            }\n            return inverseKeySet;\n        }\n\n        @Override\n        public Set<K> values() {\n            if (inverseValuesSet == null) {\n                inverseValuesSet = new KeyView(VALUE);\n            }\n            return inverseValuesSet;\n        }\n\n        @Override\n        public Set<Map.Entry<V, K>> entrySet() {\n            if (inverseEntrySet == null) {\n                inverseEntrySet = new InverseEntryView();\n            }\n            return inverseEntrySet;\n        }\n\n        @Override\n        public OrderedMapIterator<V, K> mapIterator() {\n            if (isEmpty()) {\n                return EmptyOrderedMapIterator.<V, K>emptyOrderedMapIterator();\n            }\n            return new InverseViewMapIterator(VALUE);\n        }\n\n        @Override\n        public OrderedBidiMap<K, V> inverseBidiMap() {\n            return TreeBidiMap.this;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n        }\n\n        @Override\n        public int hashCode() {\n            return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n        }\n\n        @Override\n        public String toString() {\n            return TreeBidiMap.this.doToString(DataElement.VALUE);\n        }\n    }\n\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "BidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "Equator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiSet",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorUtils",
                "org.apache.commons.collections4"
            ],
            [
                "FunctorException",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractDualBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractOrderedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualLinkedHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "UnmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "AbstractSortedBidiMapDecorator",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualHashBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "DualTreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "TreeBidiMap",
                "org.apache.commons.collections4.bidimap"
            ],
            [
                "MultiMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedCollection",
                "org.apache.commons.collections4"
            ],
            [
                "UnmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "CompositeCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "TransformedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "PredicatedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "IndexedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "SynchronizedCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "UnmodifiableCollection",
                "org.apache.commons.collections4.collection"
            ],
            [
                "AbstractCollectionDecorator",
                "org.apache.commons.collections4.collection"
            ],
            [
                "OrderedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "FactoryUtils",
                "org.apache.commons.collections4"
            ],
            [
                "IterableGet",
                "org.apache.commons.collections4"
            ],
            [
                "ListUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Closure",
                "org.apache.commons.collections4"
            ],
            [
                "IterableSortedMap",
                "org.apache.commons.collections4"
            ],
            [
                "MapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Transformer",
                "org.apache.commons.collections4"
            ],
            [
                "DefaultEquator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "StringValueTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateDecorator",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IdentityPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ClosureTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FunctorUtils",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PredicateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "WhileClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ForClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsTruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformedPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NonePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TransformerClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OrPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NOPTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "MapTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AndPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "PrototypeFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AbstractQuantifierPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstanceofPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InvokerTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CloneTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ConstantFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ChainedTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ComparatorPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "CatchAndRethrowClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AllPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsFalsePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NullIsExceptionPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "AnyPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "TruePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "FactoryTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "NotNullPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "SwitchClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "UniquePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateTransformer",
                "org.apache.commons.collections4.functors"
            ],
            [
                "OnePredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "EqualPredicate",
                "org.apache.commons.collections4.functors"
            ],
            [
                "InstantiateFactory",
                "org.apache.commons.collections4.functors"
            ],
            [
                "IfClosure",
                "org.apache.commons.collections4.functors"
            ],
            [
                "ResettableListIterator",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedIterator",
                "org.apache.commons.collections4"
            ],
            [
                "ComparatorChain",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "BooleanComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ReverseComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "ComparableComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "TransformingComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "FixedOrderComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "NullComparator",
                "org.apache.commons.collections4.comparators"
            ],
            [
                "CollectionUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ListValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractIterableGetMapDecorator",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "TransformedSplitMap",
                "org.apache.commons.collections4.splitmap"
            ],
            [
                "Factory",
                "org.apache.commons.collections4"
            ],
            [
                "IterableUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Bag",
                "org.apache.commons.collections4"
            ],
            [
                "Predicate",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBag",
                "org.apache.commons.collections4"
            ],
            [
                "TrieUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ClosureUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "UnmodifiableTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "KeyAnalyzer",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractPatriciaTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "AbstractBitwiseTrie",
                "org.apache.commons.collections4.trie"
            ],
            [
                "StringKeyAnalyzer",
                "org.apache.commons.collections4.trie.analyzer"
            ],
            [
                "TransformedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractLinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "Flat3Map",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PredicatedSortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "DefaultedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceIdentityMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractSortedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractInputCheckedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "FixedSizeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazySortedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CaseInsensitiveMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractHashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractOrderedMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "EntrySetToMapIteratorAdapter",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractIterableMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ListOrderedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LinkedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "SingletonMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableEntrySet",
                "org.apache.commons.collections4.map"
            ],
            [
                "StaticBucketMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractMapDecorator",
                "org.apache.commons.collections4.map"
            ],
            [
                "AbstractReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiKeyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "HashedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LazyMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "PassiveExpiringMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "MultiValueMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "LRUMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "ReferenceMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "TransformedMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "CompositeMap",
                "org.apache.commons.collections4.map"
            ],
            [
                "UnmodifiableMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiKey",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "DefaultKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntryDecorator",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractKeyValue",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "TiedMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "AbstractMapEntry",
                "org.apache.commons.collections4.keyvalue"
            ],
            [
                "MultiSetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "MapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "UnmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "HashSetValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "TransformedMultiValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractSetValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractListValuedMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "ArrayListValuedHashMap",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "AbstractMultiValuedMapDecorator",
                "org.apache.commons.collections4.multimap"
            ],
            [
                "LazyList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractSerializableListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "TreeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "SetUniqueList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractListDecorator",
                "org.apache.commons.collections4.list"
            ],
            [
                "NodeCachingLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "UnmodifiableList",
                "org.apache.commons.collections4.list"
            ],
            [
                "FixedSizeList",
                "org.apache.commons.collections4.list"
            ],
            [
                "TransformedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "GrowthList",
                "org.apache.commons.collections4.list"
            ],
            [
                "AbstractLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "CursorableLinkedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "PredicatedList",
                "org.apache.commons.collections4.list"
            ],
            [
                "OrderedMap",
                "org.apache.commons.collections4"
            ],
            [
                "AbstractQueueDecorator",
                "org.apache.commons.collections4.queue"
            ],
            [
                "TransformedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "UnmodifiableQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "CircularFifoQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "PredicatedQueue",
                "org.apache.commons.collections4.queue"
            ],
            [
                "FluentIterable",
                "org.apache.commons.collections4"
            ],
            [
                "TransformerUtils",
                "org.apache.commons.collections4"
            ],
            [
                "PredicateUtils",
                "org.apache.commons.collections4"
            ],
            [
                "ResettableIterator",
                "org.apache.commons.collections4"
            ],
            [
                "MultiValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SetUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SortedBidiMap",
                "org.apache.commons.collections4"
            ],
            [
                "ArrayStack",
                "org.apache.commons.collections4"
            ],
            [
                "Put",
                "org.apache.commons.collections4"
            ],
            [
                "OrderedMapIterator",
                "org.apache.commons.collections4"
            ],
            [
                "TransformedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "CompositeSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "ListOrderedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSerializableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "MapBackedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractSortedSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "PredicatedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "AbstractNavigableSetDecorator",
                "org.apache.commons.collections4.set"
            ],
            [
                "UnmodifiableNavigableSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "TransformedSortedSet",
                "org.apache.commons.collections4.set"
            ],
            [
                "IterableMap",
                "org.apache.commons.collections4"
            ],
            [
                "EnumerationUtils",
                "org.apache.commons.collections4"
            ],
            [
                "DeleteCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsHandler",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "InsertCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "SequencesComparator",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "ReplacementsFinder",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "KeepCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditCommand",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "CommandVisitor",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "EditScript",
                "org.apache.commons.collections4.sequence"
            ],
            [
                "QueueUtils",
                "org.apache.commons.collections4"
            ],
            [
                "SetValuedMap",
                "org.apache.commons.collections4"
            ],
            [
                "SynchronizedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractMapBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "UnmodifiableSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TreeBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "PredicatedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "SynchronizedSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "CollectionSortedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "TransformedBag",
                "org.apache.commons.collections4.bag"
            ],
            [
                "AbstractSortedBagDecorator",
                "org.apache.commons.collections4.bag"
            ],
            [
                "HashMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "PredicatedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMultiSetDecorator",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "AbstractMapMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "UnmodifiableMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "SynchronizedMultiSet",
                "org.apache.commons.collections4.multiset"
            ],
            [
                "BagUtils",
                "org.apache.commons.collections4"
            ],
            [
                "Unmodifiable",
                "org.apache.commons.collections4"
            ],
            [
                "Get",
                "org.apache.commons.collections4"
            ],
            [
                "Trie",
                "org.apache.commons.collections4"
            ],
            [
                "MultiMap",
                "org.apache.commons.collections4"
            ],
            [
                "KeyValue",
                "org.apache.commons.collections4"
            ],
            [
                "IteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractListIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ZippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "CollatingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UniqueFilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ReverseListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "BoundedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "TransformIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "NodeListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LazyIteratorChain",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PeekingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectGraphIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PermutationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EnumerationIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorIterable",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractEmptyMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "LoopingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "IteratorEnumeration",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SingletonIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ListIteratorWrapper",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SkippingIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "ObjectArrayListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "UnmodifiableMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EmptyIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "EntrySetMapIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "PushbackIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractUntypedIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "AbstractOrderedMapIteratorDecorator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "FilterListIterator",
                "org.apache.commons.collections4.iterators"
            ],
            [
                "SplitMapUtils",
                "org.apache.commons.collections4"
            ],
            [
                "BoundedMap",
                "org.apache.commons.collections4"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "emptyIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> emptyIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> emptyListIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "singletonIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> singletonIterator(final E object)"
            ],
            [
                "singletonListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> singletonListIterator(final E object)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E... array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)"
            ],
            [
                "arrayListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)"
            ],
            [
                "boundedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)"
            ],
            [
                "unmodifiableListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "chainedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)"
            ],
            [
                "collatedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)"
            ],
            [
                "objectGraphIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)"
            ],
            [
                "filteredIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "filteredListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)"
            ],
            [
                "loopingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)"
            ],
            [
                "loopingListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final NodeList nodeList)"
            ],
            [
                "nodeListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static NodeListIterator nodeListIterator(final Node node)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "skippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)"
            ],
            [
                "zippingIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)"
            ],
            [
                "asIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)"
            ],
            [
                "asEnumeration",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)"
            ],
            [
                "asIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "asMultipleUseIterable",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)"
            ],
            [
                "toListIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Object[] toArray(final Iterator<?> iterator)"
            ],
            [
                "toArray",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)"
            ],
            [
                "getIterator",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static Iterator<?> getIterator(final Object obj)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static boolean isEmpty(final Iterator<?> iterator)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> boolean contains(final Iterator<E> iterator, final Object object)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> E get(final Iterator<E> iterator, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static int size(final Iterator<?> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "naturalComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)"
            ],
            [
                "chainedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)"
            ],
            [
                "reversedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)"
            ],
            [
                "nullLowComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)"
            ],
            [
                "nullHighComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)"
            ],
            [
                "transformedComparator",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "min",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "max",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)"
            ],
            [
                "unmodifiableBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableBidiMap",
                "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableOrderedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableOrderedBidiMap",
                "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableSortedBidiMap",
                "org.apache.commons.collections4.bidimap",
                "UnmodifiableSortedBidiMap",
                "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)"
            ],
            [
                "emptyMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static boolean isEmpty(final MultiValuedMap<?, ?> map)"
            ],
            [
                "getCollection",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsList",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsSet",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "getValuesAsBag",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)"
            ],
            [
                "newListValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()"
            ],
            [
                "newSetValuedHashMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformedMultiValuedMap",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)"
            ],
            [
                "unmodifiableBoundedCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableBoundedCollection",
                "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedCollection",
                "org.apache.commons.collections4.collection",
                "TransformedCollection",
                "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "builder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> builder(final Predicate<? super E> predicate)"
            ],
            [
                "notNullBuilder",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <E> Builder<E> notNullBuilder()"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4.collection",
                "PredicatedCollection",
                "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)"
            ],
            [
                "uniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "nonUniqueIndexedCollection",
                "org.apache.commons.collections4.collection",
                "IndexedCollection",
                "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4.collection",
                "SynchronizedCollection",
                "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4.collection",
                "UnmodifiableCollection",
                "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "nullFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> nullFactory()"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4",
                "FactoryUtils",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> emptyIfNull(final List<T> list)"
            ],
            [
                "defaultIfNull",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)"
            ],
            [
                "sum",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)"
            ],
            [
                "isEqualList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)"
            ],
            [
                "hashCodeForList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static int hashCodeForList(final Collection<?> list)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "synchronizedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> synchronizedList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> fixedSizeList(final List<E> list)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)"
            ],
            [
                "longestCommonSubsequence",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "ListUtils",
                "public static <T> List<List<T>> partition(final List<T> list, final int size)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<? super K, V> map, final K key)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getObject",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)"
            ],
            [
                "getString",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)"
            ],
            [
                "getBoolean",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)"
            ],
            [
                "getNumber",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)"
            ],
            [
                "getByte",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)"
            ],
            [
                "getShort",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)"
            ],
            [
                "getInteger",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)"
            ],
            [
                "getLong",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)"
            ],
            [
                "getFloat",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)"
            ],
            [
                "getDouble",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)"
            ],
            [
                "getMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)"
            ],
            [
                "getBooleanValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)"
            ],
            [
                "getByteValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)"
            ],
            [
                "getShortValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)"
            ],
            [
                "getIntValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)"
            ],
            [
                "getLongValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)"
            ],
            [
                "getFloatValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)"
            ],
            [
                "getDoubleValue",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)"
            ],
            [
                "toProperties",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Properties toProperties(final Map<K, V> map)"
            ],
            [
                "toMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)"
            ],
            [
                "invertMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)"
            ],
            [
                "putAll",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isEmpty(final Map<?, ?> map)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static boolean isNotEmpty(final Map<?, ?> map)"
            ],
            [
                "synchronizedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "orderedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)"
            ],
            [
                "synchronizedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)"
            ],
            [
                "iterableMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)"
            ],
            [
                "iterableSortedMap",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)"
            ],
            [
                "defaultEquator",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static <T> DefaultEquator<T> defaultEquator()"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4.functors",
                "StringValueTransformer",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4.functors",
                "IfTransformer",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4.functors",
                "IdentityPredicate",
                "public static <T> Predicate<T> identityPredicate(final T object)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "closureTransformer",
                "org.apache.commons.collections4.functors",
                "ClosureTransformer",
                "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)"
            ],
            [
                "validate",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <E> Closure<E>[] copy(final Closure<? super E>... closures)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <T> Closure<T> coerce(final Closure<? super T> closure)"
            ],
            [
                "copy",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)"
            ],
            [
                "coerce",
                "org.apache.commons.collections4.functors",
                "FunctorUtils",
                "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "transformerPredicate",
                "org.apache.commons.collections4.functors",
                "TransformerPredicate",
                "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "predicateTransformer",
                "org.apache.commons.collections4.functors",
                "PredicateTransformer",
                "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4.functors",
                "WhileClosure",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4.functors",
                "ForClosure",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsTruePredicate",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4.functors",
                "TransformedPredicate",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4.functors",
                "NonePredicate",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4.functors",
                "SwitchTransformer",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)"
            ],
            [
                "transformerClosure",
                "org.apache.commons.collections4.functors",
                "TransformerClosure",
                "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4.functors",
                "OrPredicate",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4.functors",
                "MapTransformer",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "exceptionFactory",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static <T> Factory<T> exceptionFactory()"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4.functors",
                "ChainedClosure",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4.functors",
                "AndPredicate",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "prototypeFactory",
                "org.apache.commons.collections4.functors",
                "PrototypeFactory",
                "public static <T> Factory<T> prototypeFactory(final T prototype)"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "instanceOfPredicate",
                "org.apache.commons.collections4.functors",
                "InstanceofPredicate",
                "public static Predicate<Object> instanceOfPredicate(final Class<?> type)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4.functors",
                "InvokerTransformer",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4.functors",
                "NotPredicate",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "constantFactory",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static <T> Factory<T> constantFactory(final T constantToReturn)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4.functors",
                "ChainedTransformer",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)"
            ],
            [
                "comparatorPredicate",
                "org.apache.commons.collections4.functors",
                "ComparatorPredicate",
                "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4.functors",
                "AllPredicate",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4.functors",
                "NullIsFalsePredicate",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4.functors",
                "NullIsExceptionPredicate",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4.functors",
                "AnyPredicate",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "factoryTransformer",
                "org.apache.commons.collections4.functors",
                "FactoryTransformer",
                "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4.functors",
                "SwitchClosure",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4.functors",
                "UniquePredicate",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4.functors",
                "InstantiateTransformer",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4.functors",
                "OnePredicate",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object)"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4.functors",
                "EqualPredicate",
                "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)"
            ],
            [
                "instantiateFactory",
                "org.apache.commons.collections4.functors",
                "InstantiateFactory",
                "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4.functors",
                "IfClosure",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "getTrueFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getTrueFirstComparator()"
            ],
            [
                "getFalseFirstComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator getFalseFirstComparator()"
            ],
            [
                "booleanComparator",
                "org.apache.commons.collections4.comparators",
                "BooleanComparator",
                "public static BooleanComparator booleanComparator(final boolean trueFirst)"
            ],
            [
                "comparableComparator",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()"
            ],
            [
                "emptyCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyCollection()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)"
            ],
            [
                "subtract",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)"
            ],
            [
                "containsAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "containsAny",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)"
            ],
            [
                "getCardinalityMap",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)"
            ],
            [
                "isSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isProperSubCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)"
            ],
            [
                "isEqualCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)"
            ],
            [
                "cardinality",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)"
            ],
            [
                "forAllButLastDo",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)"
            ],
            [
                "filter",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "filterInverse",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "exists",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "select",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)"
            ],
            [
                "selectRejected",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "collect",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)"
            ],
            [
                "addIgnoreNull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)"
            ],
            [
                "addAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterator<T> iterator, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static Object get(final Object object, final int index)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int size(final Object object)"
            ],
            [
                "sizeIsEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean sizeIsEmpty(final Object object)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isEmpty(final Collection<?> coll)"
            ],
            [
                "isNotEmpty",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isNotEmpty(final Collection<?> coll)"
            ],
            [
                "isFull",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static boolean isFull(final Collection<? extends Object> coll)"
            ],
            [
                "maxSize",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static int maxSize(final Collection<? extends Object> coll)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)"
            ],
            [
                "collate",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)"
            ],
            [
                "permutations",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<List<E>> permutations(final Collection<E> collection)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)"
            ],
            [
                "retainAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)"
            ],
            [
                "removeAll",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)"
            ],
            [
                "synchronizedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)"
            ],
            [
                "unmodifiableCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)"
            ],
            [
                "predicatedCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)"
            ],
            [
                "transformingCollection",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "extractSingleton",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static <E> E extractSingleton(final Collection<E> collection)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.splitmap",
                "TransformedSplitMap",
                "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)"
            ],
            [
                "emptyIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIterable()"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)"
            ],
            [
                "chainedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "collatedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "filteredIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "boundedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)"
            ],
            [
                "loopingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)"
            ],
            [
                "reversedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)"
            ],
            [
                "skippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)"
            ],
            [
                "transformedIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)"
            ],
            [
                "uniqueIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)"
            ],
            [
                "unmodifiableIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)"
            ],
            [
                "zippingIterable",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)"
            ],
            [
                "forEachButLast",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)"
            ],
            [
                "find",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "indexOf",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAll",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "matchesAny",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)"
            ],
            [
                "countMatches",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static boolean isEmpty(final Iterable<?> iterable)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<E> iterable, final Object object)"
            ],
            [
                "contains",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)"
            ],
            [
                "frequency",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <T> T get(final Iterable<T> iterable, final int index)"
            ],
            [
                "size",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static int size(final Iterable<?> iterable)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)"
            ],
            [
                "partition",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> List<E> toList(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)"
            ],
            [
                "toString",
                "org.apache.commons.collections4",
                "IterableUtils",
                "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4",
                "TrieUtils",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "exceptionClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> exceptionClosure()"
            ],
            [
                "nopClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> nopClosure()"
            ],
            [
                "asClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)"
            ],
            [
                "forClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)"
            ],
            [
                "whileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)"
            ],
            [
                "doWhileClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName)"
            ],
            [
                "invokerClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)"
            ],
            [
                "chainedClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)"
            ],
            [
                "ifClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)"
            ],
            [
                "switchClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)"
            ],
            [
                "switchMapClosure",
                "org.apache.commons.collections4",
                "ClosureUtils",
                "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)"
            ],
            [
                "unmodifiableTrie",
                "org.apache.commons.collections4.trie",
                "UnmodifiableTrie",
                "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)"
            ],
            [
                "isOutOfBoundsIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isOutOfBoundsIndex(final int bitIndex)"
            ],
            [
                "isEqualBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isEqualBitKey(final int bitIndex)"
            ],
            [
                "isNullBitKey",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isNullBitKey(final int bitIndex)"
            ],
            [
                "isValidBitIndex",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "static boolean isValidBitIndex(final int bitIndex)"
            ],
            [
                "isValidUplink",
                "org.apache.commons.collections4.trie",
                "AbstractPatriciaTrie",
                "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)"
            ],
            [
                "compare",
                "org.apache.commons.collections4.trie",
                "AbstractBitwiseTrie",
                "static boolean compare(final Object a, final Object b)"
            ],
            [
                "transformingSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedSortedMap",
                "org.apache.commons.collections4.map",
                "TransformedSortedMap",
                "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "predicatedMap",
                "org.apache.commons.collections4.map",
                "PredicatedMap",
                "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "fixedSizeSortedMap",
                "org.apache.commons.collections4.map",
                "FixedSizeSortedMap",
                "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)"
            ],
            [
                "unmodifiableSortedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableSortedMap",
                "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)"
            ],
            [
                "predicatedSortedMap",
                "org.apache.commons.collections4.map",
                "PredicatedSortedMap",
                "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "defaultedMap",
                "org.apache.commons.collections4.map",
                "DefaultedMap",
                "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)"
            ],
            [
                "fixedSizeMap",
                "org.apache.commons.collections4.map",
                "FixedSizeMap",
                "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazySortedMap",
                "org.apache.commons.collections4.map",
                "LazySortedMap",
                "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "unmodifiableOrderedMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableOrderedMap",
                "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)"
            ],
            [
                "unmodifiableMap",
                "org.apache.commons.collections4.map",
                "UnmodifiableMap",
                "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)"
            ],
            [
                "listOrderedMap",
                "org.apache.commons.collections4.map",
                "ListOrderedMap",
                "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)"
            ],
            [
                "unmodifiableEntrySet",
                "org.apache.commons.collections4.map",
                "UnmodifiableEntrySet",
                "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "AbstractReferenceMap",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "resolve",
                "org.apache.commons.collections4.map",
                "ReferenceStrength",
                "public static ReferenceStrength resolve(final int value)"
            ],
            [
                "multiKeyMap",
                "org.apache.commons.collections4.map",
                "MultiKeyMap",
                "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)"
            ],
            [
                "lazyMap",
                "org.apache.commons.collections4.map",
                "LazyMap",
                "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)"
            ],
            [
                "multiValueMap",
                "org.apache.commons.collections4.map",
                "MultiValueMap",
                "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.map",
                "TransformedMap",
                "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "emptyMultiSet",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static <E> MultiSet<E> emptyMultiSet()"
            ],
            [
                "unmodifiableMultiValuedMap",
                "org.apache.commons.collections4.multimap",
                "UnmodifiableMultiValuedMap",
                "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)"
            ],
            [
                "transformingMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "transformedMap",
                "org.apache.commons.collections4.multimap",
                "TransformedMultiValuedMap",
                "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)"
            ],
            [
                "lazyList",
                "org.apache.commons.collections4.list",
                "LazyList",
                "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)"
            ],
            [
                "setUniqueList",
                "org.apache.commons.collections4.list",
                "SetUniqueList",
                "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)"
            ],
            [
                "unmodifiableList",
                "org.apache.commons.collections4.list",
                "UnmodifiableList",
                "public static <E> List<E> unmodifiableList(final List<? extends E> list)"
            ],
            [
                "fixedSizeList",
                "org.apache.commons.collections4.list",
                "FixedSizeList",
                "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)"
            ],
            [
                "transformingList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedList",
                "org.apache.commons.collections4.list",
                "TransformedList",
                "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "growthList",
                "org.apache.commons.collections4.list",
                "GrowthList",
                "public static <E> GrowthList<E> growthList(final List<E> list)"
            ],
            [
                "predicatedList",
                "org.apache.commons.collections4.list",
                "PredicatedList",
                "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedQueue",
                "org.apache.commons.collections4.queue",
                "TransformedQueue",
                "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4.queue",
                "UnmodifiableQueue",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4.queue",
                "PredicatedQueue",
                "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)"
            ],
            [
                "empty",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> empty()"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T singleton)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final T... elements)"
            ],
            [
                "of",
                "org.apache.commons.collections4",
                "FluentIterable",
                "public static <T> FluentIterable<T> of(final Iterable<T> iterable)"
            ],
            [
                "exceptionTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> exceptionTransformer()"
            ],
            [
                "nullTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> nullTransformer()"
            ],
            [
                "nopTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> nopTransformer()"
            ],
            [
                "cloneTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> cloneTransformer()"
            ],
            [
                "constantTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)"
            ],
            [
                "asTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)"
            ],
            [
                "chainedTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)"
            ],
            [
                "ifTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)"
            ],
            [
                "switchTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)"
            ],
            [
                "switchMapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()"
            ],
            [
                "instantiateTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "mapTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)"
            ],
            [
                "invokerTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "stringValueTransformer",
                "org.apache.commons.collections4",
                "TransformerUtils",
                "public static <T> Transformer<T, String> stringValueTransformer()"
            ],
            [
                "exceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> exceptionPredicate()"
            ],
            [
                "truePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> truePredicate()"
            ],
            [
                "falsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> falsePredicate()"
            ],
            [
                "nullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullPredicate()"
            ],
            [
                "notNullPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notNullPredicate()"
            ],
            [
                "equalPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> equalPredicate(final T value)"
            ],
            [
                "identityPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> identityPredicate(final T value)"
            ],
            [
                "instanceofPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static Predicate<Object> instanceofPredicate(final Class<?> type)"
            ],
            [
                "uniquePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> uniquePredicate()"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName)"
            ],
            [
                "invokerPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)"
            ],
            [
                "andPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "allPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "orPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "anyPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "eitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "onePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "neitherPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)"
            ],
            [
                "nonePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)"
            ],
            [
                "notPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "asPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)"
            ],
            [
                "nullIsExceptionPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsFalsePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "nullIsTruePredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)"
            ],
            [
                "transformedPredicate",
                "org.apache.commons.collections4",
                "PredicateUtils",
                "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)"
            ],
            [
                "emptySet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> emptySet()"
            ],
            [
                "emptySortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> emptySortedSet()"
            ],
            [
                "emptyIfNull",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> Set<T> emptyIfNull(final Set<T> set)"
            ],
            [
                "isEqualSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)"
            ],
            [
                "hashCodeForSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <T> int hashCodeForSet(final Collection<T> set)"
            ],
            [
                "newIdentityHashSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> newIdentityHashSet()"
            ],
            [
                "synchronizedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> synchronizedSet(final Set<E> set)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "orderedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> Set<E> orderedSet(final Set<E> set)"
            ],
            [
                "synchronizedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "union",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "difference",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "intersection",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "disjunction",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)"
            ],
            [
                "transformingSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSet",
                "org.apache.commons.collections4.set",
                "TransformedSet",
                "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformingNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedNavigableSet",
                "org.apache.commons.collections4.set",
                "TransformedNavigableSet",
                "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedNavigableSet",
                "org.apache.commons.collections4.set",
                "PredicatedNavigableSet",
                "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)"
            ],
            [
                "listOrderedSet",
                "org.apache.commons.collections4.set",
                "ListOrderedSet",
                "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)"
            ],
            [
                "unmodifiableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSet",
                "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)"
            ],
            [
                "mapBackedSet",
                "org.apache.commons.collections4.set",
                "MapBackedSet",
                "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)"
            ],
            [
                "unmodifiableSortedSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableSortedSet",
                "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)"
            ],
            [
                "predicatedSortedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSortedSet",
                "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "predicatedSet",
                "org.apache.commons.collections4.set",
                "PredicatedSet",
                "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableNavigableSet",
                "org.apache.commons.collections4.set",
                "UnmodifiableNavigableSet",
                "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)"
            ],
            [
                "transformingSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedSet",
                "org.apache.commons.collections4.set",
                "TransformedSortedSet",
                "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "get",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <T> T get(final Enumeration<T> e, final int index)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)"
            ],
            [
                "toList",
                "org.apache.commons.collections4",
                "EnumerationUtils",
                "public static List<String> toList(final StringTokenizer stringTokenizer)"
            ],
            [
                "unmodifiableQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)"
            ],
            [
                "predicatedQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)"
            ],
            [
                "transformingQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyQueue",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static <E> Queue<E> emptyQueue()"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedBag",
                "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4.bag",
                "CollectionBag",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableBag",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedSortedBag",
                "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4.bag",
                "UnmodifiableSortedBag",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedSortedBag",
                "org.apache.commons.collections4.bag",
                "TransformedSortedBag",
                "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4.bag",
                "PredicatedBag",
                "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4.bag",
                "SynchronizedSortedBag",
                "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "collectionSortedBag",
                "org.apache.commons.collections4.bag",
                "CollectionSortedBag",
                "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "transformedBag",
                "org.apache.commons.collections4.bag",
                "TransformedBag",
                "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "predicatedMultiSet",
                "org.apache.commons.collections4.multiset",
                "PredicatedMultiSet",
                "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)"
            ],
            [
                "unmodifiableMultiSet",
                "org.apache.commons.collections4.multiset",
                "UnmodifiableMultiSet",
                "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)"
            ],
            [
                "synchronizedMultiSet",
                "org.apache.commons.collections4.multiset",
                "SynchronizedMultiSet",
                "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)"
            ],
            [
                "synchronizedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)"
            ],
            [
                "unmodifiableBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)"
            ],
            [
                "predicatedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "collectionBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> collectionBag(final Bag<E> bag)"
            ],
            [
                "synchronizedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)"
            ],
            [
                "unmodifiableSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)"
            ],
            [
                "predicatedSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)"
            ],
            [
                "transformingSortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)"
            ],
            [
                "emptyBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> Bag<E> emptyBag()"
            ],
            [
                "emptySortedBag",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static <E> SortedBag<E> emptySortedBag()"
            ],
            [
                "resettableEmptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ResettableListIterator<E> resettableEmptyListIterator()"
            ],
            [
                "emptyListIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static <E> ListIterator<E> emptyListIterator()"
            ],
            [
                "unmodifiableOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)"
            ],
            [
                "unmodifiableIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableIterator",
                "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "peekingIterator",
                "org.apache.commons.collections4.iterators",
                "PeekingIterator",
                "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "emptyMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static <K, V> MapIterator<K, V> emptyMapIterator()"
            ],
            [
                "emptyOrderedIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static <E> OrderedIterator<E> emptyOrderedIterator()"
            ],
            [
                "umodifiableListIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableListIterator",
                "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)"
            ],
            [
                "emptyOrderedMapIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()"
            ],
            [
                "unmodifiableMapIterator",
                "org.apache.commons.collections4.iterators",
                "UnmodifiableMapIterator",
                "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)"
            ],
            [
                "resettableEmptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> ResettableIterator<E> resettableEmptyIterator()"
            ],
            [
                "emptyIterator",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static <E> Iterator<E> emptyIterator()"
            ],
            [
                "pushbackIterator",
                "org.apache.commons.collections4.iterators",
                "PushbackIterator",
                "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)"
            ],
            [
                "readableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)"
            ],
            [
                "writableMap",
                "org.apache.commons.collections4",
                "SplitMapUtils",
                "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "EMPTY_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_LIST_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;"
            ],
            [
                "EMPTY_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;"
            ],
            [
                "EMPTY_ORDERED_MAP_ITERATOR",
                "org.apache.commons.collections4",
                "IteratorUtils",
                "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;"
            ],
            [
                "NATURAL_COMPARATOR",
                "org.apache.commons.collections4",
                "ComparatorUtils",
                "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();"
            ],
            [
                "EMPTY_MULTI_VALUED_MAP",
                "org.apache.commons.collections4",
                "MultiMapUtils",
                "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));"
            ],
            [
                "EMPTY_SORTED_MAP",
                "org.apache.commons.collections4",
                "MapUtils",
                "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();"
            ],
            [
                "HASHCODE_NULL",
                "org.apache.commons.collections4.functors",
                "DefaultEquator",
                "public static final int HASHCODE_NULL = -1;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionClosure",
                "public static final Closure INSTANCE = new ExceptionClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPClosure",
                "public static final Closure INSTANCE = new NOPClosure<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NullPredicate",
                "public static final Predicate INSTANCE = new NullPredicate<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantTransformer",
                "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionTransformer",
                "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NOPTransformer",
                "public static final Transformer INSTANCE = new NOPTransformer<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionFactory",
                "public static final Factory INSTANCE = new ExceptionFactory<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "ExceptionPredicate",
                "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "FalsePredicate",
                "public static final Predicate INSTANCE = new FalsePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "CloneTransformer",
                "public static final Transformer INSTANCE = new CloneTransformer<Object>();"
            ],
            [
                "NULL_INSTANCE",
                "org.apache.commons.collections4.functors",
                "ConstantFactory",
                "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "TruePredicate",
                "public static final Predicate INSTANCE = new TruePredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.functors",
                "NotNullPredicate",
                "public static final Predicate INSTANCE = new NotNullPredicate<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.comparators",
                "ComparableComparator",
                "public static final ComparableComparator INSTANCE = new ComparableComparator();"
            ],
            [
                "EMPTY_COLLECTION",
                "org.apache.commons.collections4",
                "CollectionUtils",
                "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());"
            ],
            [
                "EMPTY_ITERABLE",
                "org.apache.commons.collections4",
                "IterableUtils",
                "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};"
            ],
            [
                "NULL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int NULL_BIT_KEY = -1;"
            ],
            [
                "EQUAL_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int EQUAL_BIT_KEY = -2;"
            ],
            [
                "OUT_OF_BOUNDS_BIT_KEY",
                "org.apache.commons.collections4.trie",
                "KeyAnalyzer",
                "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();"
            ],
            [
                "LENGTH",
                "org.apache.commons.collections4.trie.analyzer",
                "StringKeyAnalyzer",
                "public static final int LENGTH = Character.SIZE;"
            ],
            [
                "NO_NEXT_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";"
            ],
            [
                "NO_PREVIOUS_ENTRY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";"
            ],
            [
                "REMOVE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";"
            ],
            [
                "GETKEY_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";"
            ],
            [
                "GETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";"
            ],
            [
                "SETVALUE_INVALID",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";"
            ],
            [
                "DEFAULT_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_CAPACITY = 16;"
            ],
            [
                "DEFAULT_THRESHOLD",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int DEFAULT_THRESHOLD = 12;"
            ],
            [
                "DEFAULT_LOAD_FACTOR",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;"
            ],
            [
                "MAXIMUM_CAPACITY",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final int MAXIMUM_CAPACITY = 1 << 30;"
            ],
            [
                "NULL",
                "org.apache.commons.collections4.map",
                "AbstractHashedMap",
                "protected static final Object NULL = new Object();"
            ],
            [
                "DEFAULT_MAX_SIZE",
                "org.apache.commons.collections4.map",
                "LRUMap",
                "protected static final int DEFAULT_MAX_SIZE = 100;"
            ],
            [
                "EMPTY_MULTISET",
                "org.apache.commons.collections4",
                "MultiSetUtils",
                "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());"
            ],
            [
                "EMPTY_SORTED_SET",
                "org.apache.commons.collections4",
                "SetUtils",
                "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());"
            ],
            [
                "EMPTY_QUEUE",
                "org.apache.commons.collections4",
                "QueueUtils",
                "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());"
            ],
            [
                "EMPTY_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());"
            ],
            [
                "EMPTY_SORTED_BAG",
                "org.apache.commons.collections4",
                "BagUtils",
                "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyListIterator",
                "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyMapIterator",
                "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedIterator",
                "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyOrderedMapIterator",
                "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();"
            ],
            [
                "RESETTABLE_INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();"
            ],
            [
                "INSTANCE",
                "org.apache.commons.collections4.iterators",
                "EmptyIterator",
                "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "value",
                "java.lang",
                "Object"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "values",
                "java.util",
                "Map",
                "public abstract Collection<V> values()"
            ],
            [
                "containsValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsValue(final Object value)"
            ],
            [
                "isEmpty",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean isEmpty()"
            ],
            [
                "toString",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public String toString()"
            ],
            [
                "computeIfAbsent",
                "java.util",
                "Map",
                "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)"
            ],
            [
                "put",
                "org.apache.commons.collections4",
                "Put",
                "public abstract Object put(K arg0, V arg1)"
            ],
            [
                "entrySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<Map.Entry<K, V>> entrySet()"
            ],
            [
                "getOrDefault",
                "java.util",
                "Map",
                "public default V getOrDefault(Object arg0, V arg1)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default boolean replace(K arg0, V arg1, V arg2)"
            ],
            [
                "containsKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean containsKey(final Object key)"
            ],
            [
                "replace",
                "java.util",
                "Map",
                "public default V replace(K arg0, V arg1)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedBidiMap<V, K> inverseBidiMap()"
            ],
            [
                "merge",
                "java.util",
                "Map",
                "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)"
            ],
            [
                "lastKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K lastKey()"
            ],
            [
                "remove",
                "java.util",
                "Map",
                "public default boolean remove(Object arg0, Object arg1)"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "BidiMap",
                "public abstract BidiMap<V, K> inverseBidiMap()"
            ],
            [
                "getKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K getKey(final Object value)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "nextKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K nextKey(final K key)"
            ],
            [
                "previousKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K previousKey(final K key)"
            ],
            [
                "keySet",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<K> keySet()"
            ],
            [
                "remove",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V remove(final Object key)"
            ],
            [
                "compute",
                "java.util",
                "Map",
                "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public OrderedMapIterator<K, V> mapIterator()"
            ],
            [
                "computeIfPresent",
                "java.util",
                "Map",
                "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)"
            ],
            [
                "firstKey",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K firstKey()"
            ],
            [
                "putIfAbsent",
                "java.util",
                "Map",
                "public default V putIfAbsent(K arg0, V arg1)"
            ],
            [
                "removeValue",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public K removeValue(final Object value)"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "IterableGet",
                "public abstract MapIterator<K, V> mapIterator()"
            ],
            [
                "mapIterator",
                "org.apache.commons.collections4",
                "OrderedMap",
                "public volatile MapIterator mapIterator()"
            ],
            [
                "size",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int size()"
            ],
            [
                "values",
                "org.apache.commons.collections4",
                "BidiMap",
                "public volatile Collection values()"
            ],
            [
                "hashCode",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public int hashCode()"
            ],
            [
                "inverseBidiMap",
                "org.apache.commons.collections4",
                "OrderedBidiMap",
                "public volatile BidiMap inverseBidiMap()"
            ],
            [
                "put",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V put(final K key, final V value)"
            ],
            [
                "equals",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public boolean equals(final Object obj)"
            ],
            [
                "get",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public V get(final Object key)"
            ],
            [
                "values",
                "org.apache.commons.collections4.bidimap",
                "TreeBidiMap",
                "public Set<V> values()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]