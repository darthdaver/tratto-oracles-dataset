[
    {
        "id": 25983,
        "oracle": "this.getBase().containsVertex(v) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "jgrapht-core-0.9.2",
        "packageName": "org.jgrapht.graph",
        "className": "Subgraph",
        "javadocTag": "@throws IllegalArgumentException",
        "methodJavadoc": "    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */",
        "methodSourceCode": "public boolean addVertex(V v){\n    if (v == null) {\n        throw new NullPointerException();\n    }\n    if (!base.containsVertex(v)) {\n        throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n    }\n    if (containsVertex(v)) {\n        return false;\n    } else {\n        vertexSet.add(v);\n        return true;\n    }\n}",
        "classJavadoc": "/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */",
        "classSourceCode": "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -------------\n * Subgraph.java\n * -------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 26-Jul-2003 : Accurate constructors to avoid casting problems (BN);\n * 10-Aug-2003 : Adaptation to new event model (BN);\n * 23-Oct-2003 : Allowed non-listenable graph as base (BN);\n * 07-Feb-2004 : Enabled serialization (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 15-Mar-2004 : Integrity is now checked using Maps (CH);\n * 20-Mar-2004 : Cancelled verification of element identity to base graph (BN);\n * 21-Sep-2004 : Added induced subgraph (who?)\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */\npublic class Subgraph<V, E, G extends Graph<V, E>>\n    extends AbstractGraph<V, E>\n    implements Serializable\n{\n    private static final long serialVersionUID = 3208313055169665387L;\n    private static final String NO_SUCH_EDGE_IN_BASE =\n        \"no such edge in base graph\";\n    private static final String NO_SUCH_VERTEX_IN_BASE =\n        \"no such vertex in base graph\";\n\n    //\n    Set<E> edgeSet = new LinkedHashSet<E>(); // friendly to improve performance\n    Set<V> vertexSet = new LinkedHashSet<V>(); // friendly to improve\n\n    // performance\n\n    //\n    private transient Set<E> unmodifiableEdgeSet = null;\n    private transient Set<V> unmodifiableVertexSet = null;\n    private G base;\n    private boolean isInduced = false;\n\n    /**\n     * Creates a new Subgraph.\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     * @param edgeSubset edges to in include in the subgraph. If <code>\n     * null</code> then all the edges whose vertices found in the graph are\n     * included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset, Set<E> edgeSubset)\n    {\n        super();\n\n        this.base = base;\n\n        if (edgeSubset == null) {\n            isInduced = true;\n        }\n\n        if (base instanceof ListenableGraph<?, ?>) {\n            ((ListenableGraph<V, E>) base).addGraphListener(\n                new BaseGraphListener());\n        }\n\n        addVerticesUsingFilter(base.vertexSet(), vertexSubset);\n        addEdgesUsingFilter(base.edgeSet(), edgeSubset);\n    }\n\n    /**\n     * Creates a new induced Subgraph. The subgraph will keep track of edges\n     * being added to its vertex subset as well as deletion of edges and\n     * vertices. If base it not listenable, this is identical to the call\n     * Subgraph(base, vertexSubset, null) .\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset)\n    {\n        this(base, vertexSubset, null);\n    }\n\n    /**\n     * @see Graph#getAllEdges(Object, Object)\n     */\n    @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = null;\n\n        if (containsVertex(sourceVertex) && containsVertex(targetVertex)) {\n            edges = new ArrayUnenforcedSet<E>();\n\n            Set<E> baseEdges = base.getAllEdges(sourceVertex, targetVertex);\n\n            for (Iterator<E> iter = baseEdges.iterator(); iter.hasNext();) {\n                E e = iter.next();\n\n                if (edgeSet.contains(e)) { // add if subgraph also contains\n                                           // it\n                    edges.add(e);\n                }\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#getEdge(Object, Object)\n     */\n    @Override public E getEdge(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = getAllEdges(sourceVertex, targetVertex);\n\n        if ((edges == null) || edges.isEmpty()) {\n            return null;\n        } else {\n            return edges.iterator().next();\n        }\n    }\n\n    /**\n     * @see Graph#getEdgeFactory()\n     */\n    @Override public EdgeFactory<V, E> getEdgeFactory()\n    {\n        return base.getEdgeFactory();\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!base.containsEdge(sourceVertex, targetVertex)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        Set<E> edges = base.getAllEdges(sourceVertex, targetVertex);\n\n        for (Iterator<E> iter = edges.iterator(); iter.hasNext();) {\n            E e = iter.next();\n\n            if (!containsEdge(e)) {\n                edgeSet.add(e);\n\n                return e;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        if (e == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsEdge(e)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        assert (base.getEdgeSource(e) == sourceVertex);\n        assert (base.getEdgeTarget(e) == targetVertex);\n\n        if (containsEdge(e)) {\n            return false;\n        } else {\n            edgeSet.add(e);\n\n            return true;\n        }\n    }\n\n    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        if (v == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsVertex(v)) {\n            throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n        }\n\n        if (containsVertex(v)) {\n            return false;\n        } else {\n            vertexSet.add(v);\n\n            return true;\n        }\n    }\n\n    /**\n     * @see Graph#containsEdge(Object)\n     */\n    @Override public boolean containsEdge(E e)\n    {\n        return edgeSet.contains(e);\n    }\n\n    /**\n     * @see Graph#containsVertex(Object)\n     */\n    @Override public boolean containsVertex(V v)\n    {\n        return vertexSet.contains(v);\n    }\n\n    /**\n     * @see Graph#edgeSet()\n     */\n    @Override public Set<E> edgeSet()\n    {\n        if (unmodifiableEdgeSet == null) {\n            unmodifiableEdgeSet = Collections.unmodifiableSet(edgeSet);\n        }\n\n        return unmodifiableEdgeSet;\n    }\n\n    /**\n     * @see Graph#edgesOf(Object)\n     */\n    @Override public Set<E> edgesOf(V vertex)\n    {\n        assertVertexExist(vertex);\n\n        Set<E> edges = new ArrayUnenforcedSet<E>();\n        Set<E> baseEdges = base.edgesOf(vertex);\n\n        for (E e : baseEdges) {\n            if (containsEdge(e)) {\n                edges.add(e);\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        return edgeSet.remove(e);\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = getEdge(sourceVertex, targetVertex);\n\n        return edgeSet.remove(e) ? e : null;\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        // If the base graph does NOT contain v it means we are here in\n        // response to removal of v from the base. In such case we don't need\n        // to remove all the edges of v as they were already removed.\n        if (containsVertex(v) && base.containsVertex(v)) {\n            removeAllEdges(edgesOf(v));\n        }\n\n        return vertexSet.remove(v);\n    }\n\n    /**\n     * @see Graph#vertexSet()\n     */\n    @Override public Set<V> vertexSet()\n    {\n        if (unmodifiableVertexSet == null) {\n            unmodifiableVertexSet = Collections.unmodifiableSet(vertexSet);\n        }\n\n        return unmodifiableVertexSet;\n    }\n\n    /**\n     * @see Graph#getEdgeSource(Object)\n     */\n    @Override public V getEdgeSource(E e)\n    {\n        return base.getEdgeSource(e);\n    }\n\n    /**\n     * @see Graph#getEdgeTarget(Object)\n     */\n    @Override public V getEdgeTarget(E e)\n    {\n        return base.getEdgeTarget(e);\n    }\n\n    private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)\n    {\n        E e;\n        boolean containsVertices;\n        boolean edgeIncluded;\n\n        for (Iterator<E> iter = edgeSet.iterator(); iter.hasNext();) {\n            e = iter.next();\n\n            V sourceVertex = base.getEdgeSource(e);\n            V targetVertex = base.getEdgeTarget(e);\n            containsVertices =\n                containsVertex(sourceVertex)\n                && containsVertex(targetVertex);\n\n            // note the use of short circuit evaluation\n            edgeIncluded = (filter == null) || filter.contains(e);\n\n            if (containsVertices && edgeIncluded) {\n                addEdge(sourceVertex, targetVertex, e);\n            }\n        }\n    }\n\n    private void addVerticesUsingFilter(Set<V> vertexSet, Set<V> filter)\n    {\n        V v;\n\n        for (Iterator<V> iter = vertexSet.iterator(); iter.hasNext();) {\n            v = iter.next();\n\n            // note the use of short circuit evaluation\n            if ((filter == null) || filter.contains(v)) {\n                addVertex(v);\n            }\n        }\n    }\n\n    public G getBase()\n    {\n        return base;\n    }\n\n    /**\n     * @see Graph#getEdgeWeight(Object)\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        return base.getEdgeWeight(e);\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight(Object, double)\n     */\n    public void setEdgeWeight(E e, double weight)\n    {\n        ((WeightedGraph<V, E>) base).setEdgeWeight(e, weight);\n    }\n\n    /**\n     * An internal listener on the base graph.\n     *\n     * @author Barak Naveh\n     * @since Jul 20, 2003\n     */\n    private class BaseGraphListener\n        implements GraphListener<V, E>,\n            Serializable\n    {\n        private static final long serialVersionUID = 4343535244243546391L;\n\n        /**\n         * @see GraphListener#edgeAdded(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeAdded(GraphEdgeChangeEvent<V, E> e)\n        {\n            if (isInduced) {\n                E edge = e.getEdge();\n                V source = e.getEdgeSource();\n                V target = e.getEdgeTarget();\n                if (containsVertex(source) && containsVertex(target)) {\n                    addEdge(\n                        source,\n                        target,\n                        edge);\n                }\n            }\n        }\n\n        /**\n         * @see GraphListener#edgeRemoved(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)\n        {\n            E edge = e.getEdge();\n\n            removeEdge(edge);\n        }\n\n        /**\n         * @see VertexSetListener#vertexAdded(GraphVertexChangeEvent)\n         */\n        @Override public void vertexAdded(GraphVertexChangeEvent<V> e)\n        {\n            // we don't care\n        }\n\n        /**\n         * @see VertexSetListener#vertexRemoved(GraphVertexChangeEvent)\n         */\n        @Override public void vertexRemoved(GraphVertexChangeEvent<V> e)\n        {\n            V vertex = e.getVertex();\n\n            removeVertex(vertex);\n        }\n    }\n}\n\n// End Subgraph.java\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "PartiteRandomGraphGenerator",
                "org.jgrapht.experimental"
            ],
            [
                "RandomGraphHelper",
                "org.jgrapht.experimental"
            ],
            [
                "GraphReader",
                "org.jgrapht.experimental"
            ],
            [
                "DirectedAcyclicGraph",
                "org.jgrapht.experimental.dag"
            ],
            [
                "GraphSquare",
                "org.jgrapht.experimental"
            ],
            [
                "UniformRandomGraphGenerator",
                "org.jgrapht.experimental"
            ],
            [
                "GraphTests",
                "org.jgrapht.experimental"
            ],
            [
                "ApproximationAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "BrownBacktrackColoring",
                "org.jgrapht.experimental.alg.color"
            ],
            [
                "GreedyColoring",
                "org.jgrapht.experimental.alg.color"
            ],
            [
                "IntArrayGraphAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "ExactAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "ListenableGraph",
                "org.jgrapht"
            ],
            [
                "ModifiableInteger",
                "org.jgrapht.util"
            ],
            [
                "FibonacciHeapNode",
                "org.jgrapht.util"
            ],
            [
                "WeightCombiner",
                "org.jgrapht.util"
            ],
            [
                "FibonacciHeap",
                "org.jgrapht.util"
            ],
            [
                "TypeUtil",
                "org.jgrapht.util"
            ],
            [
                "ArrayUnenforcedSet",
                "org.jgrapht.util"
            ],
            [
                "VertexPair",
                "org.jgrapht.util"
            ],
            [
                "MathUtil",
                "org.jgrapht.util"
            ],
            [
                "PrefetchIterator",
                "org.jgrapht.util"
            ],
            [
                "VertexFactory",
                "org.jgrapht"
            ],
            [
                "Graph",
                "org.jgrapht"
            ],
            [
                "GraphPath",
                "org.jgrapht"
            ],
            [
                "UndirectedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "SimpleGraph",
                "org.jgrapht.graph"
            ],
            [
                "MixedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "DefaultGraphMapping",
                "org.jgrapht.graph"
            ],
            [
                "WeightedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedMaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "MaskEdgeSet",
                "org.jgrapht.graph"
            ],
            [
                "Pseudograph",
                "org.jgrapht.graph"
            ],
            [
                "MaskFunctor",
                "org.jgrapht.graph"
            ],
            [
                "GraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "DirectedMaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "AbstractBaseGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "Multigraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultWeightedEdge",
                "org.jgrapht.graph"
            ],
            [
                "ListenableDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "AsUnweightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "EdgeSetFactory",
                "org.jgrapht.graph"
            ],
            [
                "GraphDelegator",
                "org.jgrapht.graph"
            ],
            [
                "DefaultListenableGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "ClassBasedVertexFactory",
                "org.jgrapht.graph"
            ],
            [
                "DefaultEdge",
                "org.jgrapht.graph"
            ],
            [
                "MaskVertexSet",
                "org.jgrapht.graph"
            ],
            [
                "ListenableUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "ListenableUndirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsUnweightedDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "IntrusiveEdge",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableGraph",
                "org.jgrapht.graph"
            ],
            [
                "GraphPathImpl",
                "org.jgrapht.graph"
            ],
            [
                "Subgraph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedWeightedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "AbstractGraph",
                "org.jgrapht.graph"
            ],
            [
                "MaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "ClassBasedEdgeFactory",
                "org.jgrapht.graph"
            ],
            [
                "SimpleWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsWeightedDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "WeightedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "EdgeReversedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedWeightedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedWeightedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedWeightedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "AbstractGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedWeightedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "ListenableDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleGraphPath",
                "org.jgrapht.graph"
            ],
            [
                "ParanoidGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "GraphHelper",
                "org.jgrapht"
            ],
            [
                "Graphs",
                "org.jgrapht"
            ],
            [
                "DirectedGraph",
                "org.jgrapht"
            ],
            [
                "WeightedGraph",
                "org.jgrapht"
            ],
            [
                "HyperCubeGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "RingGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "SimpleWeightedGraphMatrixGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WeightedGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WheelGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "GridGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "ScaleFreeGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "SimpleWeightedBipartiteGraphMatrixGenerator",
                "org.jgrapht.generate"
            ],
            [
                "LinearGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "CompleteGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "RandomGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WeightedGraphGeneratorAdapter",
                "org.jgrapht.generate"
            ],
            [
                "EmptyGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "CompleteBipartiteGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "GraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "StarGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "UndirectedGraph",
                "org.jgrapht"
            ],
            [
                "TopologicalOrderIterator",
                "org.jgrapht.traverse"
            ],
            [
                "CrossComponentIterator",
                "org.jgrapht.traverse"
            ],
            [
                "AbstractGraphIterator",
                "org.jgrapht.traverse"
            ],
            [
                "ClosestFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "BreadthFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "DepthFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "GraphIterator",
                "org.jgrapht.traverse"
            ],
            [
                "EdgeFactory",
                "org.jgrapht"
            ],
            [
                "GraphMapping",
                "org.jgrapht"
            ],
            [
                "VertexSetListener",
                "org.jgrapht.event"
            ],
            [
                "EdgeTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "TraversalListener",
                "org.jgrapht.event"
            ],
            [
                "GraphEdgeChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "VertexTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphListener",
                "org.jgrapht.event"
            ],
            [
                "TraversalListenerAdapter",
                "org.jgrapht.event"
            ],
            [
                "ConnectedComponentTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphVertexChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "TarjanLowestCommonAncestor",
                "org.jgrapht.alg"
            ],
            [
                "PrimMinimumSpanningTree",
                "org.jgrapht.alg"
            ],
            [
                "BlockCutpointGraph",
                "org.jgrapht.alg"
            ],
            [
                "AllDirectedPaths",
                "org.jgrapht.alg"
            ],
            [
                "KShortestPathsIterator",
                "org.jgrapht.alg"
            ],
            [
                "KruskalMinimumSpanningTree",
                "org.jgrapht.alg"
            ],
            [
                "StrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "VF2State",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphIsomorphismState",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2AbstractIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphIsomorphismState",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "IsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "GraphOrdering",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphMappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "IsomorphicGraphMapping",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphMappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2MappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "BronKerboschCliqueFinder",
                "org.jgrapht.alg"
            ],
            [
                "ChromaticNumber",
                "org.jgrapht.alg"
            ],
            [
                "KosarajuStrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "DijkstraShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "RankingPathElement",
                "org.jgrapht.alg"
            ],
            [
                "AStarShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsKarpMaximumFlow",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordPathElement",
                "org.jgrapht.alg"
            ],
            [
                "FloydWarshallShortestPaths",
                "org.jgrapht.alg"
            ],
            [
                "UnionFind",
                "org.jgrapht.alg.util"
            ],
            [
                "AlwaysEqualComparator",
                "org.jgrapht.alg.util"
            ],
            [
                "Extension",
                "org.jgrapht.alg.util"
            ],
            [
                "VertexDegreeComparator",
                "org.jgrapht.alg.util"
            ],
            [
                "Pair",
                "org.jgrapht.alg.util"
            ],
            [
                "GabowStrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "HawickJamesSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "DirectedSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "JohnsonSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "TiernanSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "UndirectedCycleBase",
                "org.jgrapht.alg.cycle"
            ],
            [
                "PatonCycleBase",
                "org.jgrapht.alg.cycle"
            ],
            [
                "TarjanSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "SzwarcfiterLauerSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "BiconnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "ConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "MinSourceSinkCut",
                "org.jgrapht.alg"
            ],
            [
                "RankingPathElementList",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsBlossomShrinking",
                "org.jgrapht.alg"
            ],
            [
                "TransitiveClosure",
                "org.jgrapht.alg"
            ],
            [
                "HopcroftKarpBipartiteMatching",
                "org.jgrapht.alg"
            ],
            [
                "StoerWagnerMinimumCut",
                "org.jgrapht.alg"
            ],
            [
                "AbstractPathElementList",
                "org.jgrapht.alg"
            ],
            [
                "KuhnMunkresMinimalWeightBipartitePerfectMatching",
                "org.jgrapht.alg"
            ],
            [
                "TransitiveReduction",
                "org.jgrapht.alg"
            ],
            [
                "EulerianCircuit",
                "org.jgrapht.alg"
            ],
            [
                "DirectedNeighborIndex",
                "org.jgrapht.alg"
            ],
            [
                "NaiveLcaFinder",
                "org.jgrapht.alg"
            ],
            [
                "MaximumWeightBipartiteMatching",
                "org.jgrapht.alg"
            ],
            [
                "HamiltonianCycle",
                "org.jgrapht.alg"
            ],
            [
                "KShortestPaths",
                "org.jgrapht.alg"
            ],
            [
                "NeighborIndex",
                "org.jgrapht.alg"
            ],
            [
                "VertexCovers",
                "org.jgrapht.alg"
            ],
            [
                "CycleDetector",
                "org.jgrapht.alg"
            ],
            [
                "AStarAdmissibleHeuristic",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MinimumSpanningTree",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "WeightedMatchingAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "StrongConnectivityAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MaximumFlowAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MatchingAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "CliqueMinimalSeparatorDecomposition",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordIterator",
                "org.jgrapht.alg"
            ],
            [
                "AbstractPathElement",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsKarpMaximumFlow",
                "org.jgrapht.alg.flow"
            ],
            [
                "PushRelabelMaximumFlow",
                "org.jgrapht.alg.flow"
            ],
            [
                "MaximumFlowAlgorithmBase",
                "org.jgrapht.alg.flow"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "addVertices",
                "org.jgrapht.experimental",
                "RandomGraphHelper",
                "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)"
            ],
            [
                "isEmpty",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isEmpty(Graph<V, E> g)"
            ],
            [
                "isComplete",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isComplete(Graph<V, E> g)"
            ],
            [
                "isConnected",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isConnected(Graph<V, E> g)"
            ],
            [
                "isTree",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isTree(Graph<V, E> g)"
            ],
            [
                "isBipartite",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isBipartite(Graph<V, E> g)"
            ],
            [
                "union",
                "org.jgrapht.util",
                "FibonacciHeap",
                "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)"
            ],
            [
                "uncheckedCast",
                "org.jgrapht.util",
                "TypeUtil",
                "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)"
            ],
            [
                "factorial",
                "org.jgrapht.util",
                "MathUtil",
                "public static long factorial(int N)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleGraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleGraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedPseudograph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedPseudograph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Pseudograph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Pseudograph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedMultigraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedMultigraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedPseudograph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedPseudograph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Multigraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Multigraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedPseudograph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedPseudograph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleWeightedGraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleWeightedGraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedMultigraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedMultigraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedMultigraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedMultigraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "addEdge",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
            ],
            [
                "addGraph",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)"
            ],
            [
                "addAllEdges",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)"
            ],
            [
                "addAllVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)"
            ],
            [
                "neighborListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)"
            ],
            [
                "predecessorListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)"
            ],
            [
                "successorListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)"
            ],
            [
                "undirectedGraph",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)"
            ],
            [
                "testIncidence",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)"
            ],
            [
                "getOppositeVertex",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)"
            ],
            [
                "getPathVertexList",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)"
            ],
            [
                "range",
                "org.jgrapht.generate",
                "SimpleWeightedGraphMatrixGenerator",
                "public static int[] range(final int from, final int to)"
            ],
            [
                "createGraphSpecifics",
                "org.jgrapht.traverse",
                "CrossComponentIterator",
                "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)"
            ],
            [
                "findGreedyChromaticNumber",
                "org.jgrapht.alg",
                "ChromaticNumber",
                "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)"
            ],
            [
                "findGreedyColoredGroups",
                "org.jgrapht.alg",
                "ChromaticNumber",
                "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)"
            ],
            [
                "findPathBetween",
                "org.jgrapht.alg",
                "BellmanFordShortestPath",
                "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
            ],
            [
                "findPathBetween",
                "org.jgrapht.alg",
                "DijkstraShortestPath",
                "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
            ],
            [
                "of",
                "org.jgrapht.alg.util",
                "Pair",
                "public static <A, B> Pair<A, B> of(A a, B b)"
            ],
            [
                "isEulerian",
                "org.jgrapht.alg",
                "EulerianCircuit",
                "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)"
            ],
            [
                "getEulerianCircuitVertices",
                "org.jgrapht.alg",
                "EulerianCircuit",
                "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)"
            ],
            [
                "getApproximateOptimalForCompleteGraph",
                "org.jgrapht.alg",
                "HamiltonianCycle",
                "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)"
            ],
            [
                "find2ApproximationCover",
                "org.jgrapht.alg",
                "VertexCovers",
                "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)"
            ],
            [
                "findGreedyCover",
                "org.jgrapht.alg",
                "VertexCovers",
                "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "BEST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int BEST_ORDER = 0;"
            ],
            [
                "NATURAL_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int NATURAL_ORDER = 1;"
            ],
            [
                "SMALLEST_DEGREE_LAST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;"
            ],
            [
                "LARGEST_SATURATION_FIRST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;"
            ],
            [
                "DEFAULT_EDGE_WEIGHT",
                "org.jgrapht",
                "WeightedGraph",
                "public static double DEFAULT_EDGE_WEIGHT = 1.0;"
            ],
            [
                "HUB_VERTEX",
                "org.jgrapht.generate",
                "WheelGraphGenerator",
                "public static final String HUB_VERTEX = \"Hub Vertex\";"
            ],
            [
                "CORNER_VERTEX",
                "org.jgrapht.generate",
                "GridGraphGenerator",
                "public static final String CORNER_VERTEX = \"Corner Vertex\";"
            ],
            [
                "START_VERTEX",
                "org.jgrapht.generate",
                "LinearGraphGenerator",
                "public static final String START_VERTEX = \"Start Vertex\";"
            ],
            [
                "END_VERTEX",
                "org.jgrapht.generate",
                "LinearGraphGenerator",
                "public static final String END_VERTEX = \"End Vertex\";"
            ],
            [
                "CENTER_VERTEX",
                "org.jgrapht.generate",
                "StarGraphGenerator",
                "public static final String CENTER_VERTEX = \"Center Vertex\";"
            ],
            [
                "SENTINEL",
                "org.jgrapht.traverse",
                "DepthFirstIterator",
                "public static final Object SENTINEL = new Object();"
            ],
            [
                "BEFORE_EDGE_ADDED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int BEFORE_EDGE_ADDED = 21;"
            ],
            [
                "BEFORE_EDGE_REMOVED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int BEFORE_EDGE_REMOVED = 22;"
            ],
            [
                "EDGE_ADDED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int EDGE_ADDED = 23;"
            ],
            [
                "EDGE_REMOVED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int EDGE_REMOVED = 24;"
            ],
            [
                "CONNECTED_COMPONENT_STARTED",
                "org.jgrapht.event",
                "ConnectedComponentTraversalEvent",
                "public static final int CONNECTED_COMPONENT_STARTED = 31;"
            ],
            [
                "CONNECTED_COMPONENT_FINISHED",
                "org.jgrapht.event",
                "ConnectedComponentTraversalEvent",
                "public static final int CONNECTED_COMPONENT_FINISHED = 32;"
            ],
            [
                "BEFORE_VERTEX_ADDED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int BEFORE_VERTEX_ADDED = 11;"
            ],
            [
                "BEFORE_VERTEX_REMOVED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int BEFORE_VERTEX_REMOVED = 12;"
            ],
            [
                "VERTEX_ADDED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int VERTEX_ADDED = 13;"
            ],
            [
                "VERTEX_REMOVED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int VERTEX_REMOVED = 14;"
            ],
            [
                "NULL_NODE",
                "org.jgrapht.alg.isomorphism",
                "VF2State",
                "public static final int NULL_NODE = -1;"
            ],
            [
                "DEBUG",
                "org.jgrapht.alg.isomorphism",
                "VF2State",
                "protected static final boolean DEBUG = false;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.jgrapht.alg",
                "EdmondsKarpMaximumFlow",
                "public static final double DEFAULT_EPSILON = 0.000000001;"
            ],
            [
                "INSTANCE",
                "org.jgrapht.alg",
                "TransitiveClosure",
                "public static final TransitiveClosure INSTANCE = new TransitiveClosure();"
            ],
            [
                "INSTANCE",
                "org.jgrapht.alg",
                "TransitiveReduction",
                "public static final TransitiveReduction INSTANCE = new TransitiveReduction();"
            ],
            [
                "NEGATIVE_UNDIRECTED_EDGE",
                "org.jgrapht.alg",
                "BellmanFordIterator",
                "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";"
            ],
            [
                "DEFAULT_EPSILON",
                "org.jgrapht.alg.flow",
                "MaximumFlowAlgorithmBase",
                "public static final double DEFAULT_EPSILON = 1e-9;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "v",
                "",
                "V"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEdgeFactory",
                "org.jgrapht.graph",
                "Subgraph",
                "public EdgeFactory<V, E> getEdgeFactory()"
            ],
            [
                "equals",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean equals(Object arg0)"
            ],
            [
                "containsEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean containsEdge(E e)"
            ],
            [
                "edgeSet",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> edgeSet()"
            ],
            [
                "removeEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E removeEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "addEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E addEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "edgesOf",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> edgesOf(V vertex)"
            ],
            [
                "containsVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean containsVertex(V v)"
            ],
            [
                "containsEdge",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean containsEdge(V arg0, V arg1)"
            ],
            [
                "toString",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public String toString()"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean removeAllEdges(Collection<? extends E> arg0)"
            ],
            [
                "assertVertexExist",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected boolean assertVertexExist(V arg0)"
            ],
            [
                "getEdgeWeight",
                "org.jgrapht.graph",
                "Subgraph",
                "public double getEdgeWeight(E e)"
            ],
            [
                "getEdgeSource",
                "org.jgrapht.graph",
                "Subgraph",
                "public V getEdgeSource(E e)"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected boolean removeAllEdges(E[] arg0)"
            ],
            [
                "getEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E getEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "hashCode",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public int hashCode()"
            ],
            [
                "toStringFromSets",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)"
            ],
            [
                "addEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean addEdge(V sourceVertex, V targetVertex, E e)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public Set<E> removeAllEdges(V arg0, V arg1)"
            ],
            [
                "addVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean addVertex(V v)"
            ],
            [
                "getAllEdges",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> getAllEdges(V sourceVertex, V targetVertex)"
            ],
            [
                "getBase",
                "org.jgrapht.graph",
                "Subgraph",
                "public G getBase()"
            ],
            [
                "removeAllVertices",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean removeAllVertices(Collection<? extends V> arg0)"
            ],
            [
                "vertexSet",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<V> vertexSet()"
            ],
            [
                "removeEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean removeEdge(E e)"
            ],
            [
                "getEdgeTarget",
                "org.jgrapht.graph",
                "Subgraph",
                "public V getEdgeTarget(E e)"
            ],
            [
                "removeVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean removeVertex(V v)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "edgeSet",
                "org.jgrapht.graph",
                "Subgraph",
                "Set<E> edgeSet = new LinkedHashSet<E>();"
            ],
            [
                "vertexSet",
                "org.jgrapht.graph",
                "Subgraph",
                "Set<V> vertexSet = new LinkedHashSet<V>();"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 25983,
        "oracle": "this.getBase().containsVertex(v) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "jgrapht-core-0.9.2",
        "packageName": "org.jgrapht.graph",
        "className": "Subgraph",
        "javadocTag": "@throws IllegalArgumentException",
        "methodJavadoc": "    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */",
        "methodSourceCode": "public boolean addVertex(V v){\n    if (v == null) {\n        throw new NullPointerException();\n    }\n    if (!base.containsVertex(v)) {\n        throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n    }\n    if (containsVertex(v)) {\n        return false;\n    } else {\n        vertexSet.add(v);\n        return true;\n    }\n}",
        "classJavadoc": "/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */",
        "classSourceCode": "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -------------\n * Subgraph.java\n * -------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 26-Jul-2003 : Accurate constructors to avoid casting problems (BN);\n * 10-Aug-2003 : Adaptation to new event model (BN);\n * 23-Oct-2003 : Allowed non-listenable graph as base (BN);\n * 07-Feb-2004 : Enabled serialization (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 15-Mar-2004 : Integrity is now checked using Maps (CH);\n * 20-Mar-2004 : Cancelled verification of element identity to base graph (BN);\n * 21-Sep-2004 : Added induced subgraph (who?)\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */\npublic class Subgraph<V, E, G extends Graph<V, E>>\n    extends AbstractGraph<V, E>\n    implements Serializable\n{\n    private static final long serialVersionUID = 3208313055169665387L;\n    private static final String NO_SUCH_EDGE_IN_BASE =\n        \"no such edge in base graph\";\n    private static final String NO_SUCH_VERTEX_IN_BASE =\n        \"no such vertex in base graph\";\n\n    //\n    Set<E> edgeSet = new LinkedHashSet<E>(); // friendly to improve performance\n    Set<V> vertexSet = new LinkedHashSet<V>(); // friendly to improve\n\n    // performance\n\n    //\n    private transient Set<E> unmodifiableEdgeSet = null;\n    private transient Set<V> unmodifiableVertexSet = null;\n    private G base;\n    private boolean isInduced = false;\n\n    /**\n     * Creates a new Subgraph.\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     * @param edgeSubset edges to in include in the subgraph. If <code>\n     * null</code> then all the edges whose vertices found in the graph are\n     * included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset, Set<E> edgeSubset)\n    {\n        super();\n\n        this.base = base;\n\n        if (edgeSubset == null) {\n            isInduced = true;\n        }\n\n        if (base instanceof ListenableGraph<?, ?>) {\n            ((ListenableGraph<V, E>) base).addGraphListener(\n                new BaseGraphListener());\n        }\n\n        addVerticesUsingFilter(base.vertexSet(), vertexSubset);\n        addEdgesUsingFilter(base.edgeSet(), edgeSubset);\n    }\n\n    /**\n     * Creates a new induced Subgraph. The subgraph will keep track of edges\n     * being added to its vertex subset as well as deletion of edges and\n     * vertices. If base it not listenable, this is identical to the call\n     * Subgraph(base, vertexSubset, null) .\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset)\n    {\n        this(base, vertexSubset, null);\n    }\n\n    /**\n     * @see Graph#getAllEdges(Object, Object)\n     */\n    @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = null;\n\n        if (containsVertex(sourceVertex) && containsVertex(targetVertex)) {\n            edges = new ArrayUnenforcedSet<E>();\n\n            Set<E> baseEdges = base.getAllEdges(sourceVertex, targetVertex);\n\n            for (Iterator<E> iter = baseEdges.iterator(); iter.hasNext();) {\n                E e = iter.next();\n\n                if (edgeSet.contains(e)) { // add if subgraph also contains\n                                           // it\n                    edges.add(e);\n                }\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#getEdge(Object, Object)\n     */\n    @Override public E getEdge(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = getAllEdges(sourceVertex, targetVertex);\n\n        if ((edges == null) || edges.isEmpty()) {\n            return null;\n        } else {\n            return edges.iterator().next();\n        }\n    }\n\n    /**\n     * @see Graph#getEdgeFactory()\n     */\n    @Override public EdgeFactory<V, E> getEdgeFactory()\n    {\n        return base.getEdgeFactory();\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!base.containsEdge(sourceVertex, targetVertex)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        Set<E> edges = base.getAllEdges(sourceVertex, targetVertex);\n\n        for (Iterator<E> iter = edges.iterator(); iter.hasNext();) {\n            E e = iter.next();\n\n            if (!containsEdge(e)) {\n                edgeSet.add(e);\n\n                return e;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        if (e == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsEdge(e)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        assert (base.getEdgeSource(e) == sourceVertex);\n        assert (base.getEdgeTarget(e) == targetVertex);\n\n        if (containsEdge(e)) {\n            return false;\n        } else {\n            edgeSet.add(e);\n\n            return true;\n        }\n    }\n\n    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        if (v == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsVertex(v)) {\n            throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n        }\n\n        if (containsVertex(v)) {\n            return false;\n        } else {\n            vertexSet.add(v);\n\n            return true;\n        }\n    }\n\n    /**\n     * @see Graph#containsEdge(Object)\n     */\n    @Override public boolean containsEdge(E e)\n    {\n        return edgeSet.contains(e);\n    }\n\n    /**\n     * @see Graph#containsVertex(Object)\n     */\n    @Override public boolean containsVertex(V v)\n    {\n        return vertexSet.contains(v);\n    }\n\n    /**\n     * @see Graph#edgeSet()\n     */\n    @Override public Set<E> edgeSet()\n    {\n        if (unmodifiableEdgeSet == null) {\n            unmodifiableEdgeSet = Collections.unmodifiableSet(edgeSet);\n        }\n\n        return unmodifiableEdgeSet;\n    }\n\n    /**\n     * @see Graph#edgesOf(Object)\n     */\n    @Override public Set<E> edgesOf(V vertex)\n    {\n        assertVertexExist(vertex);\n\n        Set<E> edges = new ArrayUnenforcedSet<E>();\n        Set<E> baseEdges = base.edgesOf(vertex);\n\n        for (E e : baseEdges) {\n            if (containsEdge(e)) {\n                edges.add(e);\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        return edgeSet.remove(e);\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = getEdge(sourceVertex, targetVertex);\n\n        return edgeSet.remove(e) ? e : null;\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        // If the base graph does NOT contain v it means we are here in\n        // response to removal of v from the base. In such case we don't need\n        // to remove all the edges of v as they were already removed.\n        if (containsVertex(v) && base.containsVertex(v)) {\n            removeAllEdges(edgesOf(v));\n        }\n\n        return vertexSet.remove(v);\n    }\n\n    /**\n     * @see Graph#vertexSet()\n     */\n    @Override public Set<V> vertexSet()\n    {\n        if (unmodifiableVertexSet == null) {\n            unmodifiableVertexSet = Collections.unmodifiableSet(vertexSet);\n        }\n\n        return unmodifiableVertexSet;\n    }\n\n    /**\n     * @see Graph#getEdgeSource(Object)\n     */\n    @Override public V getEdgeSource(E e)\n    {\n        return base.getEdgeSource(e);\n    }\n\n    /**\n     * @see Graph#getEdgeTarget(Object)\n     */\n    @Override public V getEdgeTarget(E e)\n    {\n        return base.getEdgeTarget(e);\n    }\n\n    private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)\n    {\n        E e;\n        boolean containsVertices;\n        boolean edgeIncluded;\n\n        for (Iterator<E> iter = edgeSet.iterator(); iter.hasNext();) {\n            e = iter.next();\n\n            V sourceVertex = base.getEdgeSource(e);\n            V targetVertex = base.getEdgeTarget(e);\n            containsVertices =\n                containsVertex(sourceVertex)\n                && containsVertex(targetVertex);\n\n            // note the use of short circuit evaluation\n            edgeIncluded = (filter == null) || filter.contains(e);\n\n            if (containsVertices && edgeIncluded) {\n                addEdge(sourceVertex, targetVertex, e);\n            }\n        }\n    }\n\n    private void addVerticesUsingFilter(Set<V> vertexSet, Set<V> filter)\n    {\n        V v;\n\n        for (Iterator<V> iter = vertexSet.iterator(); iter.hasNext();) {\n            v = iter.next();\n\n            // note the use of short circuit evaluation\n            if ((filter == null) || filter.contains(v)) {\n                addVertex(v);\n            }\n        }\n    }\n\n    public G getBase()\n    {\n        return base;\n    }\n\n    /**\n     * @see Graph#getEdgeWeight(Object)\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        return base.getEdgeWeight(e);\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight(Object, double)\n     */\n    public void setEdgeWeight(E e, double weight)\n    {\n        ((WeightedGraph<V, E>) base).setEdgeWeight(e, weight);\n    }\n\n    /**\n     * An internal listener on the base graph.\n     *\n     * @author Barak Naveh\n     * @since Jul 20, 2003\n     */\n    private class BaseGraphListener\n        implements GraphListener<V, E>,\n            Serializable\n    {\n        private static final long serialVersionUID = 4343535244243546391L;\n\n        /**\n         * @see GraphListener#edgeAdded(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeAdded(GraphEdgeChangeEvent<V, E> e)\n        {\n            if (isInduced) {\n                E edge = e.getEdge();\n                V source = e.getEdgeSource();\n                V target = e.getEdgeTarget();\n                if (containsVertex(source) && containsVertex(target)) {\n                    addEdge(\n                        source,\n                        target,\n                        edge);\n                }\n            }\n        }\n\n        /**\n         * @see GraphListener#edgeRemoved(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)\n        {\n            E edge = e.getEdge();\n\n            removeEdge(edge);\n        }\n\n        /**\n         * @see VertexSetListener#vertexAdded(GraphVertexChangeEvent)\n         */\n        @Override public void vertexAdded(GraphVertexChangeEvent<V> e)\n        {\n            // we don't care\n        }\n\n        /**\n         * @see VertexSetListener#vertexRemoved(GraphVertexChangeEvent)\n         */\n        @Override public void vertexRemoved(GraphVertexChangeEvent<V> e)\n        {\n            V vertex = e.getVertex();\n\n            removeVertex(vertex);\n        }\n    }\n}\n\n// End Subgraph.java\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "PartiteRandomGraphGenerator",
                "org.jgrapht.experimental"
            ],
            [
                "RandomGraphHelper",
                "org.jgrapht.experimental"
            ],
            [
                "GraphReader",
                "org.jgrapht.experimental"
            ],
            [
                "DirectedAcyclicGraph",
                "org.jgrapht.experimental.dag"
            ],
            [
                "GraphSquare",
                "org.jgrapht.experimental"
            ],
            [
                "UniformRandomGraphGenerator",
                "org.jgrapht.experimental"
            ],
            [
                "GraphTests",
                "org.jgrapht.experimental"
            ],
            [
                "ApproximationAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "BrownBacktrackColoring",
                "org.jgrapht.experimental.alg.color"
            ],
            [
                "GreedyColoring",
                "org.jgrapht.experimental.alg.color"
            ],
            [
                "IntArrayGraphAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "ExactAlgorithm",
                "org.jgrapht.experimental.alg"
            ],
            [
                "ListenableGraph",
                "org.jgrapht"
            ],
            [
                "ModifiableInteger",
                "org.jgrapht.util"
            ],
            [
                "FibonacciHeapNode",
                "org.jgrapht.util"
            ],
            [
                "WeightCombiner",
                "org.jgrapht.util"
            ],
            [
                "FibonacciHeap",
                "org.jgrapht.util"
            ],
            [
                "TypeUtil",
                "org.jgrapht.util"
            ],
            [
                "ArrayUnenforcedSet",
                "org.jgrapht.util"
            ],
            [
                "VertexPair",
                "org.jgrapht.util"
            ],
            [
                "MathUtil",
                "org.jgrapht.util"
            ],
            [
                "PrefetchIterator",
                "org.jgrapht.util"
            ],
            [
                "VertexFactory",
                "org.jgrapht"
            ],
            [
                "Graph",
                "org.jgrapht"
            ],
            [
                "GraphPath",
                "org.jgrapht"
            ],
            [
                "UndirectedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "SimpleGraph",
                "org.jgrapht.graph"
            ],
            [
                "MixedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "DefaultGraphMapping",
                "org.jgrapht.graph"
            ],
            [
                "WeightedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedMaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "MaskEdgeSet",
                "org.jgrapht.graph"
            ],
            [
                "Pseudograph",
                "org.jgrapht.graph"
            ],
            [
                "MaskFunctor",
                "org.jgrapht.graph"
            ],
            [
                "GraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "DirectedMaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "AbstractBaseGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "Multigraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultWeightedEdge",
                "org.jgrapht.graph"
            ],
            [
                "ListenableDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedGraphUnion",
                "org.jgrapht.graph"
            ],
            [
                "AsUnweightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "EdgeSetFactory",
                "org.jgrapht.graph"
            ],
            [
                "GraphDelegator",
                "org.jgrapht.graph"
            ],
            [
                "DefaultListenableGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "ClassBasedVertexFactory",
                "org.jgrapht.graph"
            ],
            [
                "DefaultEdge",
                "org.jgrapht.graph"
            ],
            [
                "MaskVertexSet",
                "org.jgrapht.graph"
            ],
            [
                "ListenableUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "ListenableUndirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsUnweightedDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DefaultDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "IntrusiveEdge",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableGraph",
                "org.jgrapht.graph"
            ],
            [
                "GraphPathImpl",
                "org.jgrapht.graph"
            ],
            [
                "Subgraph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedWeightedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedPseudograph",
                "org.jgrapht.graph"
            ],
            [
                "AbstractGraph",
                "org.jgrapht.graph"
            ],
            [
                "MaskSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "ClassBasedEdgeFactory",
                "org.jgrapht.graph"
            ],
            [
                "SimpleWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsWeightedDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleDirectedWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableUndirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UndirectedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "WeightedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "EdgeReversedGraph",
                "org.jgrapht.graph"
            ],
            [
                "AsWeightedGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedWeightedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "UndirectedWeightedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedWeightedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "AbstractGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedWeightedGraphBuilder",
                "org.jgrapht.graph.builder"
            ],
            [
                "DirectedGraphBuilderBase",
                "org.jgrapht.graph.builder"
            ],
            [
                "ListenableDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "UnmodifiableDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleGraphPath",
                "org.jgrapht.graph"
            ],
            [
                "ParanoidGraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedWeightedMultigraph",
                "org.jgrapht.graph"
            ],
            [
                "DirectedSubgraph",
                "org.jgrapht.graph"
            ],
            [
                "SimpleDirectedGraph",
                "org.jgrapht.graph"
            ],
            [
                "GraphHelper",
                "org.jgrapht"
            ],
            [
                "Graphs",
                "org.jgrapht"
            ],
            [
                "DirectedGraph",
                "org.jgrapht"
            ],
            [
                "WeightedGraph",
                "org.jgrapht"
            ],
            [
                "HyperCubeGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "RingGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "SimpleWeightedGraphMatrixGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WeightedGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WheelGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "GridGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "ScaleFreeGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "SimpleWeightedBipartiteGraphMatrixGenerator",
                "org.jgrapht.generate"
            ],
            [
                "LinearGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "CompleteGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "RandomGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "WeightedGraphGeneratorAdapter",
                "org.jgrapht.generate"
            ],
            [
                "EmptyGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "CompleteBipartiteGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "GraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "StarGraphGenerator",
                "org.jgrapht.generate"
            ],
            [
                "UndirectedGraph",
                "org.jgrapht"
            ],
            [
                "TopologicalOrderIterator",
                "org.jgrapht.traverse"
            ],
            [
                "CrossComponentIterator",
                "org.jgrapht.traverse"
            ],
            [
                "AbstractGraphIterator",
                "org.jgrapht.traverse"
            ],
            [
                "ClosestFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "BreadthFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "DepthFirstIterator",
                "org.jgrapht.traverse"
            ],
            [
                "GraphIterator",
                "org.jgrapht.traverse"
            ],
            [
                "EdgeFactory",
                "org.jgrapht"
            ],
            [
                "GraphMapping",
                "org.jgrapht"
            ],
            [
                "VertexSetListener",
                "org.jgrapht.event"
            ],
            [
                "EdgeTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "TraversalListener",
                "org.jgrapht.event"
            ],
            [
                "GraphEdgeChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "VertexTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphListener",
                "org.jgrapht.event"
            ],
            [
                "TraversalListenerAdapter",
                "org.jgrapht.event"
            ],
            [
                "ConnectedComponentTraversalEvent",
                "org.jgrapht.event"
            ],
            [
                "GraphVertexChangeEvent",
                "org.jgrapht.event"
            ],
            [
                "TarjanLowestCommonAncestor",
                "org.jgrapht.alg"
            ],
            [
                "PrimMinimumSpanningTree",
                "org.jgrapht.alg"
            ],
            [
                "BlockCutpointGraph",
                "org.jgrapht.alg"
            ],
            [
                "AllDirectedPaths",
                "org.jgrapht.alg"
            ],
            [
                "KShortestPathsIterator",
                "org.jgrapht.alg"
            ],
            [
                "KruskalMinimumSpanningTree",
                "org.jgrapht.alg"
            ],
            [
                "StrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "VF2State",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphIsomorphismState",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2AbstractIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphIsomorphismState",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "IsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "GraphOrdering",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphMappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "IsomorphicGraphMapping",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2GraphIsomorphismInspector",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2SubgraphMappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "VF2MappingIterator",
                "org.jgrapht.alg.isomorphism"
            ],
            [
                "BronKerboschCliqueFinder",
                "org.jgrapht.alg"
            ],
            [
                "ChromaticNumber",
                "org.jgrapht.alg"
            ],
            [
                "KosarajuStrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "DijkstraShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "RankingPathElement",
                "org.jgrapht.alg"
            ],
            [
                "AStarShortestPath",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsKarpMaximumFlow",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordPathElement",
                "org.jgrapht.alg"
            ],
            [
                "FloydWarshallShortestPaths",
                "org.jgrapht.alg"
            ],
            [
                "UnionFind",
                "org.jgrapht.alg.util"
            ],
            [
                "AlwaysEqualComparator",
                "org.jgrapht.alg.util"
            ],
            [
                "Extension",
                "org.jgrapht.alg.util"
            ],
            [
                "VertexDegreeComparator",
                "org.jgrapht.alg.util"
            ],
            [
                "Pair",
                "org.jgrapht.alg.util"
            ],
            [
                "GabowStrongConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "HawickJamesSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "DirectedSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "JohnsonSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "TiernanSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "UndirectedCycleBase",
                "org.jgrapht.alg.cycle"
            ],
            [
                "PatonCycleBase",
                "org.jgrapht.alg.cycle"
            ],
            [
                "TarjanSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "SzwarcfiterLauerSimpleCycles",
                "org.jgrapht.alg.cycle"
            ],
            [
                "BiconnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "ConnectivityInspector",
                "org.jgrapht.alg"
            ],
            [
                "MinSourceSinkCut",
                "org.jgrapht.alg"
            ],
            [
                "RankingPathElementList",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsBlossomShrinking",
                "org.jgrapht.alg"
            ],
            [
                "TransitiveClosure",
                "org.jgrapht.alg"
            ],
            [
                "HopcroftKarpBipartiteMatching",
                "org.jgrapht.alg"
            ],
            [
                "StoerWagnerMinimumCut",
                "org.jgrapht.alg"
            ],
            [
                "AbstractPathElementList",
                "org.jgrapht.alg"
            ],
            [
                "KuhnMunkresMinimalWeightBipartitePerfectMatching",
                "org.jgrapht.alg"
            ],
            [
                "TransitiveReduction",
                "org.jgrapht.alg"
            ],
            [
                "EulerianCircuit",
                "org.jgrapht.alg"
            ],
            [
                "DirectedNeighborIndex",
                "org.jgrapht.alg"
            ],
            [
                "NaiveLcaFinder",
                "org.jgrapht.alg"
            ],
            [
                "MaximumWeightBipartiteMatching",
                "org.jgrapht.alg"
            ],
            [
                "HamiltonianCycle",
                "org.jgrapht.alg"
            ],
            [
                "KShortestPaths",
                "org.jgrapht.alg"
            ],
            [
                "NeighborIndex",
                "org.jgrapht.alg"
            ],
            [
                "VertexCovers",
                "org.jgrapht.alg"
            ],
            [
                "CycleDetector",
                "org.jgrapht.alg"
            ],
            [
                "AStarAdmissibleHeuristic",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MinimumSpanningTree",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "WeightedMatchingAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "StrongConnectivityAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MaximumFlowAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "MatchingAlgorithm",
                "org.jgrapht.alg.interfaces"
            ],
            [
                "CliqueMinimalSeparatorDecomposition",
                "org.jgrapht.alg"
            ],
            [
                "BellmanFordIterator",
                "org.jgrapht.alg"
            ],
            [
                "AbstractPathElement",
                "org.jgrapht.alg"
            ],
            [
                "EdmondsKarpMaximumFlow",
                "org.jgrapht.alg.flow"
            ],
            [
                "PushRelabelMaximumFlow",
                "org.jgrapht.alg.flow"
            ],
            [
                "MaximumFlowAlgorithmBase",
                "org.jgrapht.alg.flow"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "addVertices",
                "org.jgrapht.experimental",
                "RandomGraphHelper",
                "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)"
            ],
            [
                "isEmpty",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isEmpty(Graph<V, E> g)"
            ],
            [
                "isComplete",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isComplete(Graph<V, E> g)"
            ],
            [
                "isConnected",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isConnected(Graph<V, E> g)"
            ],
            [
                "isTree",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isTree(Graph<V, E> g)"
            ],
            [
                "isBipartite",
                "org.jgrapht.experimental",
                "GraphTests",
                "public static <V, E> boolean isBipartite(Graph<V, E> g)"
            ],
            [
                "union",
                "org.jgrapht.util",
                "FibonacciHeap",
                "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)"
            ],
            [
                "uncheckedCast",
                "org.jgrapht.util",
                "TypeUtil",
                "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)"
            ],
            [
                "factorial",
                "org.jgrapht.util",
                "MathUtil",
                "public static long factorial(int N)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleGraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleGraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedPseudograph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedPseudograph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Pseudograph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Pseudograph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedMultigraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedMultigraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedPseudograph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedPseudograph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Multigraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "Multigraph",
                "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DefaultDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedPseudograph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedPseudograph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleWeightedGraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleWeightedGraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedWeightedGraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedMultigraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "WeightedMultigraph",
                "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedMultigraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "DirectedWeightedMultigraph",
                "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
            ],
            [
                "builder",
                "org.jgrapht.graph",
                "SimpleDirectedGraph",
                "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
            ],
            [
                "addEdge",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)"
            ],
            [
                "addEdgeWithVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
            ],
            [
                "addGraph",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)"
            ],
            [
                "addAllEdges",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)"
            ],
            [
                "addAllVertices",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)"
            ],
            [
                "neighborListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)"
            ],
            [
                "predecessorListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)"
            ],
            [
                "successorListOf",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)"
            ],
            [
                "undirectedGraph",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)"
            ],
            [
                "testIncidence",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)"
            ],
            [
                "getOppositeVertex",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)"
            ],
            [
                "getPathVertexList",
                "org.jgrapht",
                "Graphs",
                "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)"
            ],
            [
                "range",
                "org.jgrapht.generate",
                "SimpleWeightedGraphMatrixGenerator",
                "public static int[] range(final int from, final int to)"
            ],
            [
                "createGraphSpecifics",
                "org.jgrapht.traverse",
                "CrossComponentIterator",
                "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)"
            ],
            [
                "findGreedyChromaticNumber",
                "org.jgrapht.alg",
                "ChromaticNumber",
                "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)"
            ],
            [
                "findGreedyColoredGroups",
                "org.jgrapht.alg",
                "ChromaticNumber",
                "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)"
            ],
            [
                "findPathBetween",
                "org.jgrapht.alg",
                "BellmanFordShortestPath",
                "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
            ],
            [
                "findPathBetween",
                "org.jgrapht.alg",
                "DijkstraShortestPath",
                "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
            ],
            [
                "of",
                "org.jgrapht.alg.util",
                "Pair",
                "public static <A, B> Pair<A, B> of(A a, B b)"
            ],
            [
                "isEulerian",
                "org.jgrapht.alg",
                "EulerianCircuit",
                "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)"
            ],
            [
                "getEulerianCircuitVertices",
                "org.jgrapht.alg",
                "EulerianCircuit",
                "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)"
            ],
            [
                "getApproximateOptimalForCompleteGraph",
                "org.jgrapht.alg",
                "HamiltonianCycle",
                "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)"
            ],
            [
                "find2ApproximationCover",
                "org.jgrapht.alg",
                "VertexCovers",
                "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)"
            ],
            [
                "findGreedyCover",
                "org.jgrapht.alg",
                "VertexCovers",
                "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "BEST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int BEST_ORDER = 0;"
            ],
            [
                "NATURAL_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int NATURAL_ORDER = 1;"
            ],
            [
                "SMALLEST_DEGREE_LAST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;"
            ],
            [
                "LARGEST_SATURATION_FIRST_ORDER",
                "org.jgrapht.experimental.alg.color",
                "GreedyColoring",
                "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;"
            ],
            [
                "DEFAULT_EDGE_WEIGHT",
                "org.jgrapht",
                "WeightedGraph",
                "public static double DEFAULT_EDGE_WEIGHT = 1.0;"
            ],
            [
                "HUB_VERTEX",
                "org.jgrapht.generate",
                "WheelGraphGenerator",
                "public static final String HUB_VERTEX = \"Hub Vertex\";"
            ],
            [
                "CORNER_VERTEX",
                "org.jgrapht.generate",
                "GridGraphGenerator",
                "public static final String CORNER_VERTEX = \"Corner Vertex\";"
            ],
            [
                "START_VERTEX",
                "org.jgrapht.generate",
                "LinearGraphGenerator",
                "public static final String START_VERTEX = \"Start Vertex\";"
            ],
            [
                "END_VERTEX",
                "org.jgrapht.generate",
                "LinearGraphGenerator",
                "public static final String END_VERTEX = \"End Vertex\";"
            ],
            [
                "CENTER_VERTEX",
                "org.jgrapht.generate",
                "StarGraphGenerator",
                "public static final String CENTER_VERTEX = \"Center Vertex\";"
            ],
            [
                "SENTINEL",
                "org.jgrapht.traverse",
                "DepthFirstIterator",
                "public static final Object SENTINEL = new Object();"
            ],
            [
                "BEFORE_EDGE_ADDED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int BEFORE_EDGE_ADDED = 21;"
            ],
            [
                "BEFORE_EDGE_REMOVED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int BEFORE_EDGE_REMOVED = 22;"
            ],
            [
                "EDGE_ADDED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int EDGE_ADDED = 23;"
            ],
            [
                "EDGE_REMOVED",
                "org.jgrapht.event",
                "GraphEdgeChangeEvent",
                "public static final int EDGE_REMOVED = 24;"
            ],
            [
                "CONNECTED_COMPONENT_STARTED",
                "org.jgrapht.event",
                "ConnectedComponentTraversalEvent",
                "public static final int CONNECTED_COMPONENT_STARTED = 31;"
            ],
            [
                "CONNECTED_COMPONENT_FINISHED",
                "org.jgrapht.event",
                "ConnectedComponentTraversalEvent",
                "public static final int CONNECTED_COMPONENT_FINISHED = 32;"
            ],
            [
                "BEFORE_VERTEX_ADDED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int BEFORE_VERTEX_ADDED = 11;"
            ],
            [
                "BEFORE_VERTEX_REMOVED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int BEFORE_VERTEX_REMOVED = 12;"
            ],
            [
                "VERTEX_ADDED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int VERTEX_ADDED = 13;"
            ],
            [
                "VERTEX_REMOVED",
                "org.jgrapht.event",
                "GraphVertexChangeEvent",
                "public static final int VERTEX_REMOVED = 14;"
            ],
            [
                "NULL_NODE",
                "org.jgrapht.alg.isomorphism",
                "VF2State",
                "public static final int NULL_NODE = -1;"
            ],
            [
                "DEBUG",
                "org.jgrapht.alg.isomorphism",
                "VF2State",
                "protected static final boolean DEBUG = false;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.jgrapht.alg",
                "EdmondsKarpMaximumFlow",
                "public static final double DEFAULT_EPSILON = 0.000000001;"
            ],
            [
                "INSTANCE",
                "org.jgrapht.alg",
                "TransitiveClosure",
                "public static final TransitiveClosure INSTANCE = new TransitiveClosure();"
            ],
            [
                "INSTANCE",
                "org.jgrapht.alg",
                "TransitiveReduction",
                "public static final TransitiveReduction INSTANCE = new TransitiveReduction();"
            ],
            [
                "NEGATIVE_UNDIRECTED_EDGE",
                "org.jgrapht.alg",
                "BellmanFordIterator",
                "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";"
            ],
            [
                "DEFAULT_EPSILON",
                "org.jgrapht.alg.flow",
                "MaximumFlowAlgorithmBase",
                "public static final double DEFAULT_EPSILON = 1e-9;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "v",
                "",
                "V"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEdgeFactory",
                "org.jgrapht.graph",
                "Subgraph",
                "public EdgeFactory<V, E> getEdgeFactory()"
            ],
            [
                "equals",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean equals(Object arg0)"
            ],
            [
                "containsEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean containsEdge(E e)"
            ],
            [
                "edgeSet",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> edgeSet()"
            ],
            [
                "removeEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E removeEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "addEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E addEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "edgesOf",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> edgesOf(V vertex)"
            ],
            [
                "containsVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean containsVertex(V v)"
            ],
            [
                "containsEdge",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean containsEdge(V arg0, V arg1)"
            ],
            [
                "toString",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public String toString()"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean removeAllEdges(Collection<? extends E> arg0)"
            ],
            [
                "assertVertexExist",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected boolean assertVertexExist(V arg0)"
            ],
            [
                "getEdgeWeight",
                "org.jgrapht.graph",
                "Subgraph",
                "public double getEdgeWeight(E e)"
            ],
            [
                "getEdgeSource",
                "org.jgrapht.graph",
                "Subgraph",
                "public V getEdgeSource(E e)"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected boolean removeAllEdges(E[] arg0)"
            ],
            [
                "getEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public E getEdge(V sourceVertex, V targetVertex)"
            ],
            [
                "hashCode",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public int hashCode()"
            ],
            [
                "toStringFromSets",
                "org.jgrapht.graph",
                "AbstractGraph",
                "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)"
            ],
            [
                "addEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean addEdge(V sourceVertex, V targetVertex, E e)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "removeAllEdges",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public Set<E> removeAllEdges(V arg0, V arg1)"
            ],
            [
                "addVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean addVertex(V v)"
            ],
            [
                "getAllEdges",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<E> getAllEdges(V sourceVertex, V targetVertex)"
            ],
            [
                "getBase",
                "org.jgrapht.graph",
                "Subgraph",
                "public G getBase()"
            ],
            [
                "removeAllVertices",
                "org.jgrapht.graph",
                "AbstractGraph",
                "public boolean removeAllVertices(Collection<? extends V> arg0)"
            ],
            [
                "vertexSet",
                "org.jgrapht.graph",
                "Subgraph",
                "public Set<V> vertexSet()"
            ],
            [
                "removeEdge",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean removeEdge(E e)"
            ],
            [
                "getEdgeTarget",
                "org.jgrapht.graph",
                "Subgraph",
                "public V getEdgeTarget(E e)"
            ],
            [
                "removeVertex",
                "org.jgrapht.graph",
                "Subgraph",
                "public boolean removeVertex(V v)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "edgeSet",
                "org.jgrapht.graph",
                "Subgraph",
                "Set<E> edgeSet = new LinkedHashSet<E>();"
            ],
            [
                "vertexSet",
                "org.jgrapht.graph",
                "Subgraph",
                "Set<V> vertexSet = new LinkedHashSet<V>();"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]