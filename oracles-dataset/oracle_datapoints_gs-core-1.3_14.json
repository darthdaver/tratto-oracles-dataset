[
    {
        "id": 3987,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.stream.netstream.packing",
        "className": "NetStreamPacker",
        "javadocTag": "@return a ByteBuffer that is the packed version of the input one. It may not have the same size.",
        "methodJavadoc": "    /**\n\t * Pack the given ByteBuffer form its position to its capacity.\n\t * @param buffer The buffer to pack/encode\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */",
        "methodSourceCode": "public ByteBuffer packMessage(ByteBuffer buffer){\n    return this.packMessage(buffer, 0, buffer.capacity());\n}",
        "classJavadoc": "/**\n * \n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream.netstream.packing;\n\nimport java.nio.ByteBuffer;\n\n/**\n * \n */\npublic abstract class NetStreamPacker {\n\n\t/**\n\t * Pack the given ByteBuffer from startIndex to endIdex \n\t * @param buffer The buffer to pack/encode\n\t * @param startIndex the index at which the encoding starts in the buffer\n\t * @param endIndex the index at which the encoding stops\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */\n\tpublic abstract ByteBuffer packMessage(ByteBuffer buffer, int startIndex, int endIndex);\n\n\t/**\n\t * Pack the given ByteBuffer form its position to its capacity.\n\t * @param buffer The buffer to pack/encode\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */\n\tpublic ByteBuffer packMessage(ByteBuffer buffer){\n\t\treturn this.packMessage(buffer, 0, buffer.capacity());\n\t}\n\n\t/**\n\t * @param capacity\n\t * @return\n\t */\n\tpublic abstract ByteBuffer packMessageSize(int capacity) ;\n\t\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "buffer",
                "java.nio",
                "ByteBuffer"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "packMessage",
                "org.graphstream.stream.netstream.packing",
                "NetStreamPacker",
                "/**\n * Pack the given ByteBuffer from startIndex to endIdex\n * @param buffer The buffer to pack/encode\n * @param startIndex the index at which the encoding starts in the buffer\n * @param endIndex the index at which the encoding stops\n * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n */\npublic abstract ByteBuffer packMessage(ByteBuffer buffer, int startIndex, int endIndex);"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "packMessage",
                "org.graphstream.stream.netstream.packing",
                "NetStreamPacker",
                "/**\n * Pack the given ByteBuffer form its position to its capacity.\n * @param buffer The buffer to pack/encode\n * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n */\npublic ByteBuffer packMessage(ByteBuffer buffer) {\n    return this.packMessage(buffer, 0, buffer.capacity());\n}"
            ],
            [
                "packMessageSize",
                "org.graphstream.stream.netstream.packing",
                "NetStreamPacker",
                "/**\n * @param capacity\n * @return\n */\npublic abstract ByteBuffer packMessageSize(int capacity);"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer put(int arg0, byte[] arg1)"
            ],
            [
                "getShort",
                "java.nio",
                "ByteBuffer",
                "public abstract short getShort()"
            ],
            [
                "asCharBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract CharBuffer asCharBuffer()"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer get(int arg0, byte[] arg1, int arg2, int arg3)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public final ByteBuffer put(byte[] arg0)"
            ],
            [
                "getChar",
                "java.nio",
                "ByteBuffer",
                "public abstract char getChar()"
            ],
            [
                "rewind",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer rewind()"
            ],
            [
                "putChar",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putChar(char arg0)"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer get(int arg0, byte[] arg1)"
            ],
            [
                "hashCode",
                "java.nio",
                "ByteBuffer",
                "public int hashCode()"
            ],
            [
                "putInt",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putInt(int arg0, int arg1)"
            ],
            [
                "flip",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer flip()"
            ],
            [
                "limit",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer limit(int arg0)"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer get(byte[] arg0, int arg1, int arg2)"
            ],
            [
                "putInt",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putInt(int arg0)"
            ],
            [
                "compareTo",
                "java.nio",
                "ByteBuffer",
                "public int compareTo(ByteBuffer arg0)"
            ],
            [
                "getShort",
                "java.nio",
                "ByteBuffer",
                "public abstract short getShort(int arg0)"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public abstract byte get()"
            ],
            [
                "getChar",
                "java.nio",
                "ByteBuffer",
                "public abstract char getChar(int arg0)"
            ],
            [
                "getLong",
                "java.nio",
                "ByteBuffer",
                "public abstract long getLong(int arg0)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer put(int arg0, byte arg1)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer put(int arg0, byte[] arg1, int arg2, int arg3)"
            ],
            [
                "getDouble",
                "java.nio",
                "ByteBuffer",
                "public abstract double getDouble()"
            ],
            [
                "isDirect",
                "java.nio",
                "ByteBuffer",
                "public abstract boolean isDirect()"
            ],
            [
                "getDouble",
                "java.nio",
                "ByteBuffer",
                "public abstract double getDouble(int arg0)"
            ],
            [
                "base",
                "java.nio",
                "ByteBuffer",
                "Object base()"
            ],
            [
                "array",
                "java.nio",
                "ByteBuffer",
                "public final byte[] array()"
            ],
            [
                "getInt",
                "java.nio",
                "ByteBuffer",
                "public abstract int getInt(int arg0)"
            ],
            [
                "asShortBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract ShortBuffer asShortBuffer()"
            ],
            [
                "putShort",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putShort(short arg0)"
            ],
            [
                "putShort",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putShort(int arg0, short arg1)"
            ],
            [
                "getFloat",
                "java.nio",
                "ByteBuffer",
                "public abstract float getFloat(int arg0)"
            ],
            [
                "slice",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer slice()"
            ],
            [
                "order",
                "java.nio",
                "ByteBuffer",
                "public final ByteBuffer order(ByteOrder arg0)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer put(ByteBuffer arg0)"
            ],
            [
                "putLong",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putLong(long arg0)"
            ],
            [
                "alignmentOffset",
                "java.nio",
                "ByteBuffer",
                "public final int alignmentOffset(int arg0, int arg1)"
            ],
            [
                "putDouble",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putDouble(double arg0)"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public abstract byte get(int arg0)"
            ],
            [
                "getInt",
                "java.nio",
                "ByteBuffer",
                "public abstract int getInt()"
            ],
            [
                "alignedSlice",
                "java.nio",
                "ByteBuffer",
                "public final ByteBuffer alignedSlice(int arg0)"
            ],
            [
                "equals",
                "java.nio",
                "ByteBuffer",
                "public boolean equals(Object arg0)"
            ],
            [
                "compact",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer compact()"
            ],
            [
                "putChar",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putChar(int arg0, char arg1)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer put(int arg0, ByteBuffer arg1, int arg2, int arg3)"
            ],
            [
                "mismatch",
                "java.nio",
                "ByteBuffer",
                "public int mismatch(ByteBuffer arg0)"
            ],
            [
                "getLong",
                "java.nio",
                "ByteBuffer",
                "public abstract long getLong()"
            ],
            [
                "clear",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer clear()"
            ],
            [
                "reset",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer reset()"
            ],
            [
                "duplicate",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer duplicate()"
            ],
            [
                "toString",
                "java.nio",
                "ByteBuffer",
                "public String toString()"
            ],
            [
                "putLong",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putLong(int arg0, long arg1)"
            ],
            [
                "asIntBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract IntBuffer asIntBuffer()"
            ],
            [
                "position",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer position(int arg0)"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer put(byte[] arg0, int arg1, int arg2)"
            ],
            [
                "asDoubleBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract DoubleBuffer asDoubleBuffer()"
            ],
            [
                "put",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer put(byte arg0)"
            ],
            [
                "asLongBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract LongBuffer asLongBuffer()"
            ],
            [
                "mark",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer mark()"
            ],
            [
                "order",
                "java.nio",
                "ByteBuffer",
                "public final ByteOrder order()"
            ],
            [
                "slice",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer slice(int arg0, int arg1)"
            ],
            [
                "putFloat",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putFloat(int arg0, float arg1)"
            ],
            [
                "arrayOffset",
                "java.nio",
                "ByteBuffer",
                "public final int arrayOffset()"
            ],
            [
                "hasArray",
                "java.nio",
                "ByteBuffer",
                "public final boolean hasArray()"
            ],
            [
                "getFloat",
                "java.nio",
                "ByteBuffer",
                "public abstract float getFloat()"
            ],
            [
                "putDouble",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putDouble(int arg0, double arg1)"
            ],
            [
                "asReadOnlyBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer asReadOnlyBuffer()"
            ],
            [
                "get",
                "java.nio",
                "ByteBuffer",
                "public ByteBuffer get(byte[] arg0)"
            ],
            [
                "putFloat",
                "java.nio",
                "ByteBuffer",
                "public abstract ByteBuffer putFloat(float arg0)"
            ],
            [
                "asFloatBuffer",
                "java.nio",
                "ByteBuffer",
                "public abstract FloatBuffer asFloatBuffer()"
            ],
            [
                "rewind",
                "java.nio",
                "Buffer",
                "public Buffer rewind()"
            ],
            [
                "slice",
                "java.nio",
                "Buffer",
                "public abstract Buffer slice()"
            ],
            [
                "duplicate",
                "java.nio",
                "Buffer",
                "public abstract Buffer duplicate()"
            ],
            [
                "remaining",
                "java.nio",
                "Buffer",
                "public final int remaining()"
            ],
            [
                "clear",
                "java.nio",
                "Buffer",
                "public Buffer clear()"
            ],
            [
                "position",
                "java.nio",
                "Buffer",
                "public final int position()"
            ],
            [
                "checkIndex",
                "java.nio",
                "Buffer",
                "final int checkIndex(int arg0)"
            ],
            [
                "hasRemaining",
                "java.nio",
                "Buffer",
                "public final boolean hasRemaining()"
            ],
            [
                "arrayOffset",
                "java.nio",
                "Buffer",
                "public abstract int arrayOffset()"
            ],
            [
                "isDirect",
                "java.nio",
                "Buffer",
                "public abstract boolean isDirect()"
            ],
            [
                "scope",
                "java.nio",
                "Buffer",
                "final ScopedMemoryAccess.Scope scope()"
            ],
            [
                "isReadOnly",
                "java.nio",
                "Buffer",
                "public abstract boolean isReadOnly()"
            ],
            [
                "nextPutIndex",
                "java.nio",
                "Buffer",
                "final int nextPutIndex(int arg0)"
            ],
            [
                "flip",
                "java.nio",
                "Buffer",
                "public Buffer flip()"
            ],
            [
                "limit",
                "java.nio",
                "Buffer",
                "public Buffer limit(int arg0)"
            ],
            [
                "mark",
                "java.nio",
                "Buffer",
                "public Buffer mark()"
            ],
            [
                "capacity",
                "java.nio",
                "Buffer",
                "public final int capacity()"
            ],
            [
                "nextPutIndex",
                "java.nio",
                "Buffer",
                "final int nextPutIndex()"
            ],
            [
                "nextGetIndex",
                "java.nio",
                "Buffer",
                "final int nextGetIndex(int arg0)"
            ],
            [
                "slice",
                "java.nio",
                "Buffer",
                "public abstract Buffer slice(int arg0, int arg1)"
            ],
            [
                "markValue",
                "java.nio",
                "Buffer",
                "final int markValue()"
            ],
            [
                "position",
                "java.nio",
                "Buffer",
                "public Buffer position(int arg0)"
            ],
            [
                "reset",
                "java.nio",
                "Buffer",
                "public Buffer reset()"
            ],
            [
                "hasArray",
                "java.nio",
                "Buffer",
                "public abstract boolean hasArray()"
            ],
            [
                "limit",
                "java.nio",
                "Buffer",
                "public final int limit()"
            ],
            [
                "checkIndex",
                "java.nio",
                "Buffer",
                "final int checkIndex(int arg0, int arg1)"
            ],
            [
                "array",
                "java.nio",
                "Buffer",
                "public abstract Object array()"
            ],
            [
                "nextGetIndex",
                "java.nio",
                "Buffer",
                "final int nextGetIndex()"
            ],
            [
                "base",
                "java.nio",
                "Buffer",
                "abstract Object base()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "hb",
                "java.nio",
                "ByteBuffer",
                "final byte[] hb;"
            ],
            [
                "offset",
                "java.nio",
                "ByteBuffer",
                "final int offset;"
            ],
            [
                "isReadOnly",
                "java.nio",
                "ByteBuffer",
                "boolean isReadOnly;"
            ],
            [
                "bigEndian",
                "java.nio",
                "ByteBuffer",
                "boolean bigEndian;"
            ],
            [
                "nativeByteOrder",
                "java.nio",
                "ByteBuffer",
                "boolean nativeByteOrder;"
            ],
            [
                "address",
                "java.nio",
                "Buffer",
                "long address;"
            ],
            [
                "segment",
                "java.nio",
                "Buffer",
                "final MemorySegmentProxy segment;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4014,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Element",
        "javadocTag": "@param key The name of the vector.",
        "methodJavadoc": "    /**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */",
        "methodSourceCode": "boolean hasVector(String key);",
        "classJavadoc": "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the array of objects bound to key. Arrays of objects are special\n * attributes whose value is a sequence of objects. If an attribute with the\n * same name exists but is not an array, null is returned.\n *\n * @param key\n *            The name of the array to search.\n * @return The array of objects or null if not found.\n */\nObject[] getArray(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String, Class)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param clazz\n *            The class the attribute must be instance of.\n * @param keys\n *            Several string naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n<T> T getFirstAttributeOf(Class<T> clazz, String... keys);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "/**\n * An iterable view on the set of attribute keys usable within a for-each\n * loop.\n *\n * @return an iterable view on attribute keys.\n */\nIterable<String> getEachAttributeKey();"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the vector of number bound to key. Vectors of numbers are special\n * attributes whose value is a sequence of numbers. If an attribute with the\n * same name exists but is not a vector of number, null is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The vector of numbers or null if not found.\n */\nArrayList<? extends Number> getVector(String key);"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store an array value for the given key? A vector is an\n * attribute whose value is an array of objects.\n *\n * @param key\n *            The name of the array.\n * @return True if a value is present for this attribute and can contain an\n *         array object.\n */\nboolean hasArray(String key);"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the label string bound to the given key key. Labels are special\n * attributes whose value is a character sequence. If an attribute with the\n * same name exists but is not a character sequence, null is returned.\n *\n * @param key\n *            The label to search.\n * @return The label string value or null if not found.\n */\nCharSequence getLabel(String key);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key if it is an instance of\n * the given class. Some The returned value maybe null to indicate the\n * attribute does not exists or is not an instance of the given class.\n *\n * @param key\n *            The attribute name to search.\n * @param clazz\n *            The expected attribute class.\n * @return The object bound to the given key or null if no object match this\n *         attribute.\n */\n// Object getAttribute( String key, Class<?> clazz );\n<T> T getAttribute(String key, Class<T> clazz);"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "/**\n * Number of attributes stored in this element.\n *\n * @return the number of attributes.\n */\nint getAttributeCount();"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key. The returned value may\n * be null to indicate the attribute does not exists or is not supported.\n *\n * @param key\n *            Name of the attribute to search.\n * @return The object bound to the given key or null if no object match this\n *         attribute name.\n */\n// Object getAttribute( String key );\n<T> T getAttribute(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param keys\n *            Several strings naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( String... keys );\n<T> T getFirstAttributeOf(String... keys);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "/**\n * Unique identifier of this element.\n *\n * @return The identifier value.\n */\nString getId();"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the number bound to key. Numbers are special attributes whose value\n * is an instance of Number. If an attribute with the same name exists but\n * is not a Number, NaN is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The number value or NaN if not found.\n */\ndouble getNumber(String key);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key and this\n * value is an instance of the given class?\n *\n * @param key\n *            The name of the attribute to search.\n * @param clazz\n *            The expected class of the attribute value.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key, Class<?> clazz);"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "/**\n * Iterator on all attributes keys.\n *\n * @return An iterator on the key set of attributes.\n */\nIterator<String> getAttributeKeyIterator();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a hash value for the given key? A hash is a set\n * of pairs (key,value) or objects that implement the\n * {@link org.graphstream.graph.CompoundAttribute} class.\n *\n * @param key\n *            The name of the hash.\n * @return True if a value is present for this attribute and can contain a\n *         hash.\n */\nboolean hasHash(String key);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a label value for the given key? A label is an\n * attribute whose value is a string.\n *\n * @param key\n *            The name of the label.\n * @return True if a value is present for this attribute and implements\n *         CharSequence.\n */\nboolean hasLabel(String key);"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a vector value for the given key? A vector is an\n * attribute whose value is a sequence of numbers.\n *\n * @param key\n *            The name of the vector.\n * @return True if a value is present for this attribute and can contain a\n *         sequence of numbers.\n */\nboolean hasVector(String key);"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a number for the given key? A number is an\n * attribute whose value is an instance of Number.\n *\n * @param key\n *            The name of the number.\n * @return True if a value is present for this attribute and can contain a\n *         double (inherits from Number).\n */\nboolean hasNumber(String key);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key?\n *\n * @param key\n *            The name of the attribute to search.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key);"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the hash bound to key. Hashes are special attributes whose value is a\n * set of pairs (name,object). Instances of object implementing the\n * {@link CompoundAttribute} interface are considered like hashes since they\n * can be transformed to a hash. If an attribute with the same name exists\n * but is not a hash, null is returned. We cannot enforce the type of the\n * key. It is considered a string and you should use \"Object.toString()\" to\n * get it.\n *\n * @param key\n *            The name of the hash to search.\n * @return The hash or null if not found.\n */\nHashMap<?, ?> getHash(String key);"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "/**\n * The current index of this element\n *\n * @return The index value\n */\nint getIndex();"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "/**\n * An unmodifiable view on the set of attribute keys.\n *\n * @return an unmodifiable collection containing the attribute keys.\n */\nCollection<String> getAttributeKeySet();"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4016,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Element",
        "javadocTag": "@param key The name of the array.",
        "methodJavadoc": "    /**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */",
        "methodSourceCode": "boolean hasArray(String key);",
        "classJavadoc": "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the label string bound to the given key key. Labels are special\n * attributes whose value is a character sequence. If an attribute with the\n * same name exists but is not a character sequence, null is returned.\n *\n * @param key\n *            The label to search.\n * @return The label string value or null if not found.\n */\nCharSequence getLabel(String key);"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a number for the given key? A number is an\n * attribute whose value is an instance of Number.\n *\n * @param key\n *            The name of the number.\n * @return True if a value is present for this attribute and can contain a\n *         double (inherits from Number).\n */\nboolean hasNumber(String key);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "/**\n * Unique identifier of this element.\n *\n * @return The identifier value.\n */\nString getId();"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store an array value for the given key? A vector is an\n * attribute whose value is an array of objects.\n *\n * @param key\n *            The name of the array.\n * @return True if a value is present for this attribute and can contain an\n *         array object.\n */\nboolean hasArray(String key);"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "/**\n * The current index of this element\n *\n * @return The index value\n */\nint getIndex();"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the number bound to key. Numbers are special attributes whose value\n * is an instance of Number. If an attribute with the same name exists but\n * is not a Number, NaN is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The number value or NaN if not found.\n */\ndouble getNumber(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param keys\n *            Several strings naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( String... keys );\n<T> T getFirstAttributeOf(String... keys);"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the array of objects bound to key. Arrays of objects are special\n * attributes whose value is a sequence of objects. If an attribute with the\n * same name exists but is not an array, null is returned.\n *\n * @param key\n *            The name of the array to search.\n * @return The array of objects or null if not found.\n */\nObject[] getArray(String key);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a label value for the given key? A label is an\n * attribute whose value is a string.\n *\n * @param key\n *            The name of the label.\n * @return True if a value is present for this attribute and implements\n *         CharSequence.\n */\nboolean hasLabel(String key);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "/**\n * An iterable view on the set of attribute keys usable within a for-each\n * loop.\n *\n * @return an iterable view on attribute keys.\n */\nIterable<String> getEachAttributeKey();"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key if it is an instance of\n * the given class. Some The returned value maybe null to indicate the\n * attribute does not exists or is not an instance of the given class.\n *\n * @param key\n *            The attribute name to search.\n * @param clazz\n *            The expected attribute class.\n * @return The object bound to the given key or null if no object match this\n *         attribute.\n */\n// Object getAttribute( String key, Class<?> clazz );\n<T> T getAttribute(String key, Class<T> clazz);"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "/**\n * Number of attributes stored in this element.\n *\n * @return the number of attributes.\n */\nint getAttributeCount();"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a vector value for the given key? A vector is an\n * attribute whose value is a sequence of numbers.\n *\n * @param key\n *            The name of the vector.\n * @return True if a value is present for this attribute and can contain a\n *         sequence of numbers.\n */\nboolean hasVector(String key);"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the hash bound to key. Hashes are special attributes whose value is a\n * set of pairs (name,object). Instances of object implementing the\n * {@link CompoundAttribute} interface are considered like hashes since they\n * can be transformed to a hash. If an attribute with the same name exists\n * but is not a hash, null is returned. We cannot enforce the type of the\n * key. It is considered a string and you should use \"Object.toString()\" to\n * get it.\n *\n * @param key\n *            The name of the hash to search.\n * @return The hash or null if not found.\n */\nHashMap<?, ?> getHash(String key);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key. The returned value may\n * be null to indicate the attribute does not exists or is not supported.\n *\n * @param key\n *            Name of the attribute to search.\n * @return The object bound to the given key or null if no object match this\n *         attribute name.\n */\n// Object getAttribute( String key );\n<T> T getAttribute(String key);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key and this\n * value is an instance of the given class?\n *\n * @param key\n *            The name of the attribute to search.\n * @param clazz\n *            The expected class of the attribute value.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key, Class<?> clazz);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key?\n *\n * @param key\n *            The name of the attribute to search.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key);"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "/**\n * Iterator on all attributes keys.\n *\n * @return An iterator on the key set of attributes.\n */\nIterator<String> getAttributeKeyIterator();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a hash value for the given key? A hash is a set\n * of pairs (key,value) or objects that implement the\n * {@link org.graphstream.graph.CompoundAttribute} class.\n *\n * @param key\n *            The name of the hash.\n * @return True if a value is present for this attribute and can contain a\n *         hash.\n */\nboolean hasHash(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String, Class)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param clazz\n *            The class the attribute must be instance of.\n * @param keys\n *            Several string naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n<T> T getFirstAttributeOf(Class<T> clazz, String... keys);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "/**\n * An unmodifiable view on the set of attribute keys.\n *\n * @return an unmodifiable collection containing the attribute keys.\n */\nCollection<String> getAttributeKeySet();"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the vector of number bound to key. Vectors of numbers are special\n * attributes whose value is a sequence of numbers. If an attribute with the\n * same name exists but is not a vector of number, null is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The vector of numbers or null if not found.\n */\nArrayList<? extends Number> getVector(String key);"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4019,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Element",
        "javadocTag": "@return True if a value is present for this attribute and can contain a\n        hash.",
        "methodJavadoc": "    /**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */",
        "methodSourceCode": "boolean hasHash(String key);",
        "classJavadoc": "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "key",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "/**\n * An iterable view on the set of attribute keys usable within a for-each\n * loop.\n *\n * @return an iterable view on attribute keys.\n */\nIterable<String> getEachAttributeKey();"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "/**\n * Iterator on all attributes keys.\n *\n * @return An iterator on the key set of attributes.\n */\nIterator<String> getAttributeKeyIterator();"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "/**\n * An unmodifiable view on the set of attribute keys.\n *\n * @return an unmodifiable collection containing the attribute keys.\n */\nCollection<String> getAttributeKeySet();"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a number for the given key? A number is an\n * attribute whose value is an instance of Number.\n *\n * @param key\n *            The name of the number.\n * @return True if a value is present for this attribute and can contain a\n *         double (inherits from Number).\n */\nboolean hasNumber(String key);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a label value for the given key? A label is an\n * attribute whose value is a string.\n *\n * @param key\n *            The name of the label.\n * @return True if a value is present for this attribute and implements\n *         CharSequence.\n */\nboolean hasLabel(String key);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key?\n *\n * @param key\n *            The name of the attribute to search.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key);"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a hash value for the given key? A hash is a set\n * of pairs (key,value) or objects that implement the\n * {@link org.graphstream.graph.CompoundAttribute} class.\n *\n * @param key\n *            The name of the hash.\n * @return True if a value is present for this attribute and can contain a\n *         hash.\n */\nboolean hasHash(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param keys\n *            Several strings naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( String... keys );\n<T> T getFirstAttributeOf(String... keys);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "/**\n * Unique identifier of this element.\n *\n * @return The identifier value.\n */\nString getId();"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "/**\n * The current index of this element\n *\n * @return The index value\n */\nint getIndex();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a value for the given attribute key and this\n * value is an instance of the given class?\n *\n * @param key\n *            The name of the attribute to search.\n * @param clazz\n *            The expected class of the attribute value.\n * @return True if a value is present for this attribute.\n */\nboolean hasAttribute(String key, Class<?> clazz);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key. The returned value may\n * be null to indicate the attribute does not exists or is not supported.\n *\n * @param key\n *            Name of the attribute to search.\n * @return The object bound to the given key or null if no object match this\n *         attribute name.\n */\n// Object getAttribute( String key );\n<T> T getAttribute(String key);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "/**\n * Like {@link #getAttribute(String, Class)}, but returns the first existing\n * attribute in a list of keys, instead of only one key. The key list order\n * matters.\n *\n * @param clazz\n *            The class the attribute must be instance of.\n * @param keys\n *            Several string naming attributes.\n * @return The first attribute that exists.\n */\n// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n<T> T getFirstAttributeOf(Class<T> clazz, String... keys);"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store an array value for the given key? A vector is an\n * attribute whose value is an array of objects.\n *\n * @param key\n *            The name of the array.\n * @return True if a value is present for this attribute and can contain an\n *         array object.\n */\nboolean hasArray(String key);"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the label string bound to the given key key. Labels are special\n * attributes whose value is a character sequence. If an attribute with the\n * same name exists but is not a character sequence, null is returned.\n *\n * @param key\n *            The label to search.\n * @return The label string value or null if not found.\n */\nCharSequence getLabel(String key);"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "/**\n * Number of attributes stored in this element.\n *\n * @return the number of attributes.\n */\nint getAttributeCount();"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the array of objects bound to key. Arrays of objects are special\n * attributes whose value is a sequence of objects. If an attribute with the\n * same name exists but is not an array, null is returned.\n *\n * @param key\n *            The name of the array to search.\n * @return The array of objects or null if not found.\n */\nObject[] getArray(String key);"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the hash bound to key. Hashes are special attributes whose value is a\n * set of pairs (name,object). Instances of object implementing the\n * {@link CompoundAttribute} interface are considered like hashes since they\n * can be transformed to a hash. If an attribute with the same name exists\n * but is not a hash, null is returned. We cannot enforce the type of the\n * key. It is considered a string and you should use \"Object.toString()\" to\n * get it.\n *\n * @param key\n *            The name of the hash to search.\n * @return The hash or null if not found.\n */\nHashMap<?, ?> getHash(String key);"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the vector of number bound to key. Vectors of numbers are special\n * attributes whose value is a sequence of numbers. If an attribute with the\n * same name exists but is not a vector of number, null is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The vector of numbers or null if not found.\n */\nArrayList<? extends Number> getVector(String key);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the attribute object bound to the given key if it is an instance of\n * the given class. Some The returned value maybe null to indicate the\n * attribute does not exists or is not an instance of the given class.\n *\n * @param key\n *            The attribute name to search.\n * @param clazz\n *            The expected attribute class.\n * @return The object bound to the given key or null if no object match this\n *         attribute.\n */\n// Object getAttribute( String key, Class<?> clazz );\n<T> T getAttribute(String key, Class<T> clazz);"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "/**\n * Get the number bound to key. Numbers are special attributes whose value\n * is an instance of Number. If an attribute with the same name exists but\n * is not a Number, NaN is returned.\n *\n * @param key\n *            The name of the number to search.\n * @return The number value or NaN if not found.\n */\ndouble getNumber(String key);"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "/**\n * Does this element store a vector value for the given key? A vector is an\n * attribute whose value is a sequence of numbers.\n *\n * @param key\n *            The name of the vector.\n * @return True if a value is present for this attribute and can contain a\n *         sequence of numbers.\n */\nboolean hasVector(String key);"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4036,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@param id Identifier of the target node.",
        "methodJavadoc": "    /**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */",
        "methodSourceCode": "boolean hasEdgeToward(String id);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "\"id\"",
                "String"
            ],
            [
                "\"id\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "id",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4038,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@param id Identifier of the source node.",
        "methodJavadoc": "    /**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */",
        "methodSourceCode": "boolean hasEdgeFrom(String id);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "\"id\"",
                "String"
            ],
            [
                "\"id\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "id",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4052,
        "oracle": "i >= 0 && i < this.getDegree();",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@param i Index of the edge.",
        "methodJavadoc": "    /**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */",
        "methodSourceCode": "<T extends Edge> T getEdge(int i);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "i",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4054,
        "oracle": "i < 0 || i >= this.getDegree();",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            degree",
        "methodJavadoc": "    /**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */",
        "methodSourceCode": "<T extends Edge> T getEdge(int i);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "i",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4057,
        "oracle": "i < 0 || i >= this.getInDegree();",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            in-degree",
        "methodJavadoc": "    /**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */",
        "methodSourceCode": "<T extends Edge> T getEnteringEdge(int i);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "i",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4060,
        "oracle": "i < 0 || i >= this.getOutDegree();",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            out-degree",
        "methodJavadoc": "    /**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */",
        "methodSourceCode": "<T extends Edge> T getLeavingEdge(int i);",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "i",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4076,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@return True if a directed edge goes from this node to the other node or\n        if an undirected edge exists.",
        "methodJavadoc": "    /**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
        "methodSourceCode": "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "index",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4077,
        "oracle": "index < 0 || index > this.getGraph().getNodeCount() - 1;",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@throws IndexOutOfBoundsException if the index is negative or greater than {@code\n            getNodeCount() - 1}.",
        "methodJavadoc": "    /**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
        "methodSourceCode": "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "index",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4080,
        "oracle": "index >= 0 && index <= this.getGraph().getNodeCount() - 1;",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@param index Index of the source node.",
        "methodJavadoc": "    /**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
        "methodSourceCode": "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "index",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 4082,
        "oracle": "index < 0 || index > this.getGraph().getNodeCount() - 1;",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.graph",
        "className": "Node",
        "javadocTag": "@throws IndexOutOfBoundsException if the index is negative or greater than {@code\n            getNodeCount() - 1}.",
        "methodJavadoc": "    /**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
        "methodSourceCode": "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;",
        "classJavadoc": "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "index",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th entering edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all entering edges,\n * or to choose a given entering edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEnteringEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th entering edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             in-degree\n */\n<T extends Edge> T getEnteringEdge(int i);"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward node 'id'.\n *\n * @param id\n *            Identifier of the target node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeToward(String id);"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge between this node and the node 'id', if it exits.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the opposite node.\n * @return Edge between node 'id' and this node if it exists, else null.\n */\n<T extends Edge> T getEdgeBetween(String id);"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);"
            ],
            [
                "getEachEnteringEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachEnteringEdge();"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves given node toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(Node node);"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and node 'id'.\n *\n * @param id\n *            Identifier of another node.\n * @return True if a edge exists between this node and node 'id'.\n */\nboolean hasEdgeBetween(String id);"
            ],
            [
                "getNeighborNodeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of neighbor nodes connected to this node via one or\n * more edges. This iterator iterates across any leaving, entering and non\n * directed edges (nodes are neighbors even if they only have a directed\n * edge from them toward this node). If there are multiple edges connecting\n * the same node, it might be iterated several times.\n *\n * @return The iterator, neighbors are iterated in arbitrary order.\n */\n<T extends Node> Iterator<T> getNeighborNodeIterator();"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and and another node if one exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The opposite node.\n * @return Edge between this node and the parameter node if it exists, else\n *         null.\n */\n<T extends Edge> T getEdgeBetween(Node node);"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward the node with given index.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getInDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of entering edges.\n *\n * @return the count of edges that only enter this node plus all undirected\n *         edges.\n */\nint getInDegree();"
            ],
            [
                "getDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Total number of relations with other nodes or this node.\n *\n * @return The number of edges/relations/links.\n */\nint getDegree();"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves node with given index toward this node.\n * <p>\n * This method selects only edges leaving the other node an pointing at this\n * node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            Index of the source node.\n * @return Directed edge going from the parameter node to this node, or\n *         undirected edge if it exists, else null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and another node.\n *\n * @param node\n *            Another node.\n * @return True if an edge exists between this node and the other node.\n */\nboolean hasEdgeBetween(Node node);"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getLeavingEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on entering edges.\n * <p>\n * This iterator iterates only on directed edges going from other nodes\n * toward this node (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getLeavingEdgeIterator();"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a node with given index.\n *\n * @param index\n *            Index of the source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge between this node and the node with index i if one\n * exists.\n * <p>\n * This method selects directed or undirected edges. If the edge is\n * directed, its direction is not important and leaving or entering edges\n * will be selected.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeBetween(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param index\n *            The index of the opposite node.\n * @return Edge between node with index i and this node if it exists, else\n *         null.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\n<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th leaving edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all leaving edges,\n * or to choose a given leaving edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getLeavingEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th leaving edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             out-degree\n */\n<T extends Edge> T getLeavingEdge(int i);"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator on the set of connected edges.\n * <p>\n * This iterator iterates on all edges leaving and entering (this includes\n * any non-directed edge present, and a non-directed edge is only iterated\n * once).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEdgeIterator();"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n * @complexity of the depth first iterator O(n+m) with n the number of nodes\n *             and m the number of edges.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator();"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "// New methods\n/**\n * True if an edge leaves this node toward a given node.\n *\n * @param node\n *            The target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeToward(Node node);"
            ],
            [
                "getLeavingEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getLeavingEdgeSet();"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieves an edge that leaves this node toward another node.\n * <p>\n * This method selects only edges leaving this node an pointing at the\n * parameter node (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and returns something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(...);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param node\n *            The target node.\n * @return Directed edge going from this node to the parameter node, or\n *         undirected edge if it exists, else null.\n */\n<T extends Edge> T getEdgeToward(Node node);"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getDepthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for depth first exploration of the graph, starting at this node.\n * <p>\n * If the graph is not connected, only a part of it will be explored.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @param directed\n *            If false, the iterator will ignore edge orientation (the\n *            default is \"True\").\n * @return An iterator able to explore the graph in a depth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from node 'id'.\n *\n * @param id\n *            Identifier of the source node.\n * @return True if a directed edge goes from this node to 'id' or if an\n *         undirected edge exists.\n */\nboolean hasEdgeFrom(String id);"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge enters this node from a given node.\n *\n * @param node\n *            The source node.\n * @return True if a directed edge goes from the other node to this node or\n *         if an undirected edge exists.\n */\nboolean hasEdgeFrom(Node node);"
            ],
            [
                "getEnteringEdgeIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator only on leaving edges.\n * <p>\n * This iterator iterates only on directed edges going from this node to\n * others (non-directed edges are included in the iteration).\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterator&lt;Edge&gt;.\n * </p>\n *\n * @return The iterator, edges are iterated in arbitrary order.\n */\n<T extends Edge> Iterator<T> getEnteringEdgeIterator();"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getEnteringEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that enter this node plus all\n *         undirected edges.\n */\n<T extends Edge> Collection<T> getEnteringEdgeSet();"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves this node toward 'id'.\n * <p>\n * This method selects only edges leaving this node an pointing at node 'id'\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the target node.\n * @return Directed edge going from this node to 'id', or undirected edge if\n *         it exists, else null.\n */\n<T extends Edge> T getEdgeToward(String id);"
            ],
            [
                "getEdgeFrom",
                "org.graphstream.graph",
                "Node",
                "/**\n * Retrieve an edge that leaves node 'id' toward this node.\n * <p>\n * This method selects only edges leaving node 'id' an pointing at this node\n * (this also selects undirected edges).\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param id\n *            Identifier of the source node.\n * @return Directed edge going from node 'id' to this node, or undirected\n *         edge if it exists, else null.\n */\n<T extends Edge> T getEdgeFrom(String id);"
            ],
            [
                "getGraph",
                "org.graphstream.graph",
                "Node",
                "/**\n * Parent graph. Some elements are not able to give their parent graph.\n *\n * @return The graph containing this node or null if unknown.\n */\nGraph getGraph();"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Collection<T> getEdgeSet();"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasEdgeToward",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge leaves this node toward a node with given index.\n *\n * @param index\n *            Index of the target node.\n * @return True if a directed edge goes from this node to the other node or\n *         if an undirected edge exists.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "getEachLeavingEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all leaving edges.\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection of only edges that leave this node plus all\n *         undirected edges.\n */\n<T extends Edge> Iterable<T> getEachLeavingEdge();"
            ],
            [
                "getOutDegree",
                "org.graphstream.graph",
                "Node",
                "/**\n * Number of leaving edges.\n *\n * @return the count of edges that only leave this node plus all undirected\n *         edges.\n */\nint getOutDegree();"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * I-th edge. Edges are stored in no given order.\n * <p>\n * However this method allows to iterate very quickly on all edges, or to\n * choose a given edge with direct access.\n * </p>\n * <p>\n * This method is implicitly generic and return something which extends\n * Edge. The return type is the one of the left part of the assignment. For\n * example, in the following call :\n *\n * <pre>\n * ExtendedEdge e = node.getEdge(i);\n * </pre>\n *\n * the method will return an ExtendedEdge. If no left part exists, method\n * will just return an Edge.\n * </p>\n *\n * @param i\n *            Index of the edge.\n * @return The i-th edge.\n * @throws IndexOutOfBoundException\n *             if <code>i</code> is negative or greater than or equal to the\n *             degree\n */\n<T extends Edge> T getEdge(int i);"
            ],
            [
                "getBreadthFirstIterator",
                "org.graphstream.graph",
                "Node",
                "/**\n * Iterator for breadth first exploration of the graph, starting at this\n * node.\n * <p>\n * If the graph is not connected, only a part of it will be explored. By\n * default, this iterator will respect edge orientation.\n * </p>\n * <p>\n * This method is implicitly generic and return an Iterator over something\n * which extends Node. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n * </pre>\n *\n * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n * exists, method will just return an Iterator&lt;Node&gt;.\n * </p>\n *\n * @return An iterator able to explore the graph in a breadth first way\n *         starting at this node.\n */\n<T extends Node> Iterator<T> getBreadthFirstIterator();"
            ],
            [
                "toString",
                "org.graphstream.graph",
                "Node",
                "/**\n * Override the Object.toString() method.\n */\nString toString();"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Node",
                "/**\n * Set of all entering and leaving edges.\n *\n * <p>\n * This method is implicitly generic and return an Iterable over something\n * which extends Edge. The return type is the one of the left part of the\n * assignment. For example, in the following call :\n *\n * <pre>\n * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n * </pre>\n *\n * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n * exists, method will just return an Iterable&lt;Edge&gt;.\n * </p>\n *\n * @return A collection containing all directed and undirected edges,\n *         leaving or entering.\n */\n<T extends Edge> Iterable<T> getEachEdge();"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasEdgeBetween",
                "org.graphstream.graph",
                "Node",
                "/**\n * True if an edge exists between this node and a node with given index.\n *\n * @param index\n *            Index of another node.\n * @return True if an edge exists between this node and the other node.\n * @throws IndexOutOfBoundsException\n *             if the index is negative or greater than {@code\n *             getNodeCount() - 1}.\n */\nboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]