[ {
  "id" : 3987,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.stream.netstream.packing",
  "className" : "NetStreamPacker",
  "javadocTag" : "@return a ByteBuffer that is the packed version of the input one. It may not have the same size.",
  "methodJavadoc" : "    /**\n\t * Pack the given ByteBuffer form its position to its capacity.\n\t * @param buffer The buffer to pack/encode\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */",
  "methodSourceCode" : "public ByteBuffer packMessage(ByteBuffer buffer){\n    return this.packMessage(buffer, 0, buffer.capacity());\n}",
  "classJavadoc" : "/**\n * \n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream.netstream.packing;\n\nimport java.nio.ByteBuffer;\n\n/**\n * \n */\npublic abstract class NetStreamPacker {\n\n\t/**\n\t * Pack the given ByteBuffer from startIndex to endIdex \n\t * @param buffer The buffer to pack/encode\n\t * @param startIndex the index at which the encoding starts in the buffer\n\t * @param endIndex the index at which the encoding stops\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */\n\tpublic abstract ByteBuffer packMessage(ByteBuffer buffer, int startIndex, int endIndex);\n\n\t/**\n\t * Pack the given ByteBuffer form its position to its capacity.\n\t * @param buffer The buffer to pack/encode\n\t * @return a ByteBuffer that is the packed version of the input one. It may not have the same size.\n\t */\n\tpublic ByteBuffer packMessage(ByteBuffer buffer){\n\t\treturn this.packMessage(buffer, 0, buffer.capacity());\n\t}\n\n\t/**\n\t * @param capacity\n\t * @return\n\t */\n\tpublic abstract ByteBuffer packMessageSize(int capacity) ;\n\t\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "buffer", "java.nio", "ByteBuffer" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "packMessageSize", "org.graphstream.stream.netstream.packing", "NetStreamPacker", "public abstract ByteBuffer packMessageSize(int capacity)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "packMessage", "org.graphstream.stream.netstream.packing", "NetStreamPacker", "public ByteBuffer packMessage(ByteBuffer buffer)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "packMessage", "org.graphstream.stream.netstream.packing", "NetStreamPacker", "public abstract ByteBuffer packMessage(ByteBuffer buffer, int startIndex, int endIndex)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "put", "java.nio", "ByteBuffer", "public abstract ByteBuffer put(byte arg0)" ], [ "putFloat", "java.nio", "ByteBuffer", "public abstract ByteBuffer putFloat(float arg0)" ], [ "asFloatBuffer", "java.nio", "ByteBuffer", "public abstract FloatBuffer asFloatBuffer()" ], [ "put", "java.nio", "ByteBuffer", "public ByteBuffer put(ByteBuffer arg0)" ], [ "getChar", "java.nio", "ByteBuffer", "public abstract char getChar()" ], [ "alignedSlice", "java.nio", "ByteBuffer", "public final ByteBuffer alignedSlice(int arg0)" ], [ "base", "java.nio", "ByteBuffer", "Object base()" ], [ "putShort", "java.nio", "ByteBuffer", "public abstract ByteBuffer putShort(short arg0)" ], [ "put", "java.nio", "ByteBuffer", "public ByteBuffer put(int arg0, byte[] arg1)" ], [ "getLong", "java.nio", "ByteBuffer", "public abstract long getLong()" ], [ "put", "java.nio", "ByteBuffer", "public final ByteBuffer put(byte[] arg0)" ], [ "getInt", "java.nio", "ByteBuffer", "public abstract int getInt()" ], [ "order", "java.nio", "ByteBuffer", "public final ByteOrder order()" ], [ "putLong", "java.nio", "ByteBuffer", "public abstract ByteBuffer putLong(int arg0, long arg1)" ], [ "toString", "java.nio", "ByteBuffer", "public String toString()" ], [ "mismatch", "java.nio", "ByteBuffer", "public int mismatch(ByteBuffer arg0)" ], [ "arrayOffset", "java.nio", "ByteBuffer", "public final int arrayOffset()" ], [ "asIntBuffer", "java.nio", "ByteBuffer", "public abstract IntBuffer asIntBuffer()" ], [ "mark", "java.nio", "ByteBuffer", "public ByteBuffer mark()" ], [ "getDouble", "java.nio", "ByteBuffer", "public abstract double getDouble(int arg0)" ], [ "getFloat", "java.nio", "ByteBuffer", "public abstract float getFloat()" ], [ "putChar", "java.nio", "ByteBuffer", "public abstract ByteBuffer putChar(char arg0)" ], [ "get", "java.nio", "ByteBuffer", "public ByteBuffer get(byte[] arg0)" ], [ "position", "java.nio", "ByteBuffer", "public ByteBuffer position(int arg0)" ], [ "get", "java.nio", "ByteBuffer", "public ByteBuffer get(int arg0, byte[] arg1)" ], [ "hashCode", "java.nio", "ByteBuffer", "public int hashCode()" ], [ "putShort", "java.nio", "ByteBuffer", "public abstract ByteBuffer putShort(int arg0, short arg1)" ], [ "flip", "java.nio", "ByteBuffer", "public ByteBuffer flip()" ], [ "putDouble", "java.nio", "ByteBuffer", "public abstract ByteBuffer putDouble(int arg0, double arg1)" ], [ "clear", "java.nio", "ByteBuffer", "public ByteBuffer clear()" ], [ "alignmentOffset", "java.nio", "ByteBuffer", "public final int alignmentOffset(int arg0, int arg1)" ], [ "getChar", "java.nio", "ByteBuffer", "public abstract char getChar(int arg0)" ], [ "getShort", "java.nio", "ByteBuffer", "public abstract short getShort()" ], [ "limit", "java.nio", "ByteBuffer", "public ByteBuffer limit(int arg0)" ], [ "equals", "java.nio", "ByteBuffer", "public boolean equals(Object arg0)" ], [ "slice", "java.nio", "ByteBuffer", "public abstract ByteBuffer slice(int arg0, int arg1)" ], [ "getInt", "java.nio", "ByteBuffer", "public abstract int getInt(int arg0)" ], [ "putInt", "java.nio", "ByteBuffer", "public abstract ByteBuffer putInt(int arg0, int arg1)" ], [ "hasArray", "java.nio", "ByteBuffer", "public final boolean hasArray()" ], [ "asReadOnlyBuffer", "java.nio", "ByteBuffer", "public abstract ByteBuffer asReadOnlyBuffer()" ], [ "put", "java.nio", "ByteBuffer", "public ByteBuffer put(int arg0, ByteBuffer arg1, int arg2, int arg3)" ], [ "compact", "java.nio", "ByteBuffer", "public abstract ByteBuffer compact()" ], [ "array", "java.nio", "ByteBuffer", "public final byte[] array()" ], [ "rewind", "java.nio", "ByteBuffer", "public ByteBuffer rewind()" ], [ "getLong", "java.nio", "ByteBuffer", "public abstract long getLong(int arg0)" ], [ "isDirect", "java.nio", "ByteBuffer", "public abstract boolean isDirect()" ], [ "reset", "java.nio", "ByteBuffer", "public ByteBuffer reset()" ], [ "put", "java.nio", "ByteBuffer", "public abstract ByteBuffer put(int arg0, byte arg1)" ], [ "get", "java.nio", "ByteBuffer", "public abstract byte get()" ], [ "asDoubleBuffer", "java.nio", "ByteBuffer", "public abstract DoubleBuffer asDoubleBuffer()" ], [ "getDouble", "java.nio", "ByteBuffer", "public abstract double getDouble()" ], [ "get", "java.nio", "ByteBuffer", "public ByteBuffer get(int arg0, byte[] arg1, int arg2, int arg3)" ], [ "order", "java.nio", "ByteBuffer", "public final ByteBuffer order(ByteOrder arg0)" ], [ "putLong", "java.nio", "ByteBuffer", "public abstract ByteBuffer putLong(long arg0)" ], [ "asShortBuffer", "java.nio", "ByteBuffer", "public abstract ShortBuffer asShortBuffer()" ], [ "putFloat", "java.nio", "ByteBuffer", "public abstract ByteBuffer putFloat(int arg0, float arg1)" ], [ "getFloat", "java.nio", "ByteBuffer", "public abstract float getFloat(int arg0)" ], [ "duplicate", "java.nio", "ByteBuffer", "public abstract ByteBuffer duplicate()" ], [ "compareTo", "java.nio", "ByteBuffer", "public int compareTo(ByteBuffer arg0)" ], [ "put", "java.nio", "ByteBuffer", "public ByteBuffer put(byte[] arg0, int arg1, int arg2)" ], [ "get", "java.nio", "ByteBuffer", "public abstract byte get(int arg0)" ], [ "putChar", "java.nio", "ByteBuffer", "public abstract ByteBuffer putChar(int arg0, char arg1)" ], [ "putInt", "java.nio", "ByteBuffer", "public abstract ByteBuffer putInt(int arg0)" ], [ "put", "java.nio", "ByteBuffer", "public ByteBuffer put(int arg0, byte[] arg1, int arg2, int arg3)" ], [ "asLongBuffer", "java.nio", "ByteBuffer", "public abstract LongBuffer asLongBuffer()" ], [ "get", "java.nio", "ByteBuffer", "public ByteBuffer get(byte[] arg0, int arg1, int arg2)" ], [ "slice", "java.nio", "ByteBuffer", "public abstract ByteBuffer slice()" ], [ "asCharBuffer", "java.nio", "ByteBuffer", "public abstract CharBuffer asCharBuffer()" ], [ "getShort", "java.nio", "ByteBuffer", "public abstract short getShort(int arg0)" ], [ "putDouble", "java.nio", "ByteBuffer", "public abstract ByteBuffer putDouble(double arg0)" ], [ "limit", "java.nio", "Buffer", "public final int limit()" ], [ "mark", "java.nio", "Buffer", "public Buffer mark()" ], [ "checkIndex", "java.nio", "Buffer", "final int checkIndex(int arg0)" ], [ "nextPutIndex", "java.nio", "Buffer", "final int nextPutIndex(int arg0)" ], [ "capacity", "java.nio", "Buffer", "public final int capacity()" ], [ "hasRemaining", "java.nio", "Buffer", "public final boolean hasRemaining()" ], [ "arrayOffset", "java.nio", "Buffer", "public abstract int arrayOffset()" ], [ "scope", "java.nio", "Buffer", "final ScopedMemoryAccess.Scope scope()" ], [ "hasArray", "java.nio", "Buffer", "public abstract boolean hasArray()" ], [ "position", "java.nio", "Buffer", "public final int position()" ], [ "duplicate", "java.nio", "Buffer", "public abstract Buffer duplicate()" ], [ "checkIndex", "java.nio", "Buffer", "final int checkIndex(int arg0, int arg1)" ], [ "isReadOnly", "java.nio", "Buffer", "public abstract boolean isReadOnly()" ], [ "slice", "java.nio", "Buffer", "public abstract Buffer slice(int arg0, int arg1)" ], [ "base", "java.nio", "Buffer", "abstract Object base()" ], [ "rewind", "java.nio", "Buffer", "public Buffer rewind()" ], [ "flip", "java.nio", "Buffer", "public Buffer flip()" ], [ "markValue", "java.nio", "Buffer", "final int markValue()" ], [ "position", "java.nio", "Buffer", "public Buffer position(int arg0)" ], [ "nextGetIndex", "java.nio", "Buffer", "final int nextGetIndex(int arg0)" ], [ "nextPutIndex", "java.nio", "Buffer", "final int nextPutIndex()" ], [ "isDirect", "java.nio", "Buffer", "public abstract boolean isDirect()" ], [ "nextGetIndex", "java.nio", "Buffer", "final int nextGetIndex()" ], [ "remaining", "java.nio", "Buffer", "public final int remaining()" ], [ "array", "java.nio", "Buffer", "public abstract Object array()" ], [ "limit", "java.nio", "Buffer", "public Buffer limit(int arg0)" ], [ "slice", "java.nio", "Buffer", "public abstract Buffer slice()" ], [ "clear", "java.nio", "Buffer", "public Buffer clear()" ], [ "reset", "java.nio", "Buffer", "public Buffer reset()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "hb", "java.nio", "ByteBuffer", "final byte[] hb;" ], [ "offset", "java.nio", "ByteBuffer", "final int offset;" ], [ "isReadOnly", "java.nio", "ByteBuffer", "boolean isReadOnly;" ], [ "bigEndian", "java.nio", "ByteBuffer", "boolean bigEndian;" ], [ "nativeByteOrder", "java.nio", "ByteBuffer", "boolean nativeByteOrder;" ], [ "address", "java.nio", "Buffer", "long address;" ], [ "segment", "java.nio", "Buffer", "final MemorySegmentProxy segment;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4014,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Element",
  "javadocTag" : "@param key The name of the vector.",
  "methodJavadoc" : "    /**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */",
  "methodSourceCode" : "boolean hasVector(String key);",
  "classJavadoc" : "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "key", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key)" ], [ "getArray", "org.graphstream.graph", "Element", "Object[] getArray(String key)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "Collection<String> getAttributeKeySet()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "int getAttributeCount()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(String... keys)" ], [ "hasNumber", "org.graphstream.graph", "Element", "boolean hasNumber(String key)" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key)" ], [ "getVector", "org.graphstream.graph", "Element", "ArrayList<? extends Number> getVector(String key)" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key, Class<T> clazz)" ], [ "hasLabel", "org.graphstream.graph", "Element", "boolean hasLabel(String key)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(Class<T> clazz, String... keys)" ], [ "getNumber", "org.graphstream.graph", "Element", "double getNumber(String key)" ], [ "hasVector", "org.graphstream.graph", "Element", "boolean hasVector(String key)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "Iterator<String> getAttributeKeyIterator()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key, Class<?> clazz)" ], [ "hasHash", "org.graphstream.graph", "Element", "boolean hasHash(String key)" ], [ "getLabel", "org.graphstream.graph", "Element", "CharSequence getLabel(String key)" ], [ "getIndex", "org.graphstream.graph", "Element", "int getIndex()" ], [ "getHash", "org.graphstream.graph", "Element", "HashMap<?, ?> getHash(String key)" ], [ "hasArray", "org.graphstream.graph", "Element", "boolean hasArray(String key)" ], [ "getId", "org.graphstream.graph", "Element", "String getId()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "Iterable<String> getEachAttributeKey()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "length", "java.lang", "String", "public int length()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4016,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Element",
  "javadocTag" : "@param key The name of the array.",
  "methodJavadoc" : "    /**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */",
  "methodSourceCode" : "boolean hasArray(String key);",
  "classJavadoc" : "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "key", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getVector", "org.graphstream.graph", "Element", "ArrayList<? extends Number> getVector(String key)" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key)" ], [ "hasLabel", "org.graphstream.graph", "Element", "boolean hasLabel(String key)" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key, Class<T> clazz)" ], [ "hasVector", "org.graphstream.graph", "Element", "boolean hasVector(String key)" ], [ "getArray", "org.graphstream.graph", "Element", "Object[] getArray(String key)" ], [ "getNumber", "org.graphstream.graph", "Element", "double getNumber(String key)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(String... keys)" ], [ "getIndex", "org.graphstream.graph", "Element", "int getIndex()" ], [ "getLabel", "org.graphstream.graph", "Element", "CharSequence getLabel(String key)" ], [ "getId", "org.graphstream.graph", "Element", "String getId()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(Class<T> clazz, String... keys)" ], [ "hasNumber", "org.graphstream.graph", "Element", "boolean hasNumber(String key)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "Collection<String> getAttributeKeySet()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "Iterator<String> getAttributeKeyIterator()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "int getAttributeCount()" ], [ "getHash", "org.graphstream.graph", "Element", "HashMap<?, ?> getHash(String key)" ], [ "hasArray", "org.graphstream.graph", "Element", "boolean hasArray(String key)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key, Class<?> clazz)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "Iterable<String> getEachAttributeKey()" ], [ "hasHash", "org.graphstream.graph", "Element", "boolean hasHash(String key)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "length", "java.lang", "String", "public int length()" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4019,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Element",
  "javadocTag" : "@return True if a value is present for this attribute and can contain a\n        hash.",
  "methodJavadoc" : "    /**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */",
  "methodSourceCode" : "boolean hasHash(String key);",
  "classJavadoc" : "/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * An element is a part of a graph (node, edge, the graph itself).\n * \n * <p>\n * An interface that defines common method to manipulate identifiers, attributes\n * and indices of the elements (graph, nodes and edges) of a graph.\n * </p>\n * *\n * <p>\n * Attributes can be any object and are identified by arbitrary strings. Some\n * attributes are stored as numbers or strings and are in this case named\n * number, label or vector. There are utility methods to handle these attributes\n * ({@link #getNumber(String)}, {@link #getLabel(String)}) or\n * {@link #getVector(String)}, however they are also accessible through the more\n * general method {@link #getAttribute(String)}.\n * </p>\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n * \n */\npublic interface Element {\n\t/**\n\t * Unique identifier of this element.\n\t * \n\t * @return The identifier value.\n\t */\n\tString getId();\n\n\t/**\n\t * The current index of this element\n\t * \n\t * @return The index value\n\t */\n\tint getIndex();\n\n\t/**\n\t * Get the attribute object bound to the given key. The returned value may\n\t * be null to indicate the attribute does not exists or is not supported.\n\t * \n\t * @param key\n\t *            Name of the attribute to search.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute name.\n\t */\n\t// Object getAttribute( String key );\n\t<T> T getAttribute(String key);\n\n\t/**\n\t * Like {@link #getAttribute(String)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param keys\n\t *            Several strings naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( String... keys );\n\t<T> T getFirstAttributeOf(String... keys);\n\n\t/**\n\t * Get the attribute object bound to the given key if it is an instance of\n\t * the given class. Some The returned value maybe null to indicate the\n\t * attribute does not exists or is not an instance of the given class.\n\t * \n\t * @param key\n\t *            The attribute name to search.\n\t * @param clazz\n\t *            The expected attribute class.\n\t * @return The object bound to the given key or null if no object match this\n\t *         attribute.\n\t */\n\t// Object getAttribute( String key, Class<?> clazz );\n\t<T> T getAttribute(String key, Class<T> clazz);\n\n\t/**\n\t * Like {@link #getAttribute(String, Class)}, but returns the first existing\n\t * attribute in a list of keys, instead of only one key. The key list order\n\t * matters.\n\t * \n\t * @param clazz\n\t *            The class the attribute must be instance of.\n\t * @param keys\n\t *            Several string naming attributes.\n\t * @return The first attribute that exists.\n\t */\n\t// Object getFirstAttributeOf( Class<?> clazz, String... keys );\n\t<T> T getFirstAttributeOf(Class<T> clazz, String... keys);\n\n\t/**\n\t * Get the label string bound to the given key key. Labels are special\n\t * attributes whose value is a character sequence. If an attribute with the\n\t * same name exists but is not a character sequence, null is returned.\n\t * \n\t * @param key\n\t *            The label to search.\n\t * @return The label string value or null if not found.\n\t */\n\tCharSequence getLabel(String key);\n\n\t/**\n\t * Get the number bound to key. Numbers are special attributes whose value\n\t * is an instance of Number. If an attribute with the same name exists but\n\t * is not a Number, NaN is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The number value or NaN if not found.\n\t */\n\tdouble getNumber(String key);\n\n\t/**\n\t * Get the vector of number bound to key. Vectors of numbers are special\n\t * attributes whose value is a sequence of numbers. If an attribute with the\n\t * same name exists but is not a vector of number, null is returned.\n\t * \n\t * @param key\n\t *            The name of the number to search.\n\t * @return The vector of numbers or null if not found.\n\t */\n\tArrayList<? extends Number> getVector(String key);\n\n\t/**\n\t * Get the array of objects bound to key. Arrays of objects are special\n\t * attributes whose value is a sequence of objects. If an attribute with the\n\t * same name exists but is not an array, null is returned.\n\t * \n\t * @param key\n\t *            The name of the array to search.\n\t * @return The array of objects or null if not found.\n\t */\n\tObject[] getArray(String key);\n\n\t/**\n\t * Get the hash bound to key. Hashes are special attributes whose value is a\n\t * set of pairs (name,object). Instances of object implementing the\n\t * {@link CompoundAttribute} interface are considered like hashes since they\n\t * can be transformed to a hash. If an attribute with the same name exists\n\t * but is not a hash, null is returned. We cannot enforce the type of the\n\t * key. It is considered a string and you should use \"Object.toString()\" to\n\t * get it.\n\t * \n\t * @param key\n\t *            The name of the hash to search.\n\t * @return The hash or null if not found.\n\t */\n\tHashMap<?, ?> getHash(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key);\n\n\t/**\n\t * Does this element store a value for the given attribute key and this\n\t * value is an instance of the given class?\n\t * \n\t * @param key\n\t *            The name of the attribute to search.\n\t * @param clazz\n\t *            The expected class of the attribute value.\n\t * @return True if a value is present for this attribute.\n\t */\n\tboolean hasAttribute(String key, Class<?> clazz);\n\n\t/**\n\t * Does this element store a label value for the given key? A label is an\n\t * attribute whose value is a string.\n\t * \n\t * @param key\n\t *            The name of the label.\n\t * @return True if a value is present for this attribute and implements\n\t *         CharSequence.\n\t */\n\tboolean hasLabel(String key);\n\n\t/**\n\t * Does this element store a number for the given key? A number is an\n\t * attribute whose value is an instance of Number.\n\t * \n\t * @param key\n\t *            The name of the number.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         double (inherits from Number).\n\t */\n\tboolean hasNumber(String key);\n\n\t/**\n\t * Does this element store a vector value for the given key? A vector is an\n\t * attribute whose value is a sequence of numbers.\n\t * \n\t * @param key\n\t *            The name of the vector.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         sequence of numbers.\n\t */\n\tboolean hasVector(String key);\n\n\t/**\n\t * Does this element store an array value for the given key? A vector is an\n\t * attribute whose value is an array of objects.\n\t * \n\t * @param key\n\t *            The name of the array.\n\t * @return True if a value is present for this attribute and can contain an\n\t *         array object.\n\t */\n\tboolean hasArray(String key);\n\n\t/**\n\t * Does this element store a hash value for the given key? A hash is a set\n\t * of pairs (key,value) or objects that implement the\n\t * {@link org.graphstream.graph.CompoundAttribute} class.\n\t * \n\t * @param key\n\t *            The name of the hash.\n\t * @return True if a value is present for this attribute and can contain a\n\t *         hash.\n\t */\n\tboolean hasHash(String key);\n\n\t/**\n\t * Iterator on all attributes keys.\n\t * \n\t * @return An iterator on the key set of attributes.\n\t */\n\tIterator<String> getAttributeKeyIterator();\n\n\t/**\n\t * An iterable view on the set of attribute keys usable within a for-each\n\t * loop.\n\t * \n\t * @return an iterable view on attribute keys.\n\t */\n\tIterable<String> getEachAttributeKey();\n\n\t/**\n\t * An unmodifiable view on the set of attribute keys.\n\t * \n\t * @return an unmodifiable collection containing the attribute keys.\n\t */\n\tCollection<String> getAttributeKeySet();\n\n\t/**\n\t * Remove all registered attributes. This includes numbers, labels and\n\t * vectors.\n\t */\n\tvoid clearAttributes();\n\n\t/**\n\t * Add or replace the value of an attribute. Existing attributes are\n\t * overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels. You can pass zero, one or more arguments for the\n\t * attribute values. If no value is given, a boolean with value \"true\" is\n\t * added. If there is more than one value, an array is stored. If there is\n\t * only one value, the value is stored (but not in an array).\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or set of values.\n\t */\n\tvoid addAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid changeAttribute(String attribute, Object... values);\n\n\t/**\n\t * Like {@link #addAttribute(String, Object...)} but for consistency.\n\t * \n\t * @param attribute\n\t *            The attribute name.\n\t * @param values\n\t *            The attribute value or array of values.\n\t * @see #addAttribute(String, Object...)\n\t */\n\tvoid setAttribute(String attribute, Object... values);\n\n\t/**\n\t * Add or replace each attribute found in attributes. Existing attributes\n\t * are overwritten silently. All classes inheriting from Number can be\n\t * considered as numbers. All classes inheriting from CharSequence can be\n\t * considered as labels.\n\t * \n\t * @param attributes\n\t *            A set of (key,value) pairs.\n\t */\n\tvoid addAttributes(Map<String, Object> attributes);\n\n\t/**\n\t * Remove an attribute. Non-existent attributes errors are ignored silently.\n\t * \n\t * @param attribute\n\t *            Name of the attribute to remove.\n\t */\n\tvoid removeAttribute(String attribute);\n\n\t/**\n\t * Number of attributes stored in this element.\n\t * \n\t * @return the number of attributes.\n\t */\n\tint getAttributeCount();\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "key", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEachAttributeKey", "org.graphstream.graph", "Element", "Iterable<String> getEachAttributeKey()" ], [ "hasVector", "org.graphstream.graph", "Element", "boolean hasVector(String key)" ], [ "getVector", "org.graphstream.graph", "Element", "ArrayList<? extends Number> getVector(String key)" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key, Class<T> clazz)" ], [ "getLabel", "org.graphstream.graph", "Element", "CharSequence getLabel(String key)" ], [ "hasHash", "org.graphstream.graph", "Element", "boolean hasHash(String key)" ], [ "getHash", "org.graphstream.graph", "Element", "HashMap<?, ?> getHash(String key)" ], [ "getNumber", "org.graphstream.graph", "Element", "double getNumber(String key)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key, Class<?> clazz)" ], [ "hasNumber", "org.graphstream.graph", "Element", "boolean hasNumber(String key)" ], [ "getArray", "org.graphstream.graph", "Element", "Object[] getArray(String key)" ], [ "getIndex", "org.graphstream.graph", "Element", "int getIndex()" ], [ "hasArray", "org.graphstream.graph", "Element", "boolean hasArray(String key)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(String... keys)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "Collection<String> getAttributeKeySet()" ], [ "getAttribute", "org.graphstream.graph", "Element", "<T> T getAttribute(String key)" ], [ "hasLabel", "org.graphstream.graph", "Element", "boolean hasLabel(String key)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "boolean hasAttribute(String key)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "Iterator<String> getAttributeKeyIterator()" ], [ "getId", "org.graphstream.graph", "Element", "String getId()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "int getAttributeCount()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "<T> T getFirstAttributeOf(Class<T> clazz, String... keys)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4036,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@param id Identifier of the target node.",
  "methodJavadoc" : "    /**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */",
  "methodSourceCode" : "boolean hasEdgeToward(String id);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"id\"", "String" ], [ "\"id\"", "String" ] ],
  "tokensMethodArguments" : [ [ "id", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4038,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@param id Identifier of the source node.",
  "methodJavadoc" : "    /**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */",
  "methodSourceCode" : "boolean hasEdgeFrom(String id);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"id\"", "String" ], [ "\"id\"", "String" ] ],
  "tokensMethodArguments" : [ [ "id", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "length", "java.lang", "String", "public int length()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4052,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@param i Index of the edge.",
  "methodJavadoc" : "    /**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */",
  "methodSourceCode" : "<T extends Edge> T getEdge(int i);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "i", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4054,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            degree",
  "methodJavadoc" : "    /**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */",
  "methodSourceCode" : "<T extends Edge> T getEdge(int i);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "i", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4057,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            in-degree",
  "methodJavadoc" : "    /**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */",
  "methodSourceCode" : "<T extends Edge> T getEnteringEdge(int i);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "i", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4060,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            out-degree",
  "methodJavadoc" : "    /**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */",
  "methodSourceCode" : "<T extends Edge> T getLeavingEdge(int i);",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "i", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4076,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@return True if a directed edge goes from this node to the other node or\n        if an undirected edge exists.",
  "methodJavadoc" : "    /**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
  "methodSourceCode" : "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException;",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4077,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@throws IndexOutOfBoundsException if the index is negative or greater than {@code\n            getNodeCount() - 1}.",
  "methodJavadoc" : "    /**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
  "methodSourceCode" : "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException;",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4080,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@param index Index of the source node.",
  "methodJavadoc" : "    /**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
  "methodSourceCode" : "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 4082,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.graph",
  "className" : "Node",
  "javadocTag" : "@throws IndexOutOfBoundsException if the index is negative or greater than {@code\n            getNodeCount() - 1}.",
  "methodJavadoc" : "    /**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */",
  "methodSourceCode" : "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;",
  "classJavadoc" : "/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.graph;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * An Interface that advises general purpose methods for handling nodes as\n * elements of a graph.\n * \n * <h3>Important</h3>\n * <p>\n * Implementing classes should indicate the complexity of their implementation\n * for each method.\n * </p>\n * \n * @since July 12 2007\n */\npublic interface Node extends Element, Iterable<Edge> {\n\t/**\n\t * Parent graph. Some elements are not able to give their parent graph.\n\t * \n\t * @return The graph containing this node or null if unknown.\n\t */\n\tGraph getGraph();\n\n\t/**\n\t * Total number of relations with other nodes or this node.\n\t * \n\t * @return The number of edges/relations/links.\n\t */\n\tint getDegree();\n\n\t/**\n\t * Number of leaving edges.\n\t * \n\t * @return the count of edges that only leave this node plus all undirected\n\t *         edges.\n\t */\n\tint getOutDegree();\n\n\t/**\n\t * Number of entering edges.\n\t * \n\t * @return the count of edges that only enter this node plus all undirected\n\t *         edges.\n\t */\n\tint getInDegree();\n\n\t/**\n\t * True if an edge leaves this node toward node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeToward(String id);\n\n\t/**\n\t * True if an edge enters this node from node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return True if a directed edge goes from this node to 'id' or if an\n\t *         undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(String id);\n\n\t/**\n\t * True if an edge exists between this node and node 'id'.\n\t * \n\t * @param id\n\t *            Identifier of another node.\n\t * @return True if a edge exists between this node and node 'id'.\n\t */\n\tboolean hasEdgeBetween(String id);\n\n\t/**\n\t * Retrieve an edge that leaves this node toward 'id'.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at node 'id'\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the target node.\n\t * @return Directed edge going from this node to 'id', or undirected edge if\n\t *         it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(String id);\n\n\t/**\n\t * Retrieve an edge that leaves node 'id' toward this node.\n\t * <p>\n\t * This method selects only edges leaving node 'id' an pointing at this node\n\t * (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the source node.\n\t * @return Directed edge going from node 'id' to this node, or undirected\n\t *         edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(String id);\n\n\t/**\n\t * Retrieve an edge between this node and the node 'id', if it exits.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param id\n\t *            Identifier of the opposite node.\n\t * @return Edge between node 'id' and this node if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeBetween(String id);\n\n\t/**\n\t * Iterator on the set of connected edges.\n\t * <p>\n\t * This iterator iterates on all edges leaving and entering (this includes\n\t * any non-directed edge present, and a non-directed edge is only iterated\n\t * once).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEdgeIterator();\n\n\t/**\n\t * Iterator only on leaving edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from this node to\n\t * others (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getEnteringEdgeIterator();\n\n\t/**\n\t * Iterator only on entering edges.\n\t * <p>\n\t * This iterator iterates only on directed edges going from other nodes\n\t * toward this node (non-directed edges are included in the iteration).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return The iterator, edges are iterated in arbitrary order.\n\t */\n\t<T extends Edge> Iterator<T> getLeavingEdgeIterator();\n\n\t/**\n\t * Iterator on the set of neighbor nodes connected to this node via one or\n\t * more edges. This iterator iterates across any leaving, entering and non\n\t * directed edges (nodes are neighbors even if they only have a directed\n\t * edge from them toward this node). If there are multiple edges connecting\n\t * the same node, it might be iterated several times.\n\t * \n\t * @return The iterator, neighbors are iterated in arbitrary order.\n\t */\n\t<T extends Node> Iterator<T> getNeighborNodeIterator();\n\n\t/**\n\t * I-th edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all edges, or to\n\t * choose a given edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             degree\n\t */\n\t<T extends Edge> T getEdge(int i);\n\n\t/**\n\t * I-th entering edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all entering edges,\n\t * or to choose a given entering edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEnteringEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th entering edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             in-degree\n\t */\n\t<T extends Edge> T getEnteringEdge(int i);\n\n\t/**\n\t * I-th leaving edge. Edges are stored in no given order.\n\t * <p>\n\t * However this method allows to iterate very quickly on all leaving edges,\n\t * or to choose a given leaving edge with direct access.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getLeavingEdge(i);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param i\n\t *            Index of the edge.\n\t * @return The i-th leaving edge.\n\t * @throws IndexOutOfBoundException\n\t *             if <code>i</code> is negative or greater than or equal to the\n\t *             out-degree\n\t */\n\t<T extends Edge> T getLeavingEdge(int i);\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator();\n\n\t/**\n\t * Iterator for breadth first exploration of the graph, starting at this\n\t * node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getBreadthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a breadth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed);\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored. By\n\t * default, this iterator will respect edge orientation.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator();\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t * @complexity of the depth first iterator O(n+m) with n the number of nodes\n\t *             and m the number of edges.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator();\n\n\t/**\n\t * Iterator for depth first exploration of the graph, starting at this node.\n\t * <p>\n\t * If the graph is not connected, only a part of it will be explored.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return an Iterator over something\n\t * which extends Node. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterator&lt;ExtendedNode&gt; ite = node.getDepthFirstIterator(true);\n\t * </pre>\n\t * \n\t * the method will return an Iterator&lt;ExtendedNode&gt;. If no left part\n\t * exists, method will just return an Iterator&lt;Node&gt;.\n\t * </p>\n\t * \n\t * @param directed\n\t *            If false, the iterator will ignore edge orientation (the\n\t *            default is \"True\").\n\t * @return An iterator able to explore the graph in a depth first way\n\t *         starting at this node.\n\t */\n\t<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed);\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Iterable<T> getEachEdge();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachLeavingEdge();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Iterable<T> getEachEnteringEdge();\n\n\t/**\n\t * Set of all entering and leaving edges.\n\t * \n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection containing all directed and undirected edges,\n\t *         leaving or entering.\n\t */\n\t<T extends Edge> Collection<T> getEdgeSet();\n\n\t/**\n\t * Set of all leaving edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getLeavingEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that leave this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getLeavingEdgeSet();\n\n\t/**\n\t * Set of all entering edges.\n\t * <p>\n\t * This method is implicitly generic and return an Iterable over something\n\t * which extends Edge. The return type is the one of the left part of the\n\t * assignment. For example, in the following call :\n\t * \n\t * <pre>\n\t * Iterable&lt;ExtendedEdge&gt; ite = node.getEnteringEdgeSet();\n\t * </pre>\n\t * \n\t * the method will return an Iterable&lt;ExtendedEdge&gt;. If no left part\n\t * exists, method will just return an Iterable&lt;Edge&gt;.\n\t * </p>\n\t * \n\t * @return A collection of only edges that enter this node plus all\n\t *         undirected edges.\n\t */\n\t<T extends Edge> Collection<T> getEnteringEdgeSet();\n\n\t/**\n\t * Override the Object.toString() method.\n\t */\n\tString toString();\n\n\t// New methods\n\n\t/**\n\t * True if an edge leaves this node toward a given node.\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeToward(Node node);\n\n\t/**\n\t * True if an edge leaves this node toward a node with given index.\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return True if a directed edge goes from this node to the other node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeToward(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge enters this node from a given node.\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t */\n\tboolean hasEdgeFrom(Node node);\n\n\t/**\n\t * True if an edge enters this node from a node with given index.\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return True if a directed edge goes from the other node to this node or\n\t *         if an undirected edge exists.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * True if an edge exists between this node and another node.\n\t * \n\t * @param node\n\t *            Another node.\n\t * @return True if an edge exists between this node and the other node.\n\t */\n\tboolean hasEdgeBetween(Node node);\n\n\t/**\n\t * True if an edge exists between this node and a node with given index.\n\t * \n\t * @param index\n\t *            Index of another node.\n\t * @return True if an edge exists between this node and the other node.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\tboolean hasEdgeBetween(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves this node toward another node.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeToward(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves this node toward the node with given index.\n\t * <p>\n\t * This method selects only edges leaving this node an pointing at the\n\t * parameter node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeToward(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the target node.\n\t * @return Directed edge going from this node to the parameter node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeToward(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge that leaves given node toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t */\n\t<T extends Edge> T getEdgeFrom(Node node);\n\n\t/**\n\t * Retrieves an edge that leaves node with given index toward this node.\n\t * <p>\n\t * This method selects only edges leaving the other node an pointing at this\n\t * node (this also selects undirected edges).\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and returns something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeFrom(&quot;...&quot;);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            Index of the source node.\n\t * @return Directed edge going from the parameter node to this node, or\n\t *         undirected edge if it exists, else null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException;\n\n\t/**\n\t * Retrieves an edge between this node and and another node if one exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param node\n\t *            The opposite node.\n\t * @return Edge between this node and the parameter node if it exists, else\n\t *         null.\n\t */\n\t<T extends Edge> T getEdgeBetween(Node node);\n\n\t/**\n\t * Retrieves an edge between this node and the node with index i if one\n\t * exists.\n\t * <p>\n\t * This method selects directed or undirected edges. If the edge is\n\t * directed, its direction is not important and leaving or entering edges\n\t * will be selected.\n\t * </p>\n\t * <p>\n\t * This method is implicitly generic and return something which extends\n\t * Edge. The return type is the one of the left part of the assignment. For\n\t * example, in the following call :\n\t * \n\t * <pre>\n\t * ExtendedEdge e = node.getEdgeBetween(...);\n\t * </pre>\n\t * \n\t * the method will return an ExtendedEdge. If no left part exists, method\n\t * will just return an Edge.\n\t * </p>\n\t * \n\t * @param index\n\t *            The index of the opposite node.\n\t * @return Edge between node with index i and this node if it exists, else\n\t *         null.\n\t * @throws IndexOutOfBoundsException\n\t *             if the index is negative or greater than {@code\n\t *             getNodeCount() - 1}.\n\t */\n\t<T extends Edge> T getEdgeBetween(int index)\n\t\t\tthrows IndexOutOfBoundsException;\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(Node node)" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(String id)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(Node node)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(String id)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getLeavingEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getLeavingEdgeIterator()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(String id)" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator()" ], [ "getEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEdgeSet()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(Node node)" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(String id)" ], [ "getNeighborNodeIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getNeighborNodeIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEdge(int i)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "getEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getEnteringEdge(int i)" ], [ "getInDegree", "org.graphstream.graph", "Node", "int getInDegree()" ], [ "getEnteringEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getEnteringEdgeSet()" ], [ "getEachLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachLeavingEdge()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(Node node)" ], [ "getEnteringEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEnteringEdgeIterator()" ], [ "getEdgeIterator", "org.graphstream.graph", "Node", "<T extends Edge> Iterator<T> getEdgeIterator()" ], [ "getEdgeFrom", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(int index) throws IndexOutOfBoundsException" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getLeavingEdgeSet", "org.graphstream.graph", "Node", "<T extends Edge> Collection<T> getLeavingEdgeSet()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(int index) throws IndexOutOfBoundsException" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getEdgeBetween", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeBetween(Node node)" ], [ "getLeavingEdge", "org.graphstream.graph", "Node", "<T extends Edge> T getLeavingEdge(int i)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(String id)" ], [ "getEachEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEdge()" ], [ "getBreadthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getBreadthFirstIterator(boolean directed)" ], [ "toString", "org.graphstream.graph", "Node", "String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasEdgeFrom", "org.graphstream.graph", "Node", "boolean hasEdgeFrom(String id)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getOutDegree", "org.graphstream.graph", "Node", "int getOutDegree()" ], [ "getEdgeToward", "org.graphstream.graph", "Node", "<T extends Edge> T getEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getDegree", "org.graphstream.graph", "Node", "int getDegree()" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "hasEdgeToward", "org.graphstream.graph", "Node", "boolean hasEdgeToward(int index) throws IndexOutOfBoundsException" ], [ "getEachEnteringEdge", "org.graphstream.graph", "Node", "<T extends Edge> Iterable<T> getEachEnteringEdge()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getGraph", "org.graphstream.graph", "Node", "Graph getGraph()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getDepthFirstIterator", "org.graphstream.graph", "Node", "<T extends Node> Iterator<T> getDepthFirstIterator(boolean directed)" ], [ "hasEdgeBetween", "org.graphstream.graph", "Node", "boolean hasEdgeBetween(Node node)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]